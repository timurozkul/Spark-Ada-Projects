(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "text_io_file_type" defined at spark.ads:61, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io_file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type text_io_file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : text_io_file_type) (b : text_io_file_type) : bool
 
 val constant dummy 
   : text_io_file_type

 
 type text_io_file_type__ref =
  { mutable text_io_file_type__content : text_io_file_type }
 
 function text_io_file_type__ref_text_io_file_type__content__projection 
   (a : text_io_file_type__ref) : text_io_file_type =
  a.text_io_file_type__content
 
 meta "model_projection" function text_io_file_type__ref_text_io_file_type__content__projection
 
 meta "inline:no" function text_io_file_type__ref_text_io_file_type__content__projection
 
 val text_io_file_type__havoc 
   (x : text_io_file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : file_type) (b : file_type) : bool
 
 val constant dummy 
   : file_type

 
 type file_type__ref =
  { mutable file_type__content : file_type }
 
 function file_type__ref_file_type__content__projection 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref_file_type__content__projection
 
 meta "inline:no" function file_type__ref_file_type__content__projection
 
 val file_type__havoc 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__projection
 
 meta "inline:no" function file_status__ref_file_status__content__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status__rep
 use        Spark__file_status as Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__file_status.file_status, 
 predicate in_range = Spark__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_statusB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_statusB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_statusB__ref =
  { mutable file_statusB__content : file_statusB }
 
 function file_statusB__ref_file_statusB__content__projection 
   (a : file_statusB__ref) : file_statusB =
  a.file_statusB__content
 
 meta "model_projection" function file_statusB__ref_file_statusB__content__projection
 
 meta "inline:no" function file_statusB__ref_file_statusB__content__projection
 
 val file_statusB__havoc 
   (x : file_statusB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB__rep
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_statusB.file_statusB, 
 predicate in_range = Spark__text_io__file_statusB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__2__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__2__projection
 
 meta "inline:no" function file_status__ref_file_status__content__2__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status__rep
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_status.file_status, 
 predicate in_range = Spark__text_io__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode__rep
 use        Ada__text_io__file_mode as Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__file_mode.file_mode, 
 predicate in_range = Ada__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_modeB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_modeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_modeB__ref =
  { mutable file_modeB__content : file_modeB }
 
 function file_modeB__ref_file_modeB__content__projection 
   (a : file_modeB__ref) : file_modeB =
  a.file_modeB__content
 
 meta "model_projection" function file_modeB__ref_file_modeB__content__projection
 
 meta "inline:no" function file_modeB__ref_file_modeB__content__projection
 
 val file_modeB__havoc 
   (x : file_modeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB__rep
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_modeB.file_modeB, 
 predicate in_range = Spark__text_io__file_modeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__2__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__2__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__2__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode__rep
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_mode.file_mode, 
 predicate in_range = Spark__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at spark-text_io.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__2__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__2__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__2__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at spark-text_io.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__TcountB__rep
 use        Spark__text_io__TcountB as Spark__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Spark__text_io__TcountB.tcountB) : int =
  (Spark__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__TcountB.tcountB, 
 predicate in_range = Spark__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at spark-text_io.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at spark-text_io.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__count__rep
 use        Spark__text_io__count as Spark__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Spark__text_io__count.count) : int =
  (Spark__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__count.count, 
 predicate in_range = Spark__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__2__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__2__projection
 
 meta "inline:no" function count__ref_count__content__2__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive_count" defined at spark-text_io.ads:62, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__positive_count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive_count =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive_count__ref =
  { mutable positive_count__content : positive_count }
 
 function positive_count__ref_positive_count__content__projection 
   (a : positive_count__ref) : positive_count =
  a.positive_count__content
 
 meta "model_projection" function positive_count__ref_positive_count__content__projection
 
 meta "inline:no" function positive_count__ref_positive_count__content__projection
 
 val positive_count__havoc 
   (x : positive_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive_count" defined at spark-text_io.ads:62, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__positive_count__rep
 use        Spark__text_io__positive_count as Spark__text_io__positive_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Spark__text_io__positive_count.positive_count) : int =
  (Spark__text_io__positive_count.positive_count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__positive_count.positive_count, 
 predicate in_range = Spark__text_io__positive_count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "field" defined at spark-text_io.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__field
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type field =
  < range 0 255 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = field, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type field__ref =
  { mutable field__content : field }
 
 function field__ref_field__content__projection 
   (a : field__ref) : field =
  a.field__content
 
 meta "model_projection" function field__ref_field__content__projection
 
 meta "inline:no" function field__ref_field__content__projection
 
 val field__havoc 
   (x : field__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "field" defined at spark-text_io.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__field__rep
 use        Spark__text_io__field as Spark__text_io__field
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Spark__text_io__field.field) : int =
  (Spark__text_io__field.field'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__field.field, 
 predicate in_range = Spark__text_io__field.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "number_base" defined at spark-text_io.ads:65, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__number_base
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type number_base =
  < range 2 16 >
 
 val constant first 
   : int
  ensures { result =  (2 : int) }
 
 val constant last 
   : int
  ensures { result =  (16 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = number_base, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type number_base__ref =
  { mutable number_base__content : number_base }
 
 function number_base__ref_number_base__content__projection 
   (a : number_base__ref) : number_base =
  a.number_base__content
 
 meta "model_projection" function number_base__ref_number_base__content__projection
 
 meta "inline:no" function number_base__ref_number_base__content__projection
 
 val number_base__havoc 
   (x : number_base__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "number_base" defined at spark-text_io.ads:65, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__number_base__rep
 use        Spark__text_io__number_base as Spark__text_io__number_base
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Spark__text_io__number_base.number_base) : int =
  (Spark__text_io__number_base.number_base'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__number_base.number_base, 
 predicate in_range = Spark__text_io__number_base.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "type_set" defined at a-textio.ads:93, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type type_set 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = type_set, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type type_set__ref =
  { mutable type_set__content : type_set }
 
 function type_set__ref_type_set__content__projection 
   (a : type_set__ref) : type_set =
  a.type_set__content
 
 meta "model_projection" function type_set__ref_type_set__content__projection
 
 meta "inline:no" function type_set__ref_type_set__content__projection
 
 val type_set__havoc 
   (x : type_set__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "type_set" defined at a-textio.ads:93, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set__rep
 use        Ada__text_io__type_set as Ada__text_io__type_set
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__type_set.type_set, 
 predicate in_range = Ada__text_io__type_set.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "type_setB" defined at spark-text_io.ads:67, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__type_setB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type type_setB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = type_setB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type type_setB__ref =
  { mutable type_setB__content : type_setB }
 
 function type_setB__ref_type_setB__content__projection 
   (a : type_setB__ref) : type_setB =
  a.type_setB__content
 
 meta "model_projection" function type_setB__ref_type_setB__content__projection
 
 meta "inline:no" function type_setB__ref_type_setB__content__projection
 
 val type_setB__havoc 
   (x : type_setB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "type_setB" defined at spark-text_io.ads:67, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__type_setB__rep
 use        Spark__text_io__type_setB as Spark__text_io__type_setB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__type_setB.type_setB, 
 predicate in_range = Spark__text_io__type_setB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "type_set" defined at spark-text_io.ads:67, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__type_set
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type type_set 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = type_set, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type type_set__ref =
  { mutable type_set__content : type_set }
 
 function type_set__ref_type_set__content__2__projection 
   (a : type_set__ref) : type_set =
  a.type_set__content
 
 meta "model_projection" function type_set__ref_type_set__content__2__projection
 
 meta "inline:no" function type_set__ref_type_set__content__2__projection
 
 val type_set__havoc 
   (x : type_set__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "type_set" defined at spark-text_io.ads:67, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__type_set__rep
 use        Spark__text_io__type_set as Spark__text_io__type_set
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__type_set.type_set, 
 predicate in_range = Spark__text_io__type_set.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "count_result" defined at spark-text_io.ads:69, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io__count_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count__rep as Spark__text_io__count__rep

 type __split_discrs =
  { rec__spark__text_io__count_result__status [@name:Status] [@model_trace:.8668] : Spark__text_io__file_status.file_status }
 
 function __split_discrs_rec__spark__text_io__count_result__status__projection [@name:Status] [@model_trace:.8668] 
   (a : __split_discrs) : Spark__text_io__file_status.file_status =
  a.rec__spark__text_io__count_result__status
 
 meta "model_projection" function __split_discrs_rec__spark__text_io__count_result__status__projection
 
 meta "inline:no" function __split_discrs_rec__spark__text_io__count_result__status__projection
 
 type __split_discrs__ref =
  { mutable __split_discrs__content : __split_discrs }
 
 function __split_discrs__ref___split_discrs__content__projection 
   (a : __split_discrs__ref) : __split_discrs =
  a.__split_discrs__content
 
 meta "model_projection" function __split_discrs__ref___split_discrs__content__projection
 
 meta "inline:no" function __split_discrs__ref___split_discrs__content__projection
 
 val __split_discrs__havoc 
   (x : __split_discrs__ref) : unit
  writes {x}
 
 type __split_fields =
  { rec__spark__text_io__count_result__value [@model_trace:.8686] [@name:Value] : Spark__text_io__count.count }
 
 function __split_fields_rec__spark__text_io__count_result__value__projection [@model_trace:.8686] [@name:Value] 
   (a : __split_fields) : Spark__text_io__count.count =
  a.rec__spark__text_io__count_result__value
 
 meta "model_projection" function __split_fields_rec__spark__text_io__count_result__value__projection
 
 meta "inline:no" function __split_fields_rec__spark__text_io__count_result__value__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_discrs : __split_discrs; __split_fields : __split_fields; attr__constrained [@model_trace:'Constrained] : bool }
 
 function __rep___split_discrs__projection 
   (a : __rep) : __split_discrs =
  a.__split_discrs
 
 meta "model_projection" function __rep___split_discrs__projection
 
 meta "inline:no" function __rep___split_discrs__projection
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function __rep_attr__constrained__projection [@model_trace:'Constrained] 
   (a : __rep) : bool =
  a.attr__constrained
 
 meta "model_projection" function __rep_attr__constrained__projection
 
 meta "inline:no" function __rep_attr__constrained__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val rec__spark__text_io__count_result__status_ 
   (a : __rep) : Spark__text_io__file_status.file_status
  requires {  true }
  ensures {  (result = a.__split_discrs.rec__spark__text_io__count_result__status) }
 
 predicate spark__text_io__count_result__value__pred 
   (a : __rep) =
  ((Spark__text_io__file_status__rep.to_rep a.__split_discrs.rec__spark__text_io__count_result__status) = (1 : int))
 val spark__text_io__count_result__value__pred 
   (a : __rep) : bool
  ensures { result <-> spark__text_io__count_result__value__pred (a : __rep) }
 
 val rec__spark__text_io__count_result__value_ 
   (a : __rep) : Spark__text_io__count.count
  requires {  (spark__text_io__count_result__value__pred a) }
  ensures {  (result = a.__split_fields.rec__spark__text_io__count_result__value) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Spark__text_io__file_status__rep.to_rep a.__split_discrs.rec__spark__text_io__count_result__status) = (Spark__text_io__file_status__rep.to_rep b.__split_discrs.rec__spark__text_io__count_result__status)) /\ ( (spark__text_io__count_result__value__pred a) -> ((Spark__text_io__count__rep.to_rep a.__split_fields.rec__spark__text_io__count_result__value) = (Spark__text_io__count__rep.to_rep b.__split_fields.rec__spark__text_io__count_result__value)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "count_result" defined at spark-text_io.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__count_result
 use export Spark__text_io__count_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count_result =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__count_result__status__first__bit 
   : int

 
 val constant spark__text_io__count_result__status__last__bit 
   : int

 
 val constant spark__text_io__count_result__status__position 
   : int

 
 axiom spark__text_io__count_result__status__first__bit_axiom :
  ((spark__text_io__count_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__status__last__bit_axiom :
  ((spark__text_io__count_result__status__last__bit ) > (spark__text_io__count_result__status__first__bit ))
 
 axiom spark__text_io__count_result__status__position_axiom :
  ((spark__text_io__count_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__count_result__value__first__bit 
   : int

 
 val constant spark__text_io__count_result__value__last__bit 
   : int

 
 val constant spark__text_io__count_result__value__position 
   : int

 
 axiom spark__text_io__count_result__value__first__bit_axiom :
  ((spark__text_io__count_result__value__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__value__last__bit_axiom :
  ((spark__text_io__count_result__value__last__bit ) > (spark__text_io__count_result__value__first__bit ))
 
 axiom spark__text_io__count_result__value__position_axiom :
  ((spark__text_io__count_result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : count_result) (b : count_result) : bool
 
 val constant dummy 
   : count_result

 
 type count_result__ref =
  { mutable count_result__content : count_result }
 
 function count_result__ref_count_result__content__projection 
   (a : count_result__ref) : count_result =
  a.count_result__content
 
 meta "model_projection" function count_result__ref_count_result__content__projection
 
 meta "inline:no" function count_result__ref_count_result__content__projection
 
 val count_result__havoc 
   (x : count_result__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "character_result" defined at spark-text_io.ads:76, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io__character_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 type __split_discrs =
  { rec__spark__text_io__character_result__status [@model_trace:.8709] [@name:Status] : Spark__text_io__file_status.file_status }
 
 function __split_discrs_rec__spark__text_io__character_result__status__projection [@model_trace:.8709] [@name:Status] 
   (a : __split_discrs) : Spark__text_io__file_status.file_status =
  a.rec__spark__text_io__character_result__status
 
 meta "model_projection" function __split_discrs_rec__spark__text_io__character_result__status__projection
 
 meta "inline:no" function __split_discrs_rec__spark__text_io__character_result__status__projection
 
 type __split_discrs__ref =
  { mutable __split_discrs__content : __split_discrs }
 
 function __split_discrs__ref___split_discrs__content__2__projection 
   (a : __split_discrs__ref) : __split_discrs =
  a.__split_discrs__content
 
 meta "model_projection" function __split_discrs__ref___split_discrs__content__2__projection
 
 meta "inline:no" function __split_discrs__ref___split_discrs__content__2__projection
 
 val __split_discrs__havoc 
   (x : __split_discrs__ref) : unit
  writes {x}
 
 type __split_fields =
  { rec__spark__text_io__character_result__item [@name:Item] [@model_trace:.8727] : Standard__character.character }
 
 function __split_fields_rec__spark__text_io__character_result__item__projection [@name:Item] [@model_trace:.8727] 
   (a : __split_fields) : Standard__character.character =
  a.rec__spark__text_io__character_result__item
 
 meta "model_projection" function __split_fields_rec__spark__text_io__character_result__item__projection
 
 meta "inline:no" function __split_fields_rec__spark__text_io__character_result__item__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_discrs : __split_discrs; __split_fields : __split_fields; attr__constrained [@model_trace:'Constrained] : bool }
 
 function __rep___split_discrs__2__projection 
   (a : __rep) : __split_discrs =
  a.__split_discrs
 
 meta "model_projection" function __rep___split_discrs__2__projection
 
 meta "inline:no" function __rep___split_discrs__2__projection
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function __rep_attr__constrained__2__projection [@model_trace:'Constrained] 
   (a : __rep) : bool =
  a.attr__constrained
 
 meta "model_projection" function __rep_attr__constrained__2__projection
 
 meta "inline:no" function __rep_attr__constrained__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val rec__spark__text_io__character_result__status_ 
   (a : __rep) : Spark__text_io__file_status.file_status
  requires {  true }
  ensures {  (result = a.__split_discrs.rec__spark__text_io__character_result__status) }
 
 predicate spark__text_io__character_result__item__pred 
   (a : __rep) =
  ((Spark__text_io__file_status__rep.to_rep a.__split_discrs.rec__spark__text_io__character_result__status) = (1 : int))
 val spark__text_io__character_result__item__pred 
   (a : __rep) : bool
  ensures { result <-> spark__text_io__character_result__item__pred (a : __rep) }
 
 val rec__spark__text_io__character_result__item_ 
   (a : __rep) : Standard__character.character
  requires {  (spark__text_io__character_result__item__pred a) }
  ensures {  (result = a.__split_fields.rec__spark__text_io__character_result__item) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Spark__text_io__file_status__rep.to_rep a.__split_discrs.rec__spark__text_io__character_result__status) = (Spark__text_io__file_status__rep.to_rep b.__split_discrs.rec__spark__text_io__character_result__status)) /\ ( (spark__text_io__character_result__item__pred a) -> ((Standard__character__rep.to_rep a.__split_fields.rec__spark__text_io__character_result__item) = (Standard__character__rep.to_rep b.__split_fields.rec__spark__text_io__character_result__item)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "character_result" defined at spark-text_io.ads:76, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__character_result
 use export Spark__text_io__character_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character_result =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__character_result__status__first__bit 
   : int

 
 val constant spark__text_io__character_result__status__last__bit 
   : int

 
 val constant spark__text_io__character_result__status__position 
   : int

 
 axiom spark__text_io__character_result__status__first__bit_axiom :
  ((spark__text_io__character_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__character_result__status__last__bit_axiom :
  ((spark__text_io__character_result__status__last__bit ) > (spark__text_io__character_result__status__first__bit ))
 
 axiom spark__text_io__character_result__status__position_axiom :
  ((spark__text_io__character_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__character_result__item__first__bit 
   : int

 
 val constant spark__text_io__character_result__item__last__bit 
   : int

 
 val constant spark__text_io__character_result__item__position 
   : int

 
 axiom spark__text_io__character_result__item__first__bit_axiom :
  ((spark__text_io__character_result__item__first__bit ) >= (0 : int))
 
 axiom spark__text_io__character_result__item__last__bit_axiom :
  ((spark__text_io__character_result__item__last__bit ) > (spark__text_io__character_result__item__first__bit ))
 
 axiom spark__text_io__character_result__item__position_axiom :
  ((spark__text_io__character_result__item__position ) >= (0 : int))
 
 val function user_eq 
   (a : character_result) (b : character_result) : bool
 
 val constant dummy 
   : character_result

 
 type character_result__ref =
  { mutable character_result__content : character_result }
 
 function character_result__ref_character_result__content__projection 
   (a : character_result__ref) : character_result =
  a.character_result__content
 
 meta "model_projection" function character_result__ref_character_result__content__projection
 
 meta "inline:no" function character_result__ref_character_result__content__projection
 
 val character_result__havoc 
   (x : character_result__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "immediate_result" defined at spark-text_io.ads:83, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io__immediate_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 type __split_discrs =
  { rec__spark__text_io__immediate_result__status [@model_trace:.8750] [@name:Status] : Spark__text_io__file_status.file_status; rec__spark__text_io__immediate_result__available [@model_trace:.8760] [@name:Available] : bool }
 
 function __split_discrs_rec__spark__text_io__immediate_result__status__projection [@model_trace:.8750] [@name:Status] 
   (a : __split_discrs) : Spark__text_io__file_status.file_status =
  a.rec__spark__text_io__immediate_result__status
 
 meta "model_projection" function __split_discrs_rec__spark__text_io__immediate_result__status__projection
 
 meta "inline:no" function __split_discrs_rec__spark__text_io__immediate_result__status__projection
 
 function __split_discrs_rec__spark__text_io__immediate_result__available__projection [@model_trace:.8760] [@name:Available] 
   (a : __split_discrs) : bool =
  a.rec__spark__text_io__immediate_result__available
 
 meta "model_projection" function __split_discrs_rec__spark__text_io__immediate_result__available__projection
 
 meta "inline:no" function __split_discrs_rec__spark__text_io__immediate_result__available__projection
 
 type __split_discrs__ref =
  { mutable __split_discrs__content : __split_discrs }
 
 function __split_discrs__ref___split_discrs__content__3__projection 
   (a : __split_discrs__ref) : __split_discrs =
  a.__split_discrs__content
 
 meta "model_projection" function __split_discrs__ref___split_discrs__content__3__projection
 
 meta "inline:no" function __split_discrs__ref___split_discrs__content__3__projection
 
 val __split_discrs__havoc 
   (x : __split_discrs__ref) : unit
  writes {x}
 
 type __split_fields =
  { rec__spark__text_io__immediate_result__item [@name:Item] [@model_trace:.8783] : Standard__character.character }
 
 function __split_fields_rec__spark__text_io__immediate_result__item__projection [@name:Item] [@model_trace:.8783] 
   (a : __split_fields) : Standard__character.character =
  a.rec__spark__text_io__immediate_result__item
 
 meta "model_projection" function __split_fields_rec__spark__text_io__immediate_result__item__projection
 
 meta "inline:no" function __split_fields_rec__spark__text_io__immediate_result__item__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_discrs : __split_discrs; __split_fields : __split_fields; attr__constrained [@model_trace:'Constrained] : bool }
 
 function __rep___split_discrs__3__projection 
   (a : __rep) : __split_discrs =
  a.__split_discrs
 
 meta "model_projection" function __rep___split_discrs__3__projection
 
 meta "inline:no" function __rep___split_discrs__3__projection
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function __rep_attr__constrained__3__projection [@model_trace:'Constrained] 
   (a : __rep) : bool =
  a.attr__constrained
 
 meta "model_projection" function __rep_attr__constrained__3__projection
 
 meta "inline:no" function __rep_attr__constrained__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val rec__spark__text_io__immediate_result__status_ 
   (a : __rep) : Spark__text_io__file_status.file_status
  requires {  true }
  ensures {  (result = a.__split_discrs.rec__spark__text_io__immediate_result__status) }
 
 val rec__spark__text_io__immediate_result__available_ 
   (a : __rep) : bool
  requires {  true }
  ensures {  (result = a.__split_discrs.rec__spark__text_io__immediate_result__available) }
 
 predicate spark__text_io__immediate_result__item__pred 
   (a : __rep) =
  ( ((Boolean.to_int a.__split_discrs.rec__spark__text_io__immediate_result__available) = (1 : int)) /\ ((Spark__text_io__file_status__rep.to_rep a.__split_discrs.rec__spark__text_io__immediate_result__status) = (1 : int)) )
 val spark__text_io__immediate_result__item__pred 
   (a : __rep) : bool
  ensures { result <-> spark__text_io__immediate_result__item__pred (a : __rep) }
 
 val rec__spark__text_io__immediate_result__item_ 
   (a : __rep) : Standard__character.character
  requires {  (spark__text_io__immediate_result__item__pred a) }
  ensures {  (result = a.__split_fields.rec__spark__text_io__immediate_result__item) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Spark__text_io__file_status__rep.to_rep a.__split_discrs.rec__spark__text_io__immediate_result__status) = (Spark__text_io__file_status__rep.to_rep b.__split_discrs.rec__spark__text_io__immediate_result__status)) /\ (a.__split_discrs.rec__spark__text_io__immediate_result__available = b.__split_discrs.rec__spark__text_io__immediate_result__available) ) /\ ( (spark__text_io__immediate_result__item__pred a) -> ((Standard__character__rep.to_rep a.__split_fields.rec__spark__text_io__immediate_result__item) = (Standard__character__rep.to_rep b.__split_fields.rec__spark__text_io__immediate_result__item)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "immediate_result" defined at spark-text_io.ads:83, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__immediate_result
 use export Spark__text_io__immediate_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type immediate_result =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__immediate_result__status__first__bit 
   : int

 
 val constant spark__text_io__immediate_result__status__last__bit 
   : int

 
 val constant spark__text_io__immediate_result__status__position 
   : int

 
 axiom spark__text_io__immediate_result__status__first__bit_axiom :
  ((spark__text_io__immediate_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__immediate_result__status__last__bit_axiom :
  ((spark__text_io__immediate_result__status__last__bit ) > (spark__text_io__immediate_result__status__first__bit ))
 
 axiom spark__text_io__immediate_result__status__position_axiom :
  ((spark__text_io__immediate_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__immediate_result__available__first__bit 
   : int

 
 val constant spark__text_io__immediate_result__available__last__bit 
   : int

 
 val constant spark__text_io__immediate_result__available__position 
   : int

 
 axiom spark__text_io__immediate_result__available__first__bit_axiom :
  ((spark__text_io__immediate_result__available__first__bit ) >= (0 : int))
 
 axiom spark__text_io__immediate_result__available__last__bit_axiom :
  ((spark__text_io__immediate_result__available__last__bit ) > (spark__text_io__immediate_result__available__first__bit ))
 
 axiom spark__text_io__immediate_result__available__position_axiom :
  ((spark__text_io__immediate_result__available__position ) >= (0 : int))
 
 val constant spark__text_io__immediate_result__item__first__bit 
   : int

 
 val constant spark__text_io__immediate_result__item__last__bit 
   : int

 
 val constant spark__text_io__immediate_result__item__position 
   : int

 
 axiom spark__text_io__immediate_result__item__first__bit_axiom :
  ((spark__text_io__immediate_result__item__first__bit ) >= (0 : int))
 
 axiom spark__text_io__immediate_result__item__last__bit_axiom :
  ((spark__text_io__immediate_result__item__last__bit ) > (spark__text_io__immediate_result__item__first__bit ))
 
 axiom spark__text_io__immediate_result__item__position_axiom :
  ((spark__text_io__immediate_result__item__position ) >= (0 : int))
 
 val function user_eq 
   (a : immediate_result) (b : immediate_result) : bool
 
 val constant dummy 
   : immediate_result

 
 type immediate_result__ref =
  { mutable immediate_result__content : immediate_result }
 
 function immediate_result__ref_immediate_result__content__projection 
   (a : immediate_result__ref) : immediate_result =
  a.immediate_result__content
 
 meta "model_projection" function immediate_result__ref_immediate_result__content__projection
 
 meta "inline:no" function immediate_result__ref_immediate_result__content__projection
 
 val immediate_result__havoc 
   (x : immediate_result__ref) : unit
  writes {x}

end

(* Module for defining the constant "file" defined at spark-text_io.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_readable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 180 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_readable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_open__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 162 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_open__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_open
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_open 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_open__function_guard 
   (temp___result_154 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__mode__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 165 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__mode__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__mode__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function mode__2 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate mode__2__function_guard 
   (temp___result_155 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_readable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_readable__function_guard 
   (temp___result_156 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__status__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 133 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:133, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__status__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function status 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate status__function_guard 
   (temp___result_157 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_writable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 184 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:184, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_writable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_writable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_writable__function_guard 
   (temp___result_158 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_standard_input__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 139 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_standard_input__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_standard_input" defined at spark-text_io.ads:139, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_standard_input 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_standard_input__function_guard 
   (temp___result_159 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_standard_output__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 143 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_standard_output__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_standard_output" defined at spark-text_io.ads:143, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_standard_output 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_standard_output__function_guard 
   (temp___result_160 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_standard_error__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 147 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_standard_error__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_standard_error" defined at spark-text_io.ads:147, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_standard_error
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_standard_error 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_standard_error__function_guard 
   (temp___result_161 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_standard_writable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 151 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_standard_writable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_standard_writable" defined at spark-text_io.ads:151, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_standard_writable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_standard_writable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_standard_writable__function_guard 
   (temp___result_162 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_standard_file__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 156 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_standard_file__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_standard_file" defined at spark-text_io.ads:156, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_standard_file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_standard_file 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_standard_file__function_guard 
   (temp___result_163 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:172, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__name__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 172 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:172, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__name__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "name" defined at spark-text_io.ads:172, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__name
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function name 
   (file : Spark__text_io__file_type.file_type) : Standard__string.string
 
 val predicate name__function_guard 
   (temp___result_164 : Standard__string.string) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:176, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__form__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 176 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:176, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__form__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "form" defined at spark-text_io.ads:176, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__form
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function form 
   (file : Spark__text_io__file_type.file_type) : Standard__string.string
 
 val predicate form__function_guard 
   (temp___result_165 : Standard__string.string) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "the_mode" defined at spark-text_io.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__create__2__the_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant the_mode [#"spark-text_io.ads" 192 0 0][@name:The_Mode] [@model_trace:9297] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_mode" defined at spark-text_io.ads:192, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__create__2__the_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "the_name" defined at spark-text_io.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__create__2__the_name
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant the_name [#"spark-text_io.ads" 193 0 0][@model_projected] [@model_trace:9307] [@name:The_Name] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_name" defined at spark-text_io.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__create__2__the_name___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "the_form" defined at spark-text_io.ads:194, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__create__2__the_form
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant the_form [#"spark-text_io.ads" 194 0 0][@model_trace:9317] [@model_projected] [@name:The_Form] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_form" defined at spark-text_io.ads:194, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__create__2__the_form___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:345, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__line_length__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 345 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:345, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__line_length__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__2" defined at spark-text_io.ads:345, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function line_length__2 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_166 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:352, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__page_length__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 352 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:352, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__page_length__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "page_length__2" defined at spark-text_io.ads:352, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function page_length__2 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_167 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "the_mode" defined at spark-text_io.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__open__2__the_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant the_mode [#"spark-text_io.ads" 212 0 0][@name:The_Mode] [@model_trace:9406] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_mode" defined at spark-text_io.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__open__2__the_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "the_name" defined at spark-text_io.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__open__2__the_name
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant the_name [#"spark-text_io.ads" 213 0 0][@model_projected] [@model_trace:9415] [@name:The_Name] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_name" defined at spark-text_io.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__open__2__the_name___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "the_form" defined at spark-text_io.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__open__2__the_form
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant the_form [#"spark-text_io.ads" 214 0 0][@model_trace:9424] [@model_projected] [@name:The_Form] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_form" defined at spark-text_io.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__open__2__the_form___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "the_mode" defined at spark-text_io.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__reset__2__the_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant the_mode [#"spark-text_io.ads" 241 0 0][@name:The_Mode] [@model_trace:9605] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_mode" defined at spark-text_io.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__reset__2__the_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at spark-text_io.ads:299, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_line_length__2__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 299 0 0][@model_trace:9929] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:299, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_line_length__2__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at spark-text_io.ads:310, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_line_length__3__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 310 0 0][@model_trace:10024] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:310, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_line_length__3__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at spark-text_io.ads:323, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_page_length__2__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 323 0 0][@name:To] [@model_trace:10116] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:323, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_page_length__2__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at spark-text_io.ads:333, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_page_length__3__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 333 0 0][@model_trace:10211] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:333, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_page_length__3__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "spacing" defined at spark-text_io.ads:362, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__new_line__2__spacing
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant spacing [#"spark-text_io.ads" 362 0 0][@name:Spacing] [@model_trace:10391] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spacing" defined at spark-text_io.ads:362, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__new_line__2__spacing___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "spacing" defined at spark-text_io.ads:372, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__new_line__3__spacing
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant spacing [#"spark-text_io.ads" 372 0 0][@name:Spacing] [@model_trace:10485] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spacing" defined at spark-text_io.ads:372, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__new_line__3__spacing___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "spacing" defined at spark-text_io.ads:387, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__skip_line__2__spacing
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant spacing [#"spark-text_io.ads" 387 0 0][@name:Spacing] [@model_trace:10576] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spacing" defined at spark-text_io.ads:387, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__skip_line__2__spacing___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:459, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__end_of_file__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 459 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:459, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__end_of_file__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "end_of_file" defined at spark-text_io.ads:459, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__end_of_file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function end_of_file 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate end_of_file__function_guard 
   (temp___result_170 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "spacing" defined at spark-text_io.ads:395, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__skip_line__3__spacing
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant spacing [#"spark-text_io.ads" 395 0 0][@name:Spacing] [@model_trace:10646] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spacing" defined at spark-text_io.ads:395, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__skip_line__3__spacing___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:404, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__end_of_line__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 404 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:404, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__end_of_line__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "end_of_line" defined at spark-text_io.ads:404, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__end_of_line
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function end_of_line 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate end_of_line__function_guard 
   (temp___result_172 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:452, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__end_of_page__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 452 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:452, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__end_of_page__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "end_of_page" defined at spark-text_io.ads:452, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__end_of_page
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function end_of_page 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate end_of_page__function_guard 
   (temp___result_174 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "to" defined at spark-text_io.ads:467, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_col__2__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 467 0 0][@model_trace:11151] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:467, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_col__2__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:531, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__col__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 531 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:531, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__col__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "col__3" defined at spark-text_io.ads:531, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__col__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__count_result as Spark__text_io__count_result

 val function col__3 
   (file : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
 
 val predicate col__3__function_guard 
   (temp___result_176 : Spark__text_io__count_result.count_result) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "T97s" defined at spark-text_io.ads:473, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__set_col__2__T97s
 use export Spark__text_io__count_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 type t97s =
  __rep
 
 predicate in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) =
  (rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.to_rep (Spark__text_io__count_result.rec__spark__text_io__count_result__status a.Spark__text_io__count_result.__split_discrs)))
 val in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : bool
  ensures { result <-> in_range (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) }
 
 val range_check_ 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : Spark__text_io__count_result.count_result
  requires {  (in_range rec__spark__text_io__count_result__status a) }
  ensures {  (result = a) }
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__count_result__status__first__bit 
   : int

 
 val constant spark__text_io__count_result__status__last__bit 
   : int

 
 val constant spark__text_io__count_result__status__position 
   : int

 
 axiom spark__text_io__count_result__status__first__bit_axiom :
  ((spark__text_io__count_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__status__last__bit_axiom :
  ((spark__text_io__count_result__status__last__bit ) > (spark__text_io__count_result__status__first__bit ))
 
 axiom spark__text_io__count_result__status__position_axiom :
  ((spark__text_io__count_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__count_result__value__first__bit 
   : int

 
 val constant spark__text_io__count_result__value__last__bit 
   : int

 
 val constant spark__text_io__count_result__value__position 
   : int

 
 axiom spark__text_io__count_result__value__first__bit_axiom :
  ((spark__text_io__count_result__value__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__value__last__bit_axiom :
  ((spark__text_io__count_result__value__last__bit ) > (spark__text_io__count_result__value__first__bit ))
 
 axiom spark__text_io__count_result__value__position_axiom :
  ((spark__text_io__count_result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : t97s) (b : t97s) : bool
 
 val constant dummy 
   : t97s

 
 type t97s__ref =
  { mutable t97s__content : t97s }
 
 function t97s__ref_t97s__content__projection 
   (a : t97s__ref) : t97s =
  a.t97s__content
 
 meta "model_projection" function t97s__ref_t97s__content__projection
 
 meta "inline:no" function t97s__ref_t97s__content__projection
 
 val t97s__havoc 
   (x : t97s__ref) : unit
  writes {x}

end

(* Module for defining the constant "to" defined at spark-text_io.ads:482, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_col__3__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 482 0 0][@model_trace:11288] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_col__3__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T98s" defined at spark-text_io.ads:488, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__set_col__3__T98s
 use export Spark__text_io__count_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 type t98s =
  __rep
 
 predicate in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) =
  (rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.to_rep (Spark__text_io__count_result.rec__spark__text_io__count_result__status a.Spark__text_io__count_result.__split_discrs)))
 val in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : bool
  ensures { result <-> in_range (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) }
 
 val range_check_ 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : Spark__text_io__count_result.count_result
  requires {  (in_range rec__spark__text_io__count_result__status a) }
  ensures {  (result = a) }
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__count_result__status__first__bit 
   : int

 
 val constant spark__text_io__count_result__status__last__bit 
   : int

 
 val constant spark__text_io__count_result__status__position 
   : int

 
 axiom spark__text_io__count_result__status__first__bit_axiom :
  ((spark__text_io__count_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__status__last__bit_axiom :
  ((spark__text_io__count_result__status__last__bit ) > (spark__text_io__count_result__status__first__bit ))
 
 axiom spark__text_io__count_result__status__position_axiom :
  ((spark__text_io__count_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__count_result__value__first__bit 
   : int

 
 val constant spark__text_io__count_result__value__last__bit 
   : int

 
 val constant spark__text_io__count_result__value__position 
   : int

 
 axiom spark__text_io__count_result__value__first__bit_axiom :
  ((spark__text_io__count_result__value__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__value__last__bit_axiom :
  ((spark__text_io__count_result__value__last__bit ) > (spark__text_io__count_result__value__first__bit ))
 
 axiom spark__text_io__count_result__value__position_axiom :
  ((spark__text_io__count_result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : t98s) (b : t98s) : bool
 
 val constant dummy 
   : t98s

 
 type t98s__ref =
  { mutable t98s__content : t98s }
 
 function t98s__ref_t98s__content__projection 
   (a : t98s__ref) : t98s =
  a.t98s__content
 
 meta "model_projection" function t98s__ref_t98s__content__projection
 
 meta "inline:no" function t98s__ref_t98s__content__projection
 
 val t98s__havoc 
   (x : t98s__ref) : unit
  writes {x}

end

(* Module for defining the constant "to" defined at spark-text_io.ads:499, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_line__2__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 499 0 0][@model_trace:11410] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:499, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_line__2__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:545, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__page__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 545 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:545, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__page__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "page__3" defined at spark-text_io.ads:545, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__page__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__count_result as Spark__text_io__count_result

 val function page__3 
   (file : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
 
 val predicate page__3__function_guard 
   (temp___result_177 : Spark__text_io__count_result.count_result) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "T99s" defined at spark-text_io.ads:506, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__set_line__2__T99s
 use export Spark__text_io__count_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 type t99s =
  __rep
 
 predicate in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) =
  (rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.to_rep (Spark__text_io__count_result.rec__spark__text_io__count_result__status a.Spark__text_io__count_result.__split_discrs)))
 val in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : bool
  ensures { result <-> in_range (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) }
 
 val range_check_ 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : Spark__text_io__count_result.count_result
  requires {  (in_range rec__spark__text_io__count_result__status a) }
  ensures {  (result = a) }
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__count_result__status__first__bit 
   : int

 
 val constant spark__text_io__count_result__status__last__bit 
   : int

 
 val constant spark__text_io__count_result__status__position 
   : int

 
 axiom spark__text_io__count_result__status__first__bit_axiom :
  ((spark__text_io__count_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__status__last__bit_axiom :
  ((spark__text_io__count_result__status__last__bit ) > (spark__text_io__count_result__status__first__bit ))
 
 axiom spark__text_io__count_result__status__position_axiom :
  ((spark__text_io__count_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__count_result__value__first__bit 
   : int

 
 val constant spark__text_io__count_result__value__last__bit 
   : int

 
 val constant spark__text_io__count_result__value__position 
   : int

 
 axiom spark__text_io__count_result__value__first__bit_axiom :
  ((spark__text_io__count_result__value__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__value__last__bit_axiom :
  ((spark__text_io__count_result__value__last__bit ) > (spark__text_io__count_result__value__first__bit ))
 
 axiom spark__text_io__count_result__value__position_axiom :
  ((spark__text_io__count_result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : t99s) (b : t99s) : bool
 
 val constant dummy 
   : t99s

 
 type t99s__ref =
  { mutable t99s__content : t99s }
 
 function t99s__ref_t99s__content__projection 
   (a : t99s__ref) : t99s =
  a.t99s__content
 
 meta "model_projection" function t99s__ref_t99s__content__projection
 
 meta "inline:no" function t99s__ref_t99s__content__projection
 
 val t99s__havoc 
   (x : t99s__ref) : unit
  writes {x}

end

(* Module for defining the constant "to" defined at spark-text_io.ads:514, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__set_line__3__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"spark-text_io.ads" 514 0 0][@model_trace:11538] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at spark-text_io.ads:514, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_line__3__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:538, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__line__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 538 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:538, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__line__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line__3" defined at spark-text_io.ads:538, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__line__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__count_result as Spark__text_io__count_result

 val function line__3 
   (file : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
 
 val predicate line__3__function_guard 
   (temp___result_178 : Spark__text_io__count_result.count_result) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "T100s" defined at spark-text_io.ads:520, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__set_line__3__T100s
 use export Spark__text_io__count_result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 type t100s =
  __rep
 
 predicate in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) =
  (rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.to_rep (Spark__text_io__count_result.rec__spark__text_io__count_result__status a.Spark__text_io__count_result.__split_discrs)))
 val in_range 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : bool
  ensures { result <-> in_range (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) }
 
 val range_check_ 
   (rec__spark__text_io__count_result__status : int) (a : Spark__text_io__count_result.count_result) : Spark__text_io__count_result.count_result
  requires {  (in_range rec__spark__text_io__count_result__status a) }
  ensures {  (result = a) }
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant spark__text_io__count_result__status__first__bit 
   : int

 
 val constant spark__text_io__count_result__status__last__bit 
   : int

 
 val constant spark__text_io__count_result__status__position 
   : int

 
 axiom spark__text_io__count_result__status__first__bit_axiom :
  ((spark__text_io__count_result__status__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__status__last__bit_axiom :
  ((spark__text_io__count_result__status__last__bit ) > (spark__text_io__count_result__status__first__bit ))
 
 axiom spark__text_io__count_result__status__position_axiom :
  ((spark__text_io__count_result__status__position ) >= (0 : int))
 
 val constant spark__text_io__count_result__value__first__bit 
   : int

 
 val constant spark__text_io__count_result__value__last__bit 
   : int

 
 val constant spark__text_io__count_result__value__position 
   : int

 
 axiom spark__text_io__count_result__value__first__bit_axiom :
  ((spark__text_io__count_result__value__first__bit ) >= (0 : int))
 
 axiom spark__text_io__count_result__value__last__bit_axiom :
  ((spark__text_io__count_result__value__last__bit ) > (spark__text_io__count_result__value__first__bit ))
 
 axiom spark__text_io__count_result__value__position_axiom :
  ((spark__text_io__count_result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : t100s) (b : t100s) : bool
 
 val constant dummy 
   : t100s

 
 type t100s__ref =
  { mutable t100s__content : t100s }
 
 function t100s__ref_t100s__content__projection 
   (a : t100s__ref) : t100s =
  a.t100s__content
 
 meta "model_projection" function t100s__ref_t100s__content__projection
 
 meta "inline:no" function t100s__ref_t100s__content__projection
 
 val t100s__havoc 
   (x : t100s__ref) : unit
  writes {x}

end

(* Module for defining the constant "item" defined at spark-text_io.ads:577, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__put__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"spark-text_io.ads" 577 0 0][@name:Item] [@model_trace:11962] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:577, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "item" defined at spark-text_io.ads:589, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"spark-text_io.ads" 589 0 0][@model_trace:12066] [@name:Item] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:589, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "item" defined at spark-text_io.ads:686, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__put__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"spark-text_io.ads" 686 0 0][@name:Item] [@model_projected] [@model_trace:12785] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:686, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "item" defined at spark-text_io.ads:698, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"spark-text_io.ads" 698 0 0][@name:Item] [@model_trace:12889] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:698, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "item" defined at spark-text_io.ads:745, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__put_line__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"spark-text_io.ads" 745 0 0][@model_trace:13199] [@name:Item] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:745, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put_line__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "item" defined at spark-text_io.ads:758, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"spark-text_io.ads" 758 0 0][@name:Item] [@model_projected] [@model_trace:13303] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:758, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module for defining a ref holding the value of variable "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_input [#"spark-text_io.ads" 102 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_output [#"spark-text_io.ads" 103 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_error" defined at spark-text_io.ads:104, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_error
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_error [#"spark-text_io.ads" 104 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_error" defined at spark-text_io.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "the_file" defined at spark-text_io.ads:191, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__create__2__the_file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val the_file [#"spark-text_io.ads" 191 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_file" defined at spark-text_io.ads:191, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__create__2__the_file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "the_file" defined at spark-text_io.ads:211, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__open__2__the_file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val the_file [#"spark-text_io.ads" 211 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "the_file" defined at spark-text_io.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__open__2__the_file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:229, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__close__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 229 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__close__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:235, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__delete__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 235 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__delete__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:241, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__reset__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 241 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__reset__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:252, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__reset__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 252 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:252, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__reset__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:272, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__flush__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 272 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:272, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__flush__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:299, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__set_line_length__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 299 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:299, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_line_length__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:323, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__set_page_length__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 323 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:323, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_page_length__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:361, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__new_line__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 361 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:361, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__new_line__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:386, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__skip_line__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 386 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:386, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__skip_line__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:411, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__new_page__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 411 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:411, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__new_page__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:435, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__skip_page__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 435 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:435, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__skip_page__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:467, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__set_col__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 467 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:467, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_col__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:499, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__set_line__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 499 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:499, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__set_line__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:554, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 554 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:554, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:554, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result

 val item__split_fields [#"spark-text_io.ads" 554 0 0][@name:Item] [@model_projected] [@model_trace:11790]  : Spark__text_io__character_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 554 0 0][@name:Item] [@model_projected] [@model_trace:11790]  : Spark__text_io__character_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 554 0 0][@name:Item] [@model_projected] [@model_trace:11790'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:554, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:562, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result

 val item__split_fields [#"spark-text_io.ads" 562 0 0][@name:Item] [@model_projected] [@model_trace:11859]  : Spark__text_io__character_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 562 0 0][@name:Item] [@model_projected] [@model_trace:11859]  : Spark__text_io__character_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 562 0 0][@name:Item] [@model_projected] [@model_trace:11859'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:562, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:577, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__put__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 577 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:577, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:605, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__look_ahead__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 605 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:605, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__look_ahead__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:606, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__look_ahead__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result

 val item__split_fields [#"spark-text_io.ads" 606 0 0][@name:Item] [@model_trace:12171] [@model_projected]  : Spark__text_io__character_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 606 0 0][@name:Item] [@model_trace:12171] [@model_projected]  : Spark__text_io__character_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 606 0 0][@name:Item] [@model_trace:12171'Constrained] [@model_projected] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:606, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__look_ahead__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at spark-text_io.ads:607, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__look_ahead__end_of_line
 use        "_gnatprove_standard".Main
 use        "int".Int

 val end_of_line [#"spark-text_io.ads" 607 0 0][@name:End_Of_Line] [@model_projected] [@model_trace:12180]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "end_of_line" defined at spark-text_io.ads:607, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__look_ahead__end_of_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:615, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__look_ahead__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result

 val item__split_fields [#"spark-text_io.ads" 615 0 0][@name:Item] [@model_projected] [@model_trace:12243]  : Spark__text_io__character_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 615 0 0][@name:Item] [@model_projected] [@model_trace:12243]  : Spark__text_io__character_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 615 0 0][@name:Item] [@model_projected] [@model_trace:12243'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:615, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__look_ahead__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at spark-text_io.ads:616, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__look_ahead__2__end_of_line
 use        "_gnatprove_standard".Main
 use        "int".Int

 val end_of_line [#"spark-text_io.ads" 616 0 0][@model_trace:12252] [@name:End_Of_Line] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "end_of_line" defined at spark-text_io.ads:616, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__look_ahead__2__end_of_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:623, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 623 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:623, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:624, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result

 val item__split_fields [#"spark-text_io.ads" 624 0 0][@name:Item] [@model_projected] [@model_trace:12316]  : Spark__text_io__character_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 624 0 0][@name:Item] [@model_projected] [@model_trace:12316]  : Spark__text_io__character_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 624 0 0][@name:Item] [@model_projected] [@model_trace:12316'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:624, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:632, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result

 val item__split_fields [#"spark-text_io.ads" 632 0 0][@name:Item] [@model_projected] [@model_trace:12385]  : Spark__text_io__character_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 632 0 0][@name:Item] [@model_projected] [@model_trace:12385]  : Spark__text_io__character_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 632 0 0][@name:Item] [@model_projected] [@model_trace:12385'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:632, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:641, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 641 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:641, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:642, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result

 val item__split_fields [#"spark-text_io.ads" 642 0 0][@name:Item] [@model_trace:12458] [@model_projected]  : Spark__text_io__immediate_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 642 0 0][@name:Item] [@model_trace:12458] [@model_projected]  : Spark__text_io__immediate_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 642 0 0][@name:Item] [@model_projected] [@model_trace:12458'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:642, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "available" defined at spark-text_io.ads:643, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__3__available
 use        "_gnatprove_standard".Main
 use        "int".Int

 val available [#"spark-text_io.ads" 643 0 0][@model_projected] [@name:Available] [@model_trace:12467]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "available" defined at spark-text_io.ads:643, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__3__available___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:651, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result

 val item__split_fields [#"spark-text_io.ads" 651 0 0][@name:Item] [@model_trace:12536] [@model_projected]  : Spark__text_io__immediate_result.__split_fields__ref 
 
 val item__split_discrs [#"spark-text_io.ads" 651 0 0][@name:Item] [@model_trace:12536] [@model_projected]  : Spark__text_io__immediate_result.__split_discrs__ref 
 
 val constant item__attr__constrained [#"spark-text_io.ads" 651 0 0][@name:Item] [@model_projected] [@model_trace:12536'Constrained] 
   : bool

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:651, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "available" defined at spark-text_io.ads:652, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_immediate__4__available
 use        "_gnatprove_standard".Main
 use        "int".Int

 val available [#"spark-text_io.ads" 652 0 0][@model_projected] [@name:Available] [@model_trace:12545]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "available" defined at spark-text_io.ads:652, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_immediate__4__available___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:663, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 663 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:663, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:664, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"spark-text_io.ads" 664 0 0][@name:Item] [@model_trace:12618] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"spark-text_io.ads" 664 0 0][@name:Item] [@model_projected] [@model_trace:12618'First] 
   : Standard__integer.integer

 
 val constant item__last [#"spark-text_io.ads" 664 0 0][@name:Item] [@model_projected] [@model_trace:12618'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:664, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:674, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"spark-text_io.ads" 674 0 0][@name:Item] [@model_projected] [@model_trace:12693]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"spark-text_io.ads" 674 0 0][@name:Item] [@model_projected] [@model_trace:12693'First] 
   : Standard__integer.integer

 
 val constant item__last [#"spark-text_io.ads" 674 0 0][@name:Item] [@model_projected] [@model_trace:12693'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:674, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:686, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__put__3__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 686 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:686, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put__3__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:717, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_line__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 717 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:717, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_line__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:718, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_line__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"spark-text_io.ads" 718 0 0][@name:Item] [@model_trace:12994] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"spark-text_io.ads" 718 0 0][@name:Item] [@model_projected] [@model_trace:12994'First] 
   : Standard__integer.integer

 
 val constant item__last [#"spark-text_io.ads" 718 0 0][@name:Item] [@model_projected] [@model_trace:12994'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:718, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_line__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at spark-text_io.ads:719, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_line__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"spark-text_io.ads" 719 0 0][@model_trace:13003] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at spark-text_io.ads:719, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_line__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at spark-text_io.ads:732, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"spark-text_io.ads" 732 0 0][@name:Item] [@model_projected] [@model_trace:13089]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"spark-text_io.ads" 732 0 0][@name:Item] [@model_projected] [@model_trace:13089'First] 
   : Standard__integer.integer

 
 val constant item__last [#"spark-text_io.ads" 732 0 0][@name:Item] [@model_projected] [@model_trace:13089'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at spark-text_io.ads:732, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at spark-text_io.ads:732, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"spark-text_io.ads" 732 0 0][@model_projected] [@model_trace:13098] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at spark-text_io.ads:732, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "file" defined at spark-text_io.ads:745, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__put_line__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val file [#"spark-text_io.ads" 745 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:745, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__put_line__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "init_standard_input" defined at spark-text_io.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__init_standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init_standard_output" defined at spark-text_io.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__init_standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init_standard_error" defined at spark-text_io.ads:125, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__init_standard_error
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "create__2" defined at spark-text_io.ads:191, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__create__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "open__2" defined at spark-text_io.ads:211, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__open__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "close" defined at spark-text_io.ads:229, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__close
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "delete" defined at spark-text_io.ads:235, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__delete
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "reset__2" defined at spark-text_io.ads:241, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__reset__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "reset__3" defined at spark-text_io.ads:252, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__reset__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "flush" defined at spark-text_io.ads:272, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__flush
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "flush__2" defined at spark-text_io.ads:283, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__flush__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_line_length__2" defined at spark-text_io.ads:299, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_line_length__3" defined at spark-text_io.ads:310, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_line_length__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_page_length__2" defined at spark-text_io.ads:323, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_page_length__3" defined at spark-text_io.ads:333, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_page_length__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__3" defined at spark-text_io.ads:349, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__line_length__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function line_length__3 
   (spark__text_io__standard_output : Spark__text_io__file_type.file_type) : int
 
 val predicate line_length__3__function_guard 
   (temp___result_168 : int) (spark__text_io__standard_output : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "page_length__3" defined at spark-text_io.ads:356, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__page_length__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function page_length__3 
   (spark__text_io__standard_output : Spark__text_io__file_type.file_type) : int
 
 val predicate page_length__3__function_guard 
   (temp___result_169 : int) (spark__text_io__standard_output : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "new_line__2" defined at spark-text_io.ads:361, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__new_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "new_line__3" defined at spark-text_io.ads:372, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__new_line__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "skip_line__2" defined at spark-text_io.ads:386, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__skip_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "end_of_file__2" defined at spark-text_io.ads:463, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__end_of_file__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function end_of_file__2 
   (spark__text_io__standard_input : Spark__text_io__file_type.file_type) : bool
 
 val predicate end_of_file__2__function_guard 
   (temp___result_171 : bool) (spark__text_io__standard_input : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "skip_line__3" defined at spark-text_io.ads:395, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__skip_line__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "end_of_line__2" defined at spark-text_io.ads:408, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__end_of_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function end_of_line__2 
   (spark__text_io__standard_input : Spark__text_io__file_type.file_type) : bool
 
 val predicate end_of_line__2__function_guard 
   (temp___result_173 : bool) (spark__text_io__standard_input : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "new_page" defined at spark-text_io.ads:411, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__new_page
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "new_page__2" defined at spark-text_io.ads:421, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__new_page__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "skip_page" defined at spark-text_io.ads:435, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__skip_page
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "skip_page__2" defined at spark-text_io.ads:443, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__skip_page__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "end_of_page__2" defined at spark-text_io.ads:456, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__end_of_page__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function end_of_page__2 
   (spark__text_io__standard_input : Spark__text_io__file_type.file_type) : bool
 
 val predicate end_of_page__2__function_guard 
   (temp___result_175 : bool) (spark__text_io__standard_input : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "set_col__2" defined at spark-text_io.ads:467, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_col__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_col__3" defined at spark-text_io.ads:482, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_col__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_line__2" defined at spark-text_io.ads:499, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "set_line__3" defined at spark-text_io.ads:514, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__set_line__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "col__4" defined at spark-text_io.ads:535, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__col__4
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__count_result as Spark__text_io__count_result

 val function col__4 
   (spark__text_io__standard_output : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
 
 val predicate col__4__function_guard 
   (temp___result_179 : Spark__text_io__count_result.count_result) (spark__text_io__standard_output : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "line__4" defined at spark-text_io.ads:542, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__line__4
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__count_result as Spark__text_io__count_result

 val function line__4 
   (spark__text_io__standard_output : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
 
 val predicate line__4__function_guard 
   (temp___result_180 : Spark__text_io__count_result.count_result) (spark__text_io__standard_output : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "page__4" defined at spark-text_io.ads:549, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__page__4
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__count_result as Spark__text_io__count_result

 val function page__4 
   (spark__text_io__standard_output : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
 
 val predicate page__4__function_guard 
   (temp___result_181 : Spark__text_io__count_result.count_result) (spark__text_io__standard_output : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "get" defined at spark-text_io.ads:554, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get__2" defined at spark-text_io.ads:562, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at spark-text_io.ads:577, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__2" defined at spark-text_io.ads:589, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "look_ahead" defined at spark-text_io.ads:605, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__look_ahead
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "look_ahead__2" defined at spark-text_io.ads:615, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__look_ahead__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_immediate" defined at spark-text_io.ads:623, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get_immediate
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_immediate__2" defined at spark-text_io.ads:632, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get_immediate__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_immediate__3" defined at spark-text_io.ads:641, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get_immediate__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_immediate__4" defined at spark-text_io.ads:651, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get_immediate__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get__3" defined at spark-text_io.ads:663, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get__4" defined at spark-text_io.ads:674, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__3" defined at spark-text_io.ads:686, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__put__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at spark-text_io.ads:698, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at spark-text_io.ads:717, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at spark-text_io.ads:732, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line" defined at spark-text_io.ads:745, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__put_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at spark-text_io.ads:758, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io_file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io_file_type as Spark__text_io_file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_186 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_187 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_188 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_187 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_188 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_187 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_188 : bool) }

end

(* Module giving axioms for type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : Spark__text_io__file_type.file_type) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_193 : Spark__text_io__file_type.file_type) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : Spark__text_io__file_type.file_type) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : Spark__text_io__file_type.file_type) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : Spark__text_io__file_type.file_type) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : Spark__text_io__file_type.file_type) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__file_status as Spark__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) =
  (if (( temp___is_init_196 \/ (Spark__file_status.first <= Spark__file_status.last) )) then (
   (Spark__file_status.dynamic_property Spark__file_status.first Spark__file_status.last temp___expr_200)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_201 : int) (temp___skip_top_level_202 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_201 : int) (temp___skip_top_level_202 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_201 : int) (temp___skip_top_level_202 : bool) }

end

(* Module giving axioms for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_statusB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB

 predicate dynamic_invariant [@inline] 
   (temp___expr_207 : int) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool) =
  (if (( temp___is_init_203 \/ (Spark__text_io__file_statusB.first <= Spark__text_io__file_statusB.last) )) then (
   (Spark__text_io__file_statusB.dynamic_property Spark__text_io__file_statusB.first Spark__text_io__file_statusB.last temp___expr_207)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_207 : int) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_207 : int) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_208 : int) (temp___skip_top_level_209 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_208 : int) (temp___skip_top_level_209 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_208 : int) (temp___skip_top_level_209 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_status as Spark__text_io__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_214 : int) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool) =
  (if (( temp___is_init_210 \/ (Spark__text_io__file_status.first <= Spark__text_io__file_status.last) )) then (
   (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last temp___expr_214)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_214 : int) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_214 : int) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_215 : int) (temp___skip_top_level_216 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_215 : int) (temp___skip_top_level_216 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_215 : int) (temp___skip_top_level_216 : bool) }

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__file_mode as Ada__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_221 : int) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) =
  (if (( temp___is_init_217 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_221)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_221 : int) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_221 : int) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_222 : int) (temp___skip_top_level_223 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_222 : int) (temp___skip_top_level_223 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_222 : int) (temp___skip_top_level_223 : bool) }

end

(* Module giving axioms for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_modeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB

 predicate dynamic_invariant [@inline] 
   (temp___expr_228 : int) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) =
  (if (( temp___is_init_224 \/ (Spark__text_io__file_modeB.first <= Spark__text_io__file_modeB.last) )) then (
   (Spark__text_io__file_modeB.dynamic_property Spark__text_io__file_modeB.first Spark__text_io__file_modeB.last temp___expr_228)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_228 : int) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_228 : int) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_229 : int) (temp___skip_top_level_230 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_229 : int) (temp___skip_top_level_230 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_229 : int) (temp___skip_top_level_230 : bool) }

end

(* Module giving axioms for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_mode as Spark__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_235 : int) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool) (temp___do_typ_inv_234 : bool) =
  (if (( temp___is_init_231 \/ (Spark__text_io__file_mode.first <= Spark__text_io__file_mode.last) )) then (
   (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last temp___expr_235)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_235 : int) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool) (temp___do_typ_inv_234 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_235 : int) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool) (temp___do_typ_inv_234 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_236 : int) (temp___skip_top_level_237 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_236 : int) (temp___skip_top_level_237 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_236 : int) (temp___skip_top_level_237 : bool) }

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at spark-text_io.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at spark-text_io.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__count as Spark__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_242 : int) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool) =
  (if (( temp___is_init_238 \/ (Spark__text_io__count.first <= Spark__text_io__count.last) )) then (
   (Spark__text_io__count.dynamic_property Spark__text_io__count.first Spark__text_io__count.last temp___expr_242)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_242 : int) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_242 : int) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_243 : int) (temp___skip_top_level_244 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_243 : int) (temp___skip_top_level_244 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_243 : int) (temp___skip_top_level_244 : bool) }

end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) =
  (if (( temp___is_init_245 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_249)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_249 : int) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_250 : int) (temp___skip_top_level_251 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_250 : int) (temp___skip_top_level_251 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_250 : int) (temp___skip_top_level_251 : bool) }

end

(* Module giving axioms for type "positive_count" defined at spark-text_io.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__positive_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__positive_count as Spark__text_io__positive_count

 predicate dynamic_invariant [@inline] 
   (temp___expr_256 : int) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool) =
  (if (( temp___is_init_252 \/ (Spark__text_io__positive_count.first <= Spark__text_io__positive_count.last) )) then (
   (Spark__text_io__positive_count.dynamic_property Spark__text_io__positive_count.first Spark__text_io__positive_count.last temp___expr_256)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_256 : int) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_256 : int) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_257 : int) (temp___skip_top_level_258 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_257 : int) (temp___skip_top_level_258 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_257 : int) (temp___skip_top_level_258 : bool) }

end

(* Module giving axioms for type "field" defined at spark-text_io.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__field___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__field as Spark__text_io__field

 predicate dynamic_invariant [@inline] 
   (temp___expr_263 : int) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool) =
  (if (( temp___is_init_259 \/ (Spark__text_io__field.first <= Spark__text_io__field.last) )) then (
   (Spark__text_io__field.dynamic_property Spark__text_io__field.first Spark__text_io__field.last temp___expr_263)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_263 : int) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_263 : int) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_264 : int) (temp___skip_top_level_265 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_264 : int) (temp___skip_top_level_265 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_264 : int) (temp___skip_top_level_265 : bool) }

end

(* Module giving axioms for type "number_base" defined at spark-text_io.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__number_base___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__number_base as Spark__text_io__number_base

 predicate dynamic_invariant [@inline] 
   (temp___expr_270 : int) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool) =
  (if (( temp___is_init_266 \/ (Spark__text_io__number_base.first <= Spark__text_io__number_base.last) )) then (
   (Spark__text_io__number_base.dynamic_property Spark__text_io__number_base.first Spark__text_io__number_base.last temp___expr_270)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_270 : int) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_270 : int) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_271 : int) (temp___skip_top_level_272 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_271 : int) (temp___skip_top_level_272 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_271 : int) (temp___skip_top_level_272 : bool) }

end

(* Module giving axioms for type "type_set" defined at a-textio.ads:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__type_set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__type_set as Ada__text_io__type_set

 predicate dynamic_invariant [@inline] 
   (temp___expr_277 : int) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) =
  (if (( temp___is_init_273 \/ (Ada__text_io__type_set.first <= Ada__text_io__type_set.last) )) then (
   (Ada__text_io__type_set.dynamic_property Ada__text_io__type_set.first Ada__text_io__type_set.last temp___expr_277)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_277 : int) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_277 : int) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_278 : int) (temp___skip_top_level_279 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_278 : int) (temp___skip_top_level_279 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_278 : int) (temp___skip_top_level_279 : bool) }

end

(* Module giving axioms for type "type_setB" defined at spark-text_io.ads:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__type_setB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__type_setB as Spark__text_io__type_setB

 predicate dynamic_invariant [@inline] 
   (temp___expr_284 : int) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool) =
  (if (( temp___is_init_280 \/ (Spark__text_io__type_setB.first <= Spark__text_io__type_setB.last) )) then (
   (Spark__text_io__type_setB.dynamic_property Spark__text_io__type_setB.first Spark__text_io__type_setB.last temp___expr_284)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_284 : int) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_284 : int) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_285 : int) (temp___skip_top_level_286 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_285 : int) (temp___skip_top_level_286 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_285 : int) (temp___skip_top_level_286 : bool) }

end

(* Module giving axioms for type "type_set" defined at spark-text_io.ads:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__type_set___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__type_set as Spark__text_io__type_set

 predicate dynamic_invariant [@inline] 
   (temp___expr_291 : int) (temp___is_init_287 : bool) (temp___skip_constant_288 : bool) (temp___do_toplevel_289 : bool) (temp___do_typ_inv_290 : bool) =
  (if (( temp___is_init_287 \/ (Spark__text_io__type_set.first <= Spark__text_io__type_set.last) )) then (
   (Spark__text_io__type_set.dynamic_property Spark__text_io__type_set.first Spark__text_io__type_set.last temp___expr_291)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_291 : int) (temp___is_init_287 : bool) (temp___skip_constant_288 : bool) (temp___do_toplevel_289 : bool) (temp___do_typ_inv_290 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_291 : int) (temp___is_init_287 : bool) (temp___skip_constant_288 : bool) (temp___do_toplevel_289 : bool) (temp___do_typ_inv_290 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_292 : int) (temp___skip_top_level_293 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_292 : int) (temp___skip_top_level_293 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_292 : int) (temp___skip_top_level_293 : bool) }

end

(* Module giving axioms for type "count_result" defined at spark-text_io.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__count_result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 predicate dynamic_invariant [@inline] 
   (temp___expr_298 : Spark__text_io__count_result.count_result) (temp___is_init_294 : bool) (temp___skip_constant_295 : bool) (temp___do_toplevel_296 : bool) (temp___do_typ_inv_297 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_298 : Spark__text_io__count_result.count_result) (temp___is_init_294 : bool) (temp___skip_constant_295 : bool) (temp___do_toplevel_296 : bool) (temp___do_typ_inv_297 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_298 : Spark__text_io__count_result.count_result) (temp___is_init_294 : bool) (temp___skip_constant_295 : bool) (temp___do_toplevel_296 : bool) (temp___do_typ_inv_297 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_300 : Spark__text_io__count_result.count_result) (temp___skip_top_level_301 : bool) =
  ( ((Spark__text_io__count_result.attr__constrained temp___expr_300) = False) /\ (let temp___302 [@mlw:proxy_symbol] [@introduced] = temp___expr_300.Spark__text_io__count_result.__split_discrs.Spark__text_io__count_result.rec__spark__text_io__count_result__status in (
   ((Spark__text_io__file_status__rep.to_rep temp___expr_300.Spark__text_io__count_result.__split_discrs.Spark__text_io__count_result.rec__spark__text_io__count_result__status) = (3 : int))))
   )
 val default_initial_assumption [@inline] 
   (temp___expr_300 : Spark__text_io__count_result.count_result) (temp___skip_top_level_301 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_300 : Spark__text_io__count_result.count_result) (temp___skip_top_level_301 : bool) }

end

(* Module giving axioms for type "character_result" defined at spark-text_io.ads:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__character_result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 predicate dynamic_invariant [@inline] 
   (temp___expr_308 : Spark__text_io__character_result.character_result) (temp___is_init_304 : bool) (temp___skip_constant_305 : bool) (temp___do_toplevel_306 : bool) (temp___do_typ_inv_307 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_308 : Spark__text_io__character_result.character_result) (temp___is_init_304 : bool) (temp___skip_constant_305 : bool) (temp___do_toplevel_306 : bool) (temp___do_typ_inv_307 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_308 : Spark__text_io__character_result.character_result) (temp___is_init_304 : bool) (temp___skip_constant_305 : bool) (temp___do_toplevel_306 : bool) (temp___do_typ_inv_307 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_310 : Spark__text_io__character_result.character_result) (temp___skip_top_level_311 : bool) =
  ( ((Spark__text_io__character_result.attr__constrained temp___expr_310) = False) /\ (let temp___312 [@mlw:proxy_symbol] [@introduced] = temp___expr_310.Spark__text_io__character_result.__split_discrs.Spark__text_io__character_result.rec__spark__text_io__character_result__status in (
   ((Spark__text_io__file_status__rep.to_rep temp___expr_310.Spark__text_io__character_result.__split_discrs.Spark__text_io__character_result.rec__spark__text_io__character_result__status) = (3 : int))))
   )
 val default_initial_assumption [@inline] 
   (temp___expr_310 : Spark__text_io__character_result.character_result) (temp___skip_top_level_311 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_310 : Spark__text_io__character_result.character_result) (temp___skip_top_level_311 : bool) }

end

(* Module giving axioms for type "immediate_result" defined at spark-text_io.ads:83, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__immediate_result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep

 predicate dynamic_invariant [@inline] 
   (temp___expr_318 : Spark__text_io__immediate_result.immediate_result) (temp___is_init_314 : bool) (temp___skip_constant_315 : bool) (temp___do_toplevel_316 : bool) (temp___do_typ_inv_317 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_318 : Spark__text_io__immediate_result.immediate_result) (temp___is_init_314 : bool) (temp___skip_constant_315 : bool) (temp___do_toplevel_316 : bool) (temp___do_typ_inv_317 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_318 : Spark__text_io__immediate_result.immediate_result) (temp___is_init_314 : bool) (temp___skip_constant_315 : bool) (temp___do_toplevel_316 : bool) (temp___do_typ_inv_317 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_321 : Spark__text_io__immediate_result.immediate_result) (temp___skip_top_level_322 : bool) =
  ( ((Spark__text_io__immediate_result.attr__constrained temp___expr_321) = False) /\ (let temp___324 [@mlw:proxy_symbol] [@introduced] = temp___expr_321.Spark__text_io__immediate_result.__split_discrs.Spark__text_io__immediate_result.rec__spark__text_io__immediate_result__available in (
  (let temp___323 [@mlw:proxy_symbol] [@introduced] = temp___expr_321.Spark__text_io__immediate_result.__split_discrs.Spark__text_io__immediate_result.rec__spark__text_io__immediate_result__status in (
   ( ((Spark__text_io__file_status__rep.to_rep temp___expr_321.Spark__text_io__immediate_result.__split_discrs.Spark__text_io__immediate_result.rec__spark__text_io__immediate_result__status) = (3 : int)) /\ (temp___expr_321.Spark__text_io__immediate_result.__split_discrs.Spark__text_io__immediate_result.rec__spark__text_io__immediate_result__available = (Boolean.of_int (0 : int))) )))
  ))
   )
 val default_initial_assumption [@inline] 
   (temp___expr_321 : Spark__text_io__immediate_result.immediate_result) (temp___skip_top_level_322 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_321 : Spark__text_io__immediate_result.immediate_result) (temp___skip_top_level_322 : bool) }

end

(* Module giving axioms for type "T97s" defined at spark-text_io.ads:473, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__set_col__2__T97s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T98s" defined at spark-text_io.ads:488, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__set_col__3__T98s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T99s" defined at spark-text_io.ads:506, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__set_line__2__T99s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T100s" defined at spark-text_io.ads:520, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__set_line__3__T100s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_open___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open

 val is_open 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__mode__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom

 val mode__2 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  ( [@GP_Pretty_Ada:29650] ((epsilon temp___result_326 : bool.
   ( (temp___result_326 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_326 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard result file) )/\(Spark__text_io__file_mode___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mode__2__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__mode__2.mode__2 file)].
   (let result = (Spark__text_io__mode__2.mode__2 file) in (
    (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last result)))
  )

end

(* Module giving a program function and a defining axiom for the expression function "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_readable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_readable as Spark__text_io__is_readable

 val is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_327 : bool.
   ( (temp___result_327 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_327 file) )) = True) /\ ((epsilon temp___result_328 : int.
   ( (temp___result_328 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_328 file) )) = (0 : int)) ) ) ) }
 
 axiom is_readable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_readable.is_readable file)].
   ( (let result = (Spark__text_io__is_readable.is_readable file) in (
    (Spark__text_io__is_readable.is_readable__function_guard result file)))
    -> ( ((Spark__text_io__is_readable.is_readable file) = True) <-> ( ((epsilon temp___result_329 : bool.
    ( (temp___result_329 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_329 file) )) = True) /\ ((epsilon temp___result_330 : int.
    ( (temp___result_330 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_330 file) )) = (0 : int)) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom

 val status 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__status.status file)) /\ (Spark__text_io__status.status__function_guard result file) )/\(Spark__text_io__file_status___axiom.dynamic_invariant result True False True True) ) }
 
 axiom status__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__status.status file)].
   (let result = (Spark__text_io__status.status file) in (
    (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "init_standard_input" defined at spark-text_io.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__init_standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val init_standard_input 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:8855] ((epsilon temp___result_331 : bool.
   ( (temp___result_331 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_331 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:8861] ((epsilon temp___result_332 : int.
   ( (temp___result_332 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_332 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_input.standard_input}

end

(* Module giving a program function and a defining axiom for the expression function "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_writable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable

 val is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_writable.is_writable file)) /\ (Spark__text_io__is_writable.is_writable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_333 : bool.
   ( (temp___result_333 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_333 file) )) = True) /\ ( ((epsilon temp___result_334 : int.
   ( (temp___result_334 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_334 file) )) = (1 : int)) \/ ((epsilon temp___result_335 : int.
   ( (temp___result_335 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_335 file) )) = (2 : int)) ) ) ) ) }
 
 axiom is_writable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_writable.is_writable file)].
   ( (let result = (Spark__text_io__is_writable.is_writable file) in (
    (Spark__text_io__is_writable.is_writable__function_guard result file)))
    -> ( ((Spark__text_io__is_writable.is_writable file) = True) <-> ( ((epsilon temp___result_336 : bool.
    ( (temp___result_336 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_336 file) )) = True) /\ ( ((epsilon temp___result_337 : int.
    ( (temp___result_337 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_337 file) )) = (1 : int)) \/ ((epsilon temp___result_338 : int.
    ( (temp___result_338 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_338 file) )) = (2 : int)) ) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "init_standard_output" defined at spark-text_io.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__init_standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val init_standard_output 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:8889] ((epsilon temp___result_339 : bool.
   ( (temp___result_339 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_339 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:8895] ((epsilon temp___result_340 : int.
   ( (temp___result_340 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_340 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "init_standard_error" defined at spark-text_io.ads:125, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__init_standard_error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_error as Spark__text_io__standard_error
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val init_standard_error 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:8923] ((epsilon temp___result_341 : bool.
   ( (temp___result_341 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_341 Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:8929] ((epsilon temp___result_342 : int.
   ( (temp___result_342 = (Spark__text_io__status.status Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_342 Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_error.standard_error}

end

(* Module for declaring a program function (and possibly an axiom) for "is_standard_input" defined at spark-text_io.ads:139, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input

 val is_standard_input 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_standard_input.is_standard_input file)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "is_standard_output" defined at spark-text_io.ads:143, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output

 val is_standard_output 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_standard_output.is_standard_output file)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "is_standard_error" defined at spark-text_io.ads:147, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_standard_error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_standard_error as Spark__text_io__is_standard_error

 val is_standard_error 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_standard_error.is_standard_error file)) /\ (Spark__text_io__is_standard_error.is_standard_error__function_guard result file) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "is_standard_writable" defined at spark-text_io.ads:151, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_standard_writable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__is_standard_error as Spark__text_io__is_standard_error
 use        Spark__text_io__is_standard_writable as Spark__text_io__is_standard_writable

 val is_standard_writable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_standard_writable.is_standard_writable file)) /\ (Spark__text_io__is_standard_writable.is_standard_writable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_343 : bool.
   ( (temp___result_343 = (Spark__text_io__is_standard_output.is_standard_output file)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_343 file) )) = True) \/ ((epsilon temp___result_344 : bool.
   ( (temp___result_344 = (Spark__text_io__is_standard_error.is_standard_error file)) /\ (Spark__text_io__is_standard_error.is_standard_error__function_guard temp___result_344 file) )) = True) ) ) ) }
 
 axiom is_standard_writable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_standard_writable.is_standard_writable file)].
   ( (let result = (Spark__text_io__is_standard_writable.is_standard_writable file) in (
    (Spark__text_io__is_standard_writable.is_standard_writable__function_guard result file)))
    -> ( ((Spark__text_io__is_standard_writable.is_standard_writable file) = True) <-> ( ((epsilon temp___result_345 : bool.
    ( (temp___result_345 = (Spark__text_io__is_standard_output.is_standard_output file)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_345 file) )) = True) \/ ((epsilon temp___result_346 : bool.
    ( (temp___result_346 = (Spark__text_io__is_standard_error.is_standard_error file)) /\ (Spark__text_io__is_standard_error.is_standard_error__function_guard temp___result_346 file) )) = True) ) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "is_standard_file" defined at spark-text_io.ads:156, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_standard_file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__is_standard_error as Spark__text_io__is_standard_error
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file

 val is_standard_file 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_standard_file.is_standard_file file)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard result file) )/\( (result = True) <-> ( ( ((epsilon temp___result_347 : bool.
   ( (temp___result_347 = (Spark__text_io__is_standard_input.is_standard_input file)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_347 file) )) = True) \/ ((epsilon temp___result_348 : bool.
   ( (temp___result_348 = (Spark__text_io__is_standard_output.is_standard_output file)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_348 file) )) = True) ) \/ ((epsilon temp___result_349 : bool.
   ( (temp___result_349 = (Spark__text_io__is_standard_error.is_standard_error file)) /\ (Spark__text_io__is_standard_error.is_standard_error__function_guard temp___result_349 file) )) = True) ) ) ) }
 
 axiom is_standard_file__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_standard_file.is_standard_file file)].
   ( (let result = (Spark__text_io__is_standard_file.is_standard_file file) in (
    (Spark__text_io__is_standard_file.is_standard_file__function_guard result file)))
    -> ( ((Spark__text_io__is_standard_file.is_standard_file file) = True) <-> ( ( ((epsilon temp___result_350 : bool.
    ( (temp___result_350 = (Spark__text_io__is_standard_input.is_standard_input file)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_350 file) )) = True) \/ ((epsilon temp___result_351 : bool.
    ( (temp___result_351 = (Spark__text_io__is_standard_output.is_standard_output file)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_351 file) )) = True) ) \/ ((epsilon temp___result_352 : bool.
    ( (temp___result_352 = (Spark__text_io__is_standard_error.is_standard_error file)) /\ (Spark__text_io__is_standard_error.is_standard_error__function_guard temp___result_352 file) )) = True) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "name" defined at spark-text_io.ads:172, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__name___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__name as Spark__text_io__name

 val name 
   (file : Spark__text_io__file_type.file_type) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:29674] ((epsilon temp___result_353 : bool.
   ( (temp___result_353 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_353 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__name.name file)) /\ (Spark__text_io__name.name__function_guard result file) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "form" defined at spark-text_io.ads:176, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__form___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__form as Spark__text_io__form

 val form 
   (file : Spark__text_io__file_type.file_type) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:29698] ((epsilon temp___result_355 : bool.
   ( (temp___result_355 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_355 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__form.form file)) /\ (Spark__text_io__form.form__function_guard result file) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at spark-text_io.ads:345, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom

 val line_length__2 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  ( [@GP_Pretty_Ada:30744] ((epsilon temp___result_357 : bool.
   ( (temp___result_357 = (Spark__text_io__is_writable.is_writable file)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_357 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__line_length__2.line_length__2 file)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard result file) )/\(Spark__text_io__count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom line_length__2__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__line_length__2.line_length__2 file)].
   (let result = (Spark__text_io__line_length__2.line_length__2 file) in (
    (Spark__text_io__count.dynamic_property Spark__text_io__count.first Spark__text_io__count.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at spark-text_io.ads:352, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom

 val page_length__2 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  ( [@GP_Pretty_Ada:30777] ((epsilon temp___result_358 : bool.
   ( (temp___result_358 = (Spark__text_io__is_writable.is_writable file)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_358 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__page_length__2.page_length__2 file)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard result file) )/\(Spark__text_io__count___axiom.dynamic_invariant result True False True True) ) }
 
 axiom page_length__2__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__page_length__2.page_length__2 file)].
   (let result = (Spark__text_io__page_length__2.page_length__2 file) in (
    (Spark__text_io__count.dynamic_property Spark__text_io__count.first Spark__text_io__count.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "create__2" defined at spark-text_io.ads:191, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__create__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val create__2 
   (the_file : Spark__text_io__file_type.file_type__ref) (the_mode : int) (the_name : Standard__string.string) (the_form : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:29790] not ( ((epsilon temp___result_359 : bool.
   ( (temp___result_359 = (Spark__text_io__is_open.is_open the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_359 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) }
  ensures {  ( (if (((epsilon temp___result_374 : int.
   ( (temp___result_374 = (Spark__text_io__status.status the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_374 the_file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( ( ( ( ( ( ( [@GP_Pretty_Ada:9351] ((epsilon temp___result_360 : int.
    ( (temp___result_360 = (Spark__text_io__mode__2.mode__2 the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_360 the_file.Spark__text_io__file_type.file_type__content) )) = the_mode) ) /\ ( [@GP_Pretty_Ada:9357] ((let temp___364 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_361 : Standard__string.string.
    ( (temp___result_361 = (Spark__text_io__name.name the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_361 the_file.Spark__text_io__file_type.file_type__content) )) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___364) (Standard__string.first temp___364) (Standard__string.last temp___364) (Standard__string.to_array the_name) (Standard__string.first the_name) (Standard__string.last the_name))))
    = True) ) ) /\ ( [@GP_Pretty_Ada:9363] ((let temp___368 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_365 : Standard__string.string.
    ( (temp___result_365 = (Spark__text_io__form.form the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_365 the_file.Spark__text_io__file_type.file_type__content) )) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___368) (Standard__string.first temp___368) (Standard__string.last temp___368) (Standard__string.to_array the_form) (Standard__string.first the_form) (Standard__string.last the_form))))
    = True) ) ) /\ ( [@GP_Pretty_Ada:9367] ((epsilon temp___result_369 : bool.
    ( (temp___result_369 = (Spark__text_io__is_open.is_open the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_369 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:9373] ((epsilon temp___result_370 : int.
    ( (temp___result_370 = (Spark__text_io__line_length__2.line_length__2 the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_370 the_file.Spark__text_io__file_type.file_type__content) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:9379] ((epsilon temp___result_371 : int.
    ( (temp___result_371 = (Spark__text_io__page_length__2.page_length__2 the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_371 the_file.Spark__text_io__file_type.file_type__content) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:9381] not ( ((epsilon temp___result_372 : bool.
    ( (temp___result_372 = (Spark__text_io__is_standard_file.is_standard_file the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_372 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) )) else (
   ( [@GP_Pretty_Ada:9385] not ( ((epsilon temp___result_373 : bool.
    ( (temp___result_373 = (Spark__text_io__is_open.is_open the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_373 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ))) /\ (Spark__text_io__file_type___axiom.dynamic_invariant the_file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {the_file}

end

(* Module for declaring a program function (and possibly an axiom) for "open__2" defined at spark-text_io.ads:211, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__open__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val open__2 
   (the_file : Spark__text_io__file_type.file_type__ref) (the_mode : int) (the_name : Standard__string.string) (the_form : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:29877] not ( ((epsilon temp___result_377 : bool.
   ( (temp___result_377 = (Spark__text_io__is_open.is_open the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_377 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) }
  ensures {  ( (if (((epsilon temp___result_392 : int.
   ( (temp___result_392 = (Spark__text_io__status.status the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_392 the_file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( ( ( ( ( ( ( [@GP_Pretty_Ada:9458] ((epsilon temp___result_378 : int.
    ( (temp___result_378 = (Spark__text_io__mode__2.mode__2 the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_378 the_file.Spark__text_io__file_type.file_type__content) )) = the_mode) ) /\ ( [@GP_Pretty_Ada:9464] ((let temp___382 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_379 : Standard__string.string.
    ( (temp___result_379 = (Spark__text_io__name.name the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_379 the_file.Spark__text_io__file_type.file_type__content) )) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___382) (Standard__string.first temp___382) (Standard__string.last temp___382) (Standard__string.to_array the_name) (Standard__string.first the_name) (Standard__string.last the_name))))
    = True) ) ) /\ ( [@GP_Pretty_Ada:9470] ((let temp___386 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_383 : Standard__string.string.
    ( (temp___result_383 = (Spark__text_io__form.form the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_383 the_file.Spark__text_io__file_type.file_type__content) )) in (
    (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___386) (Standard__string.first temp___386) (Standard__string.last temp___386) (Standard__string.to_array the_form) (Standard__string.first the_form) (Standard__string.last the_form))))
    = True) ) ) /\ ( [@GP_Pretty_Ada:9474] ((epsilon temp___result_387 : bool.
    ( (temp___result_387 = (Spark__text_io__is_open.is_open the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_387 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:9480] ((epsilon temp___result_388 : int.
    ( (temp___result_388 = (Spark__text_io__line_length__2.line_length__2 the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_388 the_file.Spark__text_io__file_type.file_type__content) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:9486] ((epsilon temp___result_389 : int.
    ( (temp___result_389 = (Spark__text_io__page_length__2.page_length__2 the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_389 the_file.Spark__text_io__file_type.file_type__content) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:9488] not ( ((epsilon temp___result_390 : bool.
    ( (temp___result_390 = (Spark__text_io__is_standard_file.is_standard_file the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_390 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) )) else (
   ( [@GP_Pretty_Ada:9492] not ( ((epsilon temp___result_391 : bool.
    ( (temp___result_391 = (Spark__text_io__is_open.is_open the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_391 the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ))) /\ (Spark__text_io__file_type___axiom.dynamic_invariant the_file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {the_file}

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at spark-text_io.ads:229, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__close___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val close 
   (file : Spark__text_io__file_type.file_type__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:9524] ((epsilon temp___result_395 : bool.
   ( (temp___result_395 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_395 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9526] not ( ((epsilon temp___result_396 : bool.
   ( (temp___result_396 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_396 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( (if (((epsilon temp___result_398 : int.
   ( (temp___result_398 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_398 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:9538] not ( ((epsilon temp___result_397 : bool.
    ( (temp___result_397 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_397 file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33766] true ))) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "delete" defined at spark-text_io.ads:235, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__delete___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val delete 
   (file : Spark__text_io__file_type.file_type__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:9570] ((epsilon temp___result_399 : bool.
   ( (temp___result_399 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_399 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9572] not ( ((epsilon temp___result_400 : bool.
   ( (temp___result_400 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_400 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( (if (((epsilon temp___result_402 : int.
   ( (temp___result_402 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_402 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:9584] not ( ((epsilon temp___result_401 : bool.
    ( (temp___result_401 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_401 file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33769] true ))) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at spark-text_io.ads:241, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__reset__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val reset__2 
   (file : Spark__text_io__file_type.file_type__ref) (the_mode : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:9625] ((epsilon temp___result_403 : bool.
   ( (temp___result_403 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_403 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9627] not ( ((epsilon temp___result_404 : bool.
   ( (temp___result_404 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_404 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( (if (((epsilon temp___result_407 : int.
   ( (temp___result_407 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_407 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( ( [@GP_Pretty_Ada:9643] ((epsilon temp___result_405 : int.
    ( (temp___result_405 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_405 file.Spark__text_io__file_type.file_type__content) )) = the_mode) ) /\ ( [@GP_Pretty_Ada:9647] ((epsilon temp___result_406 : bool.
    ( (temp___result_406 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_406 file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33772] true ))) /\ ( [@GP_Pretty_Ada:9654] ((let temp___413 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_409 : Standard__string.string.
   ( (temp___result_409 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_409 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___412 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_408 : Standard__string.string.
   ( (temp___result_408 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_408 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___412) (Standard__string.first temp___412) (Standard__string.last temp___412) (Standard__string.to_array temp___413) (Standard__string.first temp___413) (Standard__string.last temp___413))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9664] ((let temp___419 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_415 : Standard__string.string.
   ( (temp___result_415 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_415 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___418 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_414 : Standard__string.string.
   ( (temp___result_414 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_414 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___418) (Standard__string.first temp___418) (Standard__string.last temp___418) (Standard__string.to_array temp___419) (Standard__string.first temp___419) (Standard__string.last temp___419))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9670] not ( ((epsilon temp___result_420 : bool.
   ( (temp___result_420 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_420 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__3" defined at spark-text_io.ads:252, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__reset__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val reset__3 
   (file : Spark__text_io__file_type.file_type__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:9701] ((epsilon temp___result_421 : bool.
   ( (temp___result_421 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_421 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9703] not ( ((epsilon temp___result_422 : bool.
   ( (temp___result_422 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_422 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( ( [@GP_Pretty_Ada:9712] ((epsilon temp___result_423 : bool.
   ( (temp___result_423 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_423 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9718] ((epsilon temp___result_424 : int.
   ( (temp___result_424 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_424 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_425 : int.
   ( (temp___result_425 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_425 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9728] ((let temp___431 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_427 : Standard__string.string.
   ( (temp___result_427 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_427 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___430 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_426 : Standard__string.string.
   ( (temp___result_426 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_426 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___430) (Standard__string.first temp___430) (Standard__string.last temp___430) (Standard__string.to_array temp___431) (Standard__string.first temp___431) (Standard__string.last temp___431))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9738] ((let temp___437 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_433 : Standard__string.string.
   ( (temp___result_433 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_433 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___436 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_432 : Standard__string.string.
   ( (temp___result_432 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_432 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___436) (Standard__string.first temp___436) (Standard__string.last temp___436) (Standard__string.to_array temp___437) (Standard__string.first temp___437) (Standard__string.last temp___437))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9744] not ( ((epsilon temp___result_438 : bool.
   ( (temp___result_438 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_438 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "flush" defined at spark-text_io.ads:272, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__flush___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val flush 
   (file : Spark__text_io__file_type.file_type__ref) : unit
  requires {  ( [@GP_Pretty_Ada:30228] ((epsilon temp___result_439 : bool.
   ( (temp___result_439 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_439 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:9780] ((epsilon temp___result_440 : bool.
   ( (temp___result_440 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_440 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9786] ((epsilon temp___result_441 : int.
   ( (temp___result_441 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_441 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_442 : int.
   ( (temp___result_442 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_442 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9796] ((let temp___448 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_444 : Standard__string.string.
   ( (temp___result_444 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_444 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___447 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_443 : Standard__string.string.
   ( (temp___result_443 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_443 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___447) (Standard__string.first temp___447) (Standard__string.last temp___447) (Standard__string.to_array temp___448) (Standard__string.first temp___448) (Standard__string.last temp___448))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9806] ((let temp___454 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_450 : Standard__string.string.
   ( (temp___result_450 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_450 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___453 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_449 : Standard__string.string.
   ( (temp___result_449 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_449 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___453) (Standard__string.first temp___453) (Standard__string.last temp___453) (Standard__string.to_array temp___454) (Standard__string.first temp___454) (Standard__string.last temp___454))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9816] ((epsilon temp___result_455 : int.
   ( (temp___result_455 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_455 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_456 : int.
   ( (temp___result_456 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_456 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9826] ((epsilon temp___result_457 : int.
   ( (temp___result_457 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_457 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_458 : int.
   ( (temp___result_458 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_458 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9836] ( ((epsilon temp___result_459 : bool.
   ( (temp___result_459 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_459 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_460 : bool.
   ( (temp___result_460 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_460 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "flush__2" defined at spark-text_io.ads:283, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__flush__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val flush__2 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:9862] ((epsilon temp___result_461 : bool.
   ( (temp___result_461 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_461 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9868] ((epsilon temp___result_462 : int.
   ( (temp___result_462 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_462 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:9874] ((let temp___468 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_464 : Standard__string.string.
   ( (temp___result_464 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_464 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___467 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_463 : Standard__string.string.
   ( (temp___result_463 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_463 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___467) (Standard__string.first temp___467) (Standard__string.last temp___467) (Standard__string.to_array temp___468) (Standard__string.first temp___468) (Standard__string.last temp___468))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9884] ((let temp___474 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_470 : Standard__string.string.
   ( (temp___result_470 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_470 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___473 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_469 : Standard__string.string.
   ( (temp___result_469 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_469 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___473) (Standard__string.first temp___473) (Standard__string.last temp___473) (Standard__string.to_array temp___474) (Standard__string.first temp___474) (Standard__string.last temp___474))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9894] ((epsilon temp___result_475 : int.
   ( (temp___result_475 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_475 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_476 : int.
   ( (temp___result_476 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_476 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9904] ((epsilon temp___result_477 : int.
   ( (temp___result_477 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_477 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_478 : int.
   ( (temp___result_478 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_478 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9912] ((epsilon temp___result_479 : bool.
   ( (temp___result_479 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_479 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length__2" defined at spark-text_io.ads:299, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_line_length__2 
   (file : Spark__text_io__file_type.file_type__ref) (to__ : int) : unit
  requires {  ( [@GP_Pretty_Ada:30396] ((epsilon temp___result_480 : bool.
   ( (temp___result_480 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_480 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( ( (if (((epsilon temp___result_482 : int.
   ( (temp___result_482 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_482 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:9961] ((epsilon temp___result_481 : int.
    ( (temp___result_481 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_481 file.Spark__text_io__file_type.file_type__content) )) = to__) )) else (
   ( [@GP_Pretty_Ada:33775] true ))) /\ ( [@GP_Pretty_Ada:9966] ((epsilon temp___result_483 : bool.
   ( (temp___result_483 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_483 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:9972] ((epsilon temp___result_484 : int.
   ( (temp___result_484 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_484 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_485 : int.
   ( (temp___result_485 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_485 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:9982] ((let temp___491 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_487 : Standard__string.string.
   ( (temp___result_487 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_487 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___490 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_486 : Standard__string.string.
   ( (temp___result_486 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_486 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___490) (Standard__string.first temp___490) (Standard__string.last temp___490) (Standard__string.to_array temp___491) (Standard__string.first temp___491) (Standard__string.last temp___491))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:9992] ((let temp___497 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_493 : Standard__string.string.
   ( (temp___result_493 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_493 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___496 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_492 : Standard__string.string.
   ( (temp___result_492 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_492 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___496) (Standard__string.first temp___496) (Standard__string.last temp___496) (Standard__string.to_array temp___497) (Standard__string.first temp___497) (Standard__string.last temp___497))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10002] ((epsilon temp___result_498 : int.
   ( (temp___result_498 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_498 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_499 : int.
   ( (temp___result_499 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_499 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10012] ( ((epsilon temp___result_500 : bool.
   ( (temp___result_500 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_500 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_501 : bool.
   ( (temp___result_501 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_501 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length__3" defined at spark-text_io.ads:310, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_line_length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_line_length__3 
   (to__ : int) : unit
  requires {  true }
  ensures {  ( ( ( ( ( ( ( (if (((epsilon temp___result_503 : int.
   ( (temp___result_503 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_503 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:10054] ((epsilon temp___result_502 : int.
    ( (temp___result_502 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_502 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = to__) )) else (
   ( [@GP_Pretty_Ada:33778] true ))) /\ ( [@GP_Pretty_Ada:10059] ((epsilon temp___result_504 : bool.
   ( (temp___result_504 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_504 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:10065] ((epsilon temp___result_505 : int.
   ( (temp___result_505 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_505 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:10071] ((let temp___511 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_507 : Standard__string.string.
   ( (temp___result_507 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_507 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___510 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_506 : Standard__string.string.
   ( (temp___result_506 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_506 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___510) (Standard__string.first temp___510) (Standard__string.last temp___510) (Standard__string.to_array temp___511) (Standard__string.first temp___511) (Standard__string.last temp___511))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10081] ((let temp___517 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_513 : Standard__string.string.
   ( (temp___result_513 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_513 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___516 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_512 : Standard__string.string.
   ( (temp___result_512 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_512 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___516) (Standard__string.first temp___516) (Standard__string.last temp___516) (Standard__string.to_array temp___517) (Standard__string.first temp___517) (Standard__string.last temp___517))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10091] ((epsilon temp___result_518 : int.
   ( (temp___result_518 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_518 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_519 : int.
   ( (temp___result_519 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_519 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10099] ((epsilon temp___result_520 : bool.
   ( (temp___result_520 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_520 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length__2" defined at spark-text_io.ads:323, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_page_length__2 
   (file : Spark__text_io__file_type.file_type__ref) (to__ : int) : unit
  requires {  ( [@GP_Pretty_Ada:30570] ((epsilon temp___result_521 : bool.
   ( (temp___result_521 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_521 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( ( (if (((epsilon temp___result_523 : int.
   ( (temp___result_523 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_523 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:10148] ((epsilon temp___result_522 : int.
    ( (temp___result_522 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_522 file.Spark__text_io__file_type.file_type__content) )) = to__) )) else (
   ( [@GP_Pretty_Ada:33781] true ))) /\ ( [@GP_Pretty_Ada:10153] ((epsilon temp___result_524 : bool.
   ( (temp___result_524 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_524 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:10159] ((epsilon temp___result_525 : int.
   ( (temp___result_525 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_525 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_526 : int.
   ( (temp___result_526 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_526 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10169] ((let temp___532 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_528 : Standard__string.string.
   ( (temp___result_528 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_528 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___531 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_527 : Standard__string.string.
   ( (temp___result_527 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_527 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___531) (Standard__string.first temp___531) (Standard__string.last temp___531) (Standard__string.to_array temp___532) (Standard__string.first temp___532) (Standard__string.last temp___532))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10179] ((let temp___538 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_534 : Standard__string.string.
   ( (temp___result_534 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_534 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___537 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_533 : Standard__string.string.
   ( (temp___result_533 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_533 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___537) (Standard__string.first temp___537) (Standard__string.last temp___537) (Standard__string.to_array temp___538) (Standard__string.first temp___538) (Standard__string.last temp___538))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10189] ((epsilon temp___result_539 : int.
   ( (temp___result_539 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_539 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_540 : int.
   ( (temp___result_540 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_540 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10199] ( ((epsilon temp___result_541 : bool.
   ( (temp___result_541 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_541 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_542 : bool.
   ( (temp___result_542 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_542 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length__3" defined at spark-text_io.ads:333, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_page_length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_page_length__3 
   (to__ : int) : unit
  requires {  true }
  ensures {  ( ( ( ( ( ( ( (if (((epsilon temp___result_544 : int.
   ( (temp___result_544 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_544 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:10241] ((epsilon temp___result_543 : int.
    ( (temp___result_543 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_543 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = to__) )) else (
   ( [@GP_Pretty_Ada:33784] true ))) /\ ( [@GP_Pretty_Ada:10246] ((epsilon temp___result_545 : bool.
   ( (temp___result_545 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_545 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:10252] ((epsilon temp___result_546 : int.
   ( (temp___result_546 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_546 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:10258] ((let temp___552 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_548 : Standard__string.string.
   ( (temp___result_548 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_548 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___551 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_547 : Standard__string.string.
   ( (temp___result_547 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_547 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___551) (Standard__string.first temp___551) (Standard__string.last temp___551) (Standard__string.to_array temp___552) (Standard__string.first temp___552) (Standard__string.last temp___552))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10268] ((let temp___558 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_554 : Standard__string.string.
   ( (temp___result_554 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_554 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___557 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_553 : Standard__string.string.
   ( (temp___result_553 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_553 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___557) (Standard__string.first temp___557) (Standard__string.last temp___557) (Standard__string.to_array temp___558) (Standard__string.first temp___558) (Standard__string.last temp___558))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10278] ((epsilon temp___result_559 : int.
   ( (temp___result_559 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_559 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_560 : int.
   ( (temp___result_560 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_560 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10286] ((epsilon temp___result_561 : bool.
   ( (temp___result_561 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_561 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__3" defined at spark-text_io.ads:349, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__line_length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__line_length__3 as Spark__text_io__line_length__3
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom

 val line_length__3 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__line_length__3.line_length__3 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__3.line_length__3__function_guard result Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )/\(Spark__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
 
 axiom line_length__3__post_axiom :
  (forall spark__text_io__standard_output   : Spark__text_io__file_type.file_type [(Spark__text_io__line_length__3.line_length__3 spark__text_io__standard_output)].
   (let result = (Spark__text_io__line_length__3.line_length__3 spark__text_io__standard_output) in (
    (Spark__text_io__count.dynamic_property Spark__text_io__count.first Spark__text_io__count.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__3" defined at spark-text_io.ads:356, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__page_length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__page_length__3 as Spark__text_io__page_length__3
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom

 val page_length__3 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__page_length__3.page_length__3 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__3.page_length__3__function_guard result Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )/\(Spark__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
 
 axiom page_length__3__post_axiom :
  (forall spark__text_io__standard_output   : Spark__text_io__file_type.file_type [(Spark__text_io__page_length__3.page_length__3 spark__text_io__standard_output)].
   (let result = (Spark__text_io__page_length__3.page_length__3 spark__text_io__standard_output) in (
    (Spark__text_io__count.dynamic_property Spark__text_io__count.first Spark__text_io__count.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__2" defined at spark-text_io.ads:361, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__new_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val new_line__2 
   (file : Spark__text_io__file_type.file_type__ref) (spacing : int) : unit
  requires {  ( [@GP_Pretty_Ada:30810] ((epsilon temp___result_562 : bool.
   ( (temp___result_562 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_562 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:10417] ((epsilon temp___result_563 : bool.
   ( (temp___result_563 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_563 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10423] ((epsilon temp___result_564 : int.
   ( (temp___result_564 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_564 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_565 : int.
   ( (temp___result_565 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_565 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10433] ((let temp___571 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_567 : Standard__string.string.
   ( (temp___result_567 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_567 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___570 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_566 : Standard__string.string.
   ( (temp___result_566 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_566 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___570) (Standard__string.first temp___570) (Standard__string.last temp___570) (Standard__string.to_array temp___571) (Standard__string.first temp___571) (Standard__string.last temp___571))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10443] ((let temp___577 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_573 : Standard__string.string.
   ( (temp___result_573 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_573 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___576 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_572 : Standard__string.string.
   ( (temp___result_572 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_572 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___576) (Standard__string.first temp___576) (Standard__string.last temp___576) (Standard__string.to_array temp___577) (Standard__string.first temp___577) (Standard__string.last temp___577))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10453] ((epsilon temp___result_578 : int.
   ( (temp___result_578 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_578 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_579 : int.
   ( (temp___result_579 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_579 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10463] ((epsilon temp___result_580 : int.
   ( (temp___result_580 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_580 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_581 : int.
   ( (temp___result_581 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_581 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10473] ( ((epsilon temp___result_582 : bool.
   ( (temp___result_582 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_582 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_583 : bool.
   ( (temp___result_583 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_583 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__3" defined at spark-text_io.ads:372, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__new_line__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val new_line__3 
   (spacing : int) : unit
  requires {  true }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:10509] ((epsilon temp___result_584 : bool.
   ( (temp___result_584 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_584 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10515] ((epsilon temp___result_585 : int.
   ( (temp___result_585 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_585 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:10521] ((let temp___591 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_587 : Standard__string.string.
   ( (temp___result_587 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_587 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___590 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_586 : Standard__string.string.
   ( (temp___result_586 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_586 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___590) (Standard__string.first temp___590) (Standard__string.last temp___590) (Standard__string.to_array temp___591) (Standard__string.first temp___591) (Standard__string.last temp___591))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10531] ((let temp___597 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_593 : Standard__string.string.
   ( (temp___result_593 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_593 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___596 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_592 : Standard__string.string.
   ( (temp___result_592 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_592 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___596) (Standard__string.first temp___596) (Standard__string.last temp___596) (Standard__string.to_array temp___597) (Standard__string.first temp___597) (Standard__string.last temp___597))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10541] ((epsilon temp___result_598 : int.
   ( (temp___result_598 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_598 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_599 : int.
   ( (temp___result_599 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_599 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10551] ((epsilon temp___result_600 : int.
   ( (temp___result_600 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_600 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_601 : int.
   ( (temp___result_601 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_601 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10559] ((epsilon temp___result_602 : bool.
   ( (temp___result_602 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_602 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file" defined at spark-text_io.ads:459, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__end_of_file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file

 val end_of_file 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  ( [@GP_Pretty_Ada:31496] ((epsilon temp___result_603 : bool.
   ( (temp___result_603 = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_603 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__end_of_file.end_of_file file)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line__2" defined at spark-text_io.ads:386, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__skip_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val skip_line__2 
   (file : Spark__text_io__file_type.file_type__ref) (spacing : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:10597] ((epsilon temp___result_604 : bool.
   ( (temp___result_604 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_604 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10599] not ( ((epsilon temp___result_605 : bool.
   ( (temp___result_605 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_605 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:10608] ((epsilon temp___result_606 : bool.
   ( (temp___result_606 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_606 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10614] ((let temp___612 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_608 : Standard__string.string.
   ( (temp___result_608 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_608 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___611 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_607 : Standard__string.string.
   ( (temp___result_607 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_607 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___611) (Standard__string.first temp___611) (Standard__string.last temp___611) (Standard__string.to_array temp___612) (Standard__string.first temp___612) (Standard__string.last temp___612))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10624] ((let temp___618 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_614 : Standard__string.string.
   ( (temp___result_614 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_614 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___617 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_613 : Standard__string.string.
   ( (temp___result_613 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_613 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___617) (Standard__string.first temp___617) (Standard__string.last temp___617) (Standard__string.to_array temp___618) (Standard__string.first temp___618) (Standard__string.last temp___618))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10634] ( ((epsilon temp___result_619 : bool.
   ( (temp___result_619 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_619 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_620 : bool.
   ( (temp___result_620 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_620 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file__2" defined at spark-text_io.ads:463, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__end_of_file__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2

 val end_of_file__2 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard result Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )/\( [@GP_Pretty_Ada:31523] ( (result = True) <-> ((epsilon temp___result_621 : bool.
   ( (temp___result_621 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_621 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  reads {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line__3" defined at spark-text_io.ads:395, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__skip_line__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val skip_line__3 
   (spacing : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:10670] ((epsilon temp___result_622 : bool.
   ( (temp___result_622 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_622 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10672] not ( ((epsilon temp___result_623 : bool.
   ( (temp___result_623 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_623 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:10679] ((epsilon temp___result_624 : bool.
   ( (temp___result_624 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_624 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10685] ((let temp___630 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_626 : Standard__string.string.
   ( (temp___result_626 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_626 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___629 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_625 : Standard__string.string.
   ( (temp___result_625 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_625 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___629) (Standard__string.first temp___629) (Standard__string.last temp___629) (Standard__string.to_array temp___630) (Standard__string.first temp___630) (Standard__string.last temp___630))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10695] ((let temp___636 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_632 : Standard__string.string.
   ( (temp___result_632 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_632 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___635 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_631 : Standard__string.string.
   ( (temp___result_631 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_631 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___635) (Standard__string.first temp___635) (Standard__string.last temp___635) (Standard__string.to_array temp___636) (Standard__string.first temp___636) (Standard__string.last temp___636))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10703] ((epsilon temp___result_637 : bool.
   ( (temp___result_637 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_637 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line" defined at spark-text_io.ads:404, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__end_of_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__end_of_line as Spark__text_io__end_of_line

 val end_of_line 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  ( [@GP_Pretty_Ada:31120] ((epsilon temp___result_638 : bool.
   ( (temp___result_638 = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_638 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__end_of_line.end_of_line file)) /\ (Spark__text_io__end_of_line.end_of_line__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line__2" defined at spark-text_io.ads:408, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__end_of_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__end_of_line__2 as Spark__text_io__end_of_line__2

 val end_of_line__2 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__end_of_line__2.end_of_line__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_line__2.end_of_line__2__function_guard result Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )/\true ) }
  reads {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "new_page" defined at spark-text_io.ads:411, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__new_page___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val new_page 
   (file : Spark__text_io__file_type.file_type__ref) : unit
  requires {  ( [@GP_Pretty_Ada:31153] ((epsilon temp___result_639 : bool.
   ( (temp___result_639 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_639 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:10780] ((epsilon temp___result_640 : bool.
   ( (temp___result_640 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_640 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10786] ((epsilon temp___result_641 : int.
   ( (temp___result_641 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_641 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_642 : int.
   ( (temp___result_642 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_642 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10796] ((let temp___648 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_644 : Standard__string.string.
   ( (temp___result_644 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_644 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___647 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_643 : Standard__string.string.
   ( (temp___result_643 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_643 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___647) (Standard__string.first temp___647) (Standard__string.last temp___647) (Standard__string.to_array temp___648) (Standard__string.first temp___648) (Standard__string.last temp___648))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10806] ((let temp___654 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_650 : Standard__string.string.
   ( (temp___result_650 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_650 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___653 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_649 : Standard__string.string.
   ( (temp___result_649 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_649 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___653) (Standard__string.first temp___653) (Standard__string.last temp___653) (Standard__string.to_array temp___654) (Standard__string.first temp___654) (Standard__string.last temp___654))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10816] ((epsilon temp___result_655 : int.
   ( (temp___result_655 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_655 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_656 : int.
   ( (temp___result_656 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_656 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10826] ((epsilon temp___result_657 : int.
   ( (temp___result_657 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_657 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_658 : int.
   ( (temp___result_658 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_658 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10836] ( ((epsilon temp___result_659 : bool.
   ( (temp___result_659 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_659 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_660 : bool.
   ( (temp___result_660 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_660 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "new_page__2" defined at spark-text_io.ads:421, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__new_page__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val new_page__2 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:10862] ((epsilon temp___result_661 : bool.
   ( (temp___result_661 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_661 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10868] ((epsilon temp___result_662 : int.
   ( (temp___result_662 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_662 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:10874] ((let temp___668 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_664 : Standard__string.string.
   ( (temp___result_664 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_664 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___667 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_663 : Standard__string.string.
   ( (temp___result_663 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_663 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___667) (Standard__string.first temp___667) (Standard__string.last temp___667) (Standard__string.to_array temp___668) (Standard__string.first temp___668) (Standard__string.last temp___668))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10884] ((let temp___674 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_670 : Standard__string.string.
   ( (temp___result_670 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_670 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___673 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_669 : Standard__string.string.
   ( (temp___result_669 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_669 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___673) (Standard__string.first temp___673) (Standard__string.last temp___673) (Standard__string.to_array temp___674) (Standard__string.first temp___674) (Standard__string.last temp___674))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10894] ((epsilon temp___result_675 : int.
   ( (temp___result_675 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_675 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_676 : int.
   ( (temp___result_676 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_676 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10904] ((epsilon temp___result_677 : int.
   ( (temp___result_677 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_677 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_678 : int.
   ( (temp___result_678 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_678 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:10912] ((epsilon temp___result_679 : bool.
   ( (temp___result_679 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_679 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page" defined at spark-text_io.ads:435, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__skip_page___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val skip_page 
   (file : Spark__text_io__file_type.file_type__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:10940] ((epsilon temp___result_680 : bool.
   ( (temp___result_680 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_680 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10942] not ( ((epsilon temp___result_681 : bool.
   ( (temp___result_681 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_681 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:10951] ((epsilon temp___result_682 : bool.
   ( (temp___result_682 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_682 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10957] ((let temp___688 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_684 : Standard__string.string.
   ( (temp___result_684 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_684 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___687 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_683 : Standard__string.string.
   ( (temp___result_683 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_683 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___687) (Standard__string.first temp___687) (Standard__string.last temp___687) (Standard__string.to_array temp___688) (Standard__string.first temp___688) (Standard__string.last temp___688))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10967] ((let temp___694 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_690 : Standard__string.string.
   ( (temp___result_690 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_690 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___693 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_689 : Standard__string.string.
   ( (temp___result_689 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_689 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___693) (Standard__string.first temp___693) (Standard__string.last temp___693) (Standard__string.to_array temp___694) (Standard__string.first temp___694) (Standard__string.last temp___694))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:10977] ( ((epsilon temp___result_695 : bool.
   ( (temp___result_695 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_695 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_696 : bool.
   ( (temp___result_696 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_696 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page__2" defined at spark-text_io.ads:443, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__skip_page__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val skip_page__2 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:11003] ((epsilon temp___result_697 : bool.
   ( (temp___result_697 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_697 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11005] not ( ((epsilon temp___result_698 : bool.
   ( (temp___result_698 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_698 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:11012] ((epsilon temp___result_699 : bool.
   ( (temp___result_699 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_699 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11018] ((let temp___705 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_701 : Standard__string.string.
   ( (temp___result_701 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_701 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___704 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_700 : Standard__string.string.
   ( (temp___result_700 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_700 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___704) (Standard__string.first temp___704) (Standard__string.last temp___704) (Standard__string.to_array temp___705) (Standard__string.first temp___705) (Standard__string.last temp___705))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11028] ((let temp___711 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_707 : Standard__string.string.
   ( (temp___result_707 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_707 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___710 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_706 : Standard__string.string.
   ( (temp___result_706 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_706 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___710) (Standard__string.first temp___710) (Standard__string.last temp___710) (Standard__string.to_array temp___711) (Standard__string.first temp___711) (Standard__string.last temp___711))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11036] ((epsilon temp___result_712 : bool.
   ( (temp___result_712 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_712 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page" defined at spark-text_io.ads:452, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__end_of_page___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__end_of_page as Spark__text_io__end_of_page

 val end_of_page 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  ( [@GP_Pretty_Ada:31463] ((epsilon temp___result_713 : bool.
   ( (temp___result_713 = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_713 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__end_of_page.end_of_page file)) /\ (Spark__text_io__end_of_page.end_of_page__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page__2" defined at spark-text_io.ads:456, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__end_of_page__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__end_of_page__2 as Spark__text_io__end_of_page__2

 val end_of_page__2 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__end_of_page__2.end_of_page__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_page__2.end_of_page__2__function_guard result Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )/\true ) }
  reads {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "col__3" defined at spark-text_io.ads:531, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__col__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__col__3 as Spark__text_io__col__3
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom

 val col__3 
   (file : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
  requires {  ( [@GP_Pretty_Ada:32046] ((epsilon temp___result_714 : bool.
   ( (temp___result_714 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_714 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__col__3.col__3 file)) /\ (Spark__text_io__col__3.col__3__function_guard result file) )/\(Spark__text_io__count_result___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "set_col__2" defined at spark-text_io.ads:467, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_col__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__col__3 as Spark__text_io__col__3
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count__rep as Spark__text_io__count__rep
 use        Spark__text_io__set_col__2__T97s as Spark__text_io__set_col__2__T97s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_col__2 
   (file : Spark__text_io__file_type.file_type__ref) (to__ : int) : unit
  requires {  (if (( ((epsilon temp___result_719 : bool.
   ( (temp___result_719 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_719 file.Spark__text_io__file_type.file_type__content) )) = True) /\ ((epsilon temp___result_720 : int.
   ( (temp___result_720 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_720 file.Spark__text_io__file_type.file_type__content) )) > (0 : int)) )) then (
   ( [@GP_Pretty_Ada:11180] (to__ <= (epsilon temp___result_716 : int.
    ( (temp___result_716 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_716 file.Spark__text_io__file_type.file_type__content) ))) )) else ((if (((epsilon temp___result_718 : bool.
   ( (temp___result_718 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_718 file.Spark__text_io__file_type.file_type__content) )) = True)) then (
   ( [@GP_Pretty_Ada:11186] not ( ((epsilon temp___result_717 : bool.
    ( (temp___result_717 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_717 file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33788] true ))))) }
  ensures {  ( ( ( ( ( ( ( ( ( (if (((epsilon temp___result_724 : int.
   ( (temp___result_724 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_724 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:11202] ((Spark__text_io__count_result.bool_eq (epsilon temp___result_721 : Spark__text_io__count_result.count_result.
    ( (temp___result_721 = (Spark__text_io__col__3.col__3 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__col__3.col__3__function_guard temp___result_721 file.Spark__text_io__file_type.file_type__content) )) { Spark__text_io__set_col__2__T97s.__split_discrs = { Spark__text_io__count_result.rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.of_rep (1 : int)) }; Spark__text_io__set_col__2__T97s.__split_fields = { Spark__text_io__set_col__2__T97s.rec__spark__text_io__count_result__value = (Spark__text_io__count__rep.of_rep to__) }; Spark__text_io__set_col__2__T97s.attr__constrained = true }) = True) )) else (
   ( [@GP_Pretty_Ada:33829] true ))) /\ ( [@GP_Pretty_Ada:11210] ((epsilon temp___result_725 : bool.
   ( (temp___result_725 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_725 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:11216] ((epsilon temp___result_726 : int.
   ( (temp___result_726 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_726 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_727 : int.
   ( (temp___result_727 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_727 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11226] ( ((epsilon temp___result_728 : bool.
   ( (temp___result_728 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_728 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_729 : bool.
   ( (temp___result_729 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_729 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ ( [@GP_Pretty_Ada:11236] ((let temp___735 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_731 : Standard__string.string.
   ( (temp___result_731 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_731 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___734 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_730 : Standard__string.string.
   ( (temp___result_730 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_730 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___734) (Standard__string.first temp___734) (Standard__string.last temp___734) (Standard__string.to_array temp___735) (Standard__string.first temp___735) (Standard__string.last temp___735))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11246] ((let temp___741 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_737 : Standard__string.string.
   ( (temp___result_737 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_737 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___740 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_736 : Standard__string.string.
   ( (temp___result_736 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_736 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___740) (Standard__string.first temp___740) (Standard__string.last temp___740) (Standard__string.to_array temp___741) (Standard__string.first temp___741) (Standard__string.last temp___741))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11256] ((epsilon temp___result_742 : int.
   ( (temp___result_742 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_742 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_743 : int.
   ( (temp___result_743 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_743 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11266] ((epsilon temp___result_744 : int.
   ( (temp___result_744 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_744 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_745 : int.
   ( (temp___result_745 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_745 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11276] ( ((epsilon temp___result_746 : bool.
   ( (temp___result_746 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_746 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_747 : bool.
   ( (temp___result_747 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_747 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "set_col__3" defined at spark-text_io.ads:482, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_col__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__col__3 as Spark__text_io__col__3
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count__rep as Spark__text_io__count__rep
 use        Spark__text_io__set_col__3__T98s as Spark__text_io__set_col__3__T98s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_col__3 
   (to__ : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:11311] ((epsilon temp___result_748 : bool.
   ( (temp___result_748 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_748 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ (if (((epsilon temp___result_750 : int.
   ( (temp___result_750 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_750 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) > (0 : int))) then (
   ( [@GP_Pretty_Ada:11320] (to__ <= (epsilon temp___result_749 : int.
    ( (temp___result_749 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_749 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) ))) )) else (
   ( [@GP_Pretty_Ada:33831] true ))) ) }
  ensures {  ( ( ( ( ( ( ( ( (if (((epsilon temp___result_754 : int.
   ( (temp___result_754 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_754 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:11335] ((Spark__text_io__count_result.bool_eq (epsilon temp___result_751 : Spark__text_io__count_result.count_result.
    ( (temp___result_751 = (Spark__text_io__col__3.col__3 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__col__3.col__3__function_guard temp___result_751 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) { Spark__text_io__set_col__3__T98s.__split_discrs = { Spark__text_io__count_result.rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.of_rep (1 : int)) }; Spark__text_io__set_col__3__T98s.__split_fields = { Spark__text_io__set_col__3__T98s.rec__spark__text_io__count_result__value = (Spark__text_io__count__rep.of_rep to__) }; Spark__text_io__set_col__3__T98s.attr__constrained = true }) = True) )) else (
   ( [@GP_Pretty_Ada:33872] true ))) /\ ( [@GP_Pretty_Ada:11345] ((let temp___760 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_756 : Standard__string.string.
   ( (temp___result_756 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_756 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___759 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_755 : Standard__string.string.
   ( (temp___result_755 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_755 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___759) (Standard__string.first temp___759) (Standard__string.last temp___759) (Standard__string.to_array temp___760) (Standard__string.first temp___760) (Standard__string.last temp___760))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11355] ((let temp___766 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_762 : Standard__string.string.
   ( (temp___result_762 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_762 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___765 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_761 : Standard__string.string.
   ( (temp___result_761 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_761 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___765) (Standard__string.first temp___765) (Standard__string.last temp___765) (Standard__string.to_array temp___766) (Standard__string.first temp___766) (Standard__string.last temp___766))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11363] ((epsilon temp___result_767 : bool.
   ( (temp___result_767 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_767 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:11369] ((epsilon temp___result_768 : int.
   ( (temp___result_768 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_768 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:11375] ((epsilon temp___result_769 : int.
   ( (temp___result_769 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_769 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_770 : int.
   ( (temp___result_770 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_770 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11385] ((epsilon temp___result_771 : int.
   ( (temp___result_771 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_771 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_772 : int.
   ( (temp___result_772 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_772 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11393] ((epsilon temp___result_773 : bool.
   ( (temp___result_773 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_773 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "page__3" defined at spark-text_io.ads:545, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__page__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__page__3 as Spark__text_io__page__3
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom

 val page__3 
   (file : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
  requires {  ( [@GP_Pretty_Ada:32112] ((epsilon temp___result_774 : bool.
   ( (temp___result_774 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_774 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__page__3.page__3 file)) /\ (Spark__text_io__page__3.page__3__function_guard result file) )/\(Spark__text_io__count_result___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line__2" defined at spark-text_io.ads:499, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__page__3 as Spark__text_io__page__3
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count__rep as Spark__text_io__count__rep
 use        Spark__text_io__set_line__2__T99s as Spark__text_io__set_line__2__T99s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_line__2 
   (file : Spark__text_io__file_type.file_type__ref) (to__ : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:11430] ((epsilon temp___result_776 : bool.
   ( (temp___result_776 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_776 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ (if (((epsilon temp___result_780 : int.
   ( (temp___result_780 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_780 file.Spark__text_io__file_type.file_type__content) )) > (0 : int))) then (
   ( [@GP_Pretty_Ada:11439] (to__ <= (epsilon temp___result_777 : int.
    ( (temp___result_777 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_777 file.Spark__text_io__file_type.file_type__content) ))) )) else ((if (((epsilon temp___result_779 : bool.
   ( (temp___result_779 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_779 file.Spark__text_io__file_type.file_type__content) )) = True)) then (
   ( [@GP_Pretty_Ada:11445] not ( ((epsilon temp___result_778 : bool.
    ( (temp___result_778 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_778 file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33874] true ))))) ) }
  ensures {  ( ( (if (((epsilon temp___result_784 : int.
   ( (temp___result_784 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_784 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:11462] ((Spark__text_io__count_result.bool_eq (epsilon temp___result_781 : Spark__text_io__count_result.count_result.
    ( (temp___result_781 = (Spark__text_io__page__3.page__3 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page__3.page__3__function_guard temp___result_781 file.Spark__text_io__file_type.file_type__content) )) { Spark__text_io__set_line__2__T99s.__split_discrs = { Spark__text_io__count_result.rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.of_rep (1 : int)) }; Spark__text_io__set_line__2__T99s.__split_fields = { Spark__text_io__set_line__2__T99s.rec__spark__text_io__count_result__value = (Spark__text_io__count__rep.of_rep to__) }; Spark__text_io__set_line__2__T99s.attr__constrained = true }) = True) )) else (
   ( [@GP_Pretty_Ada:33915] true ))) /\ ( ( ( ( ( ( ( [@GP_Pretty_Ada:11470] ((epsilon temp___result_785 : bool.
   ( (temp___result_785 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_785 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11476] ((epsilon temp___result_786 : int.
   ( (temp___result_786 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_786 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_787 : int.
   ( (temp___result_787 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_787 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11486] ((let temp___793 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_789 : Standard__string.string.
   ( (temp___result_789 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_789 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___792 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_788 : Standard__string.string.
   ( (temp___result_788 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_788 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___792) (Standard__string.first temp___792) (Standard__string.last temp___792) (Standard__string.to_array temp___793) (Standard__string.first temp___793) (Standard__string.last temp___793))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11496] ((let temp___799 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_795 : Standard__string.string.
   ( (temp___result_795 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_795 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___798 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_794 : Standard__string.string.
   ( (temp___result_794 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_794 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___798) (Standard__string.first temp___798) (Standard__string.last temp___798) (Standard__string.to_array temp___799) (Standard__string.first temp___799) (Standard__string.last temp___799))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11506] ((epsilon temp___result_800 : int.
   ( (temp___result_800 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_800 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_801 : int.
   ( (temp___result_801 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_801 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11516] ((epsilon temp___result_802 : int.
   ( (temp___result_802 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_802 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_803 : int.
   ( (temp___result_803 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_803 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11526] ( ((epsilon temp___result_804 : bool.
   ( (temp___result_804 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_804 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_805 : bool.
   ( (temp___result_805 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_805 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "line__3" defined at spark-text_io.ads:538, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__line__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__line__3 as Spark__text_io__line__3
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom

 val line__3 
   (file : Spark__text_io__file_type.file_type) : Spark__text_io__count_result.count_result
  requires {  ( [@GP_Pretty_Ada:32079] ((epsilon temp___result_806 : bool.
   ( (temp___result_806 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_806 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__line__3.line__3 file)) /\ (Spark__text_io__line__3.line__3__function_guard result file) )/\(Spark__text_io__count_result___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line__3" defined at spark-text_io.ads:514, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__set_line__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__3 as Spark__text_io__page_length__3
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__line__3 as Spark__text_io__line__3
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep
 use        Spark__text_io__count as Spark__text_io__count
 use        Spark__text_io__count__rep as Spark__text_io__count__rep
 use        Spark__text_io__set_line__3__T100s as Spark__text_io__set_line__3__T100s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val set_line__3 
   (to__ : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:11561] ((epsilon temp___result_808 : bool.
   ( (temp___result_808 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_808 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ (if (((epsilon temp___result_810 : int.
   ( (temp___result_810 = (Spark__text_io__page_length__3.page_length__3 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__3.page_length__3__function_guard temp___result_810 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) > (0 : int))) then (
   ( [@GP_Pretty_Ada:11568] (to__ <= (epsilon temp___result_809 : int.
    ( (temp___result_809 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_809 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) ))) )) else (
   ( [@GP_Pretty_Ada:33918] true ))) ) }
  ensures {  ( ( ( ( ( ( ( ( (if (((epsilon temp___result_814 : int.
   ( (temp___result_814 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_814 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:11583] ((Spark__text_io__count_result.bool_eq (epsilon temp___result_811 : Spark__text_io__count_result.count_result.
    ( (temp___result_811 = (Spark__text_io__line__3.line__3 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line__3.line__3__function_guard temp___result_811 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) { Spark__text_io__set_line__3__T100s.__split_discrs = { Spark__text_io__count_result.rec__spark__text_io__count_result__status = (Spark__text_io__file_status__rep.of_rep (1 : int)) }; Spark__text_io__set_line__3__T100s.__split_fields = { Spark__text_io__set_line__3__T100s.rec__spark__text_io__count_result__value = (Spark__text_io__count__rep.of_rep to__) }; Spark__text_io__set_line__3__T100s.attr__constrained = true }) = True) )) else (
   ( [@GP_Pretty_Ada:33959] true ))) /\ ( [@GP_Pretty_Ada:11591] ((epsilon temp___result_815 : bool.
   ( (temp___result_815 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_815 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:11597] ((epsilon temp___result_816 : int.
   ( (temp___result_816 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_816 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:11603] ((let temp___822 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_818 : Standard__string.string.
   ( (temp___result_818 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_818 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___821 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_817 : Standard__string.string.
   ( (temp___result_817 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_817 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___821) (Standard__string.first temp___821) (Standard__string.last temp___821) (Standard__string.to_array temp___822) (Standard__string.first temp___822) (Standard__string.last temp___822))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11613] ((let temp___828 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_824 : Standard__string.string.
   ( (temp___result_824 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_824 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___827 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_823 : Standard__string.string.
   ( (temp___result_823 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_823 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___827) (Standard__string.first temp___827) (Standard__string.last temp___827) (Standard__string.to_array temp___828) (Standard__string.first temp___828) (Standard__string.last temp___828))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11623] ((epsilon temp___result_829 : int.
   ( (temp___result_829 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_829 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_830 : int.
   ( (temp___result_830 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_830 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11633] ((epsilon temp___result_831 : int.
   ( (temp___result_831 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_831 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_832 : int.
   ( (temp___result_832 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_832 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:11641] ((epsilon temp___result_833 : bool.
   ( (temp___result_833 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_833 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "col__4" defined at spark-text_io.ads:535, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__col__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__col__4 as Spark__text_io__col__4
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom

 val col__4 
   (__void_param : unit) : Spark__text_io__count_result.count_result
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__col__4.col__4 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__col__4.col__4__function_guard result Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )/\(Spark__text_io__count_result___axiom.dynamic_invariant result True False True True) ) }
  reads {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "line__4" defined at spark-text_io.ads:542, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__line__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__line__4 as Spark__text_io__line__4
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom

 val line__4 
   (__void_param : unit) : Spark__text_io__count_result.count_result
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__line__4.line__4 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line__4.line__4__function_guard result Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )/\(Spark__text_io__count_result___axiom.dynamic_invariant result True False True True) ) }
  reads {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "page__4" defined at spark-text_io.ads:549, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__page__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__page__4 as Spark__text_io__page__4
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom

 val page__4 
   (__void_param : unit) : Spark__text_io__count_result.count_result
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__page__4.page__4 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page__4.page__4__function_guard result Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )/\(Spark__text_io__count_result___axiom.dynamic_invariant result True False True True) ) }
  reads {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at spark-text_io.ads:554, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (file : Spark__text_io__file_type.file_type__ref) (item__split_fields : Spark__text_io__character_result.__split_fields__ref) (item__split_discrs : Spark__text_io__character_result.__split_discrs__ref) (item__attr__constrained : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:11810] ((epsilon temp___result_837 : bool.
   ( (temp___result_837 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_837 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11812] not ( ((epsilon temp___result_838 : bool.
   ( (temp___result_838 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_838 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:11821] ((epsilon temp___result_839 : bool.
   ( (temp___result_839 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_839 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11827] ((let temp___845 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_841 : Standard__string.string.
   ( (temp___result_841 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_841 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___844 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_840 : Standard__string.string.
   ( (temp___result_840 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_840 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___844) (Standard__string.first temp___844) (Standard__string.last temp___844) (Standard__string.to_array temp___845) (Standard__string.first temp___845) (Standard__string.last temp___845))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11837] ((let temp___851 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_847 : Standard__string.string.
   ( (temp___result_847 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_847 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___850 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_846 : Standard__string.string.
   ( (temp___result_846 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_846 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___850) (Standard__string.first temp___850) (Standard__string.last temp___850) (Standard__string.to_array temp___851) (Standard__string.first temp___851) (Standard__string.last temp___851))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11847] ( ((epsilon temp___result_852 : bool.
   ( (temp___result_852 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_852 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_853 : bool.
   ( (temp___result_853 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_853 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ ( (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) /\ (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained } True True True True) ) ) }
  writes {file, item__split_fields, item__split_discrs}

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at spark-text_io.ads:562, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status__rep as Spark__text_io__file_status__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get__2 
   (item__split_fields : Spark__text_io__character_result.__split_fields__ref) (item__split_discrs : Spark__text_io__character_result.__split_discrs__ref) (item__attr__constrained : bool) : unit
  requires {  ( [@GP_Pretty_Ada:32241] ( not ( ((epsilon temp___result_855 : bool.
   ( (temp___result_855 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_855 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) \/ ( ((epsilon temp___result_856 : bool.
   ( (temp___result_856 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_856 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) /\ not ( ((epsilon temp___result_857 : bool.
   ( (temp___result_857 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_857 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) ) }
  ensures {  ( ( ( ( ( ( ( [@GP_Pretty_Ada:11905] ((epsilon temp___result_858 : bool.
   ( (temp___result_858 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_858 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11911] ((let temp___864 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_860 : Standard__string.string.
   ( (temp___result_860 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_860 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___863 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_859 : Standard__string.string.
   ( (temp___result_859 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_859 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___863) (Standard__string.first temp___863) (Standard__string.last temp___863) (Standard__string.to_array temp___864) (Standard__string.first temp___864) (Standard__string.last temp___864))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11921] ((let temp___870 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_866 : Standard__string.string.
   ( (temp___result_866 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_866 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___869 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_865 : Standard__string.string.
   ( (temp___result_865 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_865 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___869) (Standard__string.first temp___869) (Standard__string.last temp___869) (Standard__string.to_array temp___870) (Standard__string.first temp___870) (Standard__string.last temp___870))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:11929] ((epsilon temp___result_871 : bool.
   ( (temp___result_871 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_871 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:11933] ((epsilon temp___result_872 : bool.
   ( (temp___result_872 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_872 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (if (((Spark__text_io__file_status__rep.to_rep { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained }.Spark__text_io__character_result.__split_discrs.Spark__text_io__character_result.rec__spark__text_io__character_result__status) = (1 : int))) then (
   ( [@GP_Pretty_Ada:11944] ((epsilon temp___result_873 : int.
    ( (temp___result_873 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_873 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) )) else (
   ( [@GP_Pretty_Ada:33964] true ))) ) /\ ( (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item__split_fields, item__split_discrs}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at spark-text_io.ads:577, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val put 
   (file : Spark__text_io__file_type.file_type__ref) (item : int) : unit
  requires {  ( ( [@GP_Pretty_Ada:11982] ((epsilon temp___result_875 : bool.
   ( (temp___result_875 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_875 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11988] ((epsilon temp___result_876 : int.
   ( (temp___result_876 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_876 file.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) }
  ensures {  ( ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:11994] ((epsilon temp___result_877 : bool.
   ( (temp___result_877 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_877 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11998] ((epsilon temp___result_878 : bool.
   ( (temp___result_878 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_878 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:12004] ((epsilon temp___result_879 : int.
   ( (temp___result_879 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_879 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_880 : int.
   ( (temp___result_880 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_880 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12014] ((let temp___886 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_882 : Standard__string.string.
   ( (temp___result_882 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_882 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___885 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_881 : Standard__string.string.
   ( (temp___result_881 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_881 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___885) (Standard__string.first temp___885) (Standard__string.last temp___885) (Standard__string.to_array temp___886) (Standard__string.first temp___886) (Standard__string.last temp___886))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12024] ((let temp___892 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_888 : Standard__string.string.
   ( (temp___result_888 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_888 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___891 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_887 : Standard__string.string.
   ( (temp___result_887 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_887 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___891) (Standard__string.first temp___891) (Standard__string.last temp___891) (Standard__string.to_array temp___892) (Standard__string.first temp___892) (Standard__string.last temp___892))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12034] ((epsilon temp___result_893 : int.
   ( (temp___result_893 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_893 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_894 : int.
   ( (temp___result_894 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_894 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12044] ((epsilon temp___result_895 : int.
   ( (temp___result_895 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_895 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_896 : int.
   ( (temp___result_896 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_896 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12054] ( ((epsilon temp___result_897 : bool.
   ( (temp___result_897 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_897 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_898 : bool.
   ( (temp___result_898 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_898 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at spark-text_io.ads:589, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val put__2 
   (item : int) : unit
  requires {  ( [@GP_Pretty_Ada:32441] ((epsilon temp___result_899 : int.
   ( (temp___result_899 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_899 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:12104] ((epsilon temp___result_900 : bool.
   ( (temp___result_900 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_900 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12110] ((epsilon temp___result_901 : int.
   ( (temp___result_901 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_901 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:12116] ((let temp___907 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_903 : Standard__string.string.
   ( (temp___result_903 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_903 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___906 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_902 : Standard__string.string.
   ( (temp___result_902 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_902 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___906) (Standard__string.first temp___906) (Standard__string.last temp___906) (Standard__string.to_array temp___907) (Standard__string.first temp___907) (Standard__string.last temp___907))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12126] ((let temp___913 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_909 : Standard__string.string.
   ( (temp___result_909 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_909 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___912 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_908 : Standard__string.string.
   ( (temp___result_908 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_908 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___912) (Standard__string.first temp___912) (Standard__string.last temp___912) (Standard__string.to_array temp___913) (Standard__string.first temp___913) (Standard__string.last temp___913))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12136] ((epsilon temp___result_914 : int.
   ( (temp___result_914 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_914 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_915 : int.
   ( (temp___result_915 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_915 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12146] ((epsilon temp___result_916 : int.
   ( (temp___result_916 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_916 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_917 : int.
   ( (temp___result_917 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_917 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12154] ((epsilon temp___result_918 : bool.
   ( (temp___result_918 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_918 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead" defined at spark-text_io.ads:605, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__look_ahead___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val look_ahead 
   (file : Spark__text_io__file_type.file_type__ref) (item__split_fields : Spark__text_io__character_result.__split_fields__ref) (item__split_discrs : Spark__text_io__character_result.__split_discrs__ref) (item__attr__constrained : bool) (end_of_line : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:32528] ((epsilon temp___result_919 : bool.
   ( (temp___result_919 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_919 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:12205] ((epsilon temp___result_920 : bool.
   ( (temp___result_920 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_920 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12211] ((let temp___926 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_922 : Standard__string.string.
   ( (temp___result_922 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_922 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___925 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_921 : Standard__string.string.
   ( (temp___result_921 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_921 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___925) (Standard__string.first temp___925) (Standard__string.last temp___925) (Standard__string.to_array temp___926) (Standard__string.first temp___926) (Standard__string.last temp___926))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12221] ((let temp___932 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_928 : Standard__string.string.
   ( (temp___result_928 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_928 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___931 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_927 : Standard__string.string.
   ( (temp___result_927 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_927 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___931) (Standard__string.first temp___931) (Standard__string.last temp___931) (Standard__string.to_array temp___932) (Standard__string.first temp___932) (Standard__string.last temp___932))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12231] ( ((epsilon temp___result_933 : bool.
   ( (temp___result_933 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_933 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_934 : bool.
   ( (temp___result_934 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_934 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ ( (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) /\ (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained } True True True True) ) ) }
  writes {file, item__split_fields, item__split_discrs, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead__2" defined at spark-text_io.ads:615, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__look_ahead__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val look_ahead__2 
   (item__split_fields : Spark__text_io__character_result.__split_fields__ref) (item__split_discrs : Spark__text_io__character_result.__split_discrs__ref) (item__attr__constrained : bool) (end_of_line : bool__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:12275] ((epsilon temp___result_936 : bool.
   ( (temp___result_936 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_936 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12281] ((let temp___942 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_938 : Standard__string.string.
   ( (temp___result_938 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_938 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___941 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_937 : Standard__string.string.
   ( (temp___result_937 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_937 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___941) (Standard__string.first temp___941) (Standard__string.last temp___941) (Standard__string.to_array temp___942) (Standard__string.first temp___942) (Standard__string.last temp___942))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12291] ((let temp___948 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_944 : Standard__string.string.
   ( (temp___result_944 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_944 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___947 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_943 : Standard__string.string.
   ( (temp___result_943 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_943 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___947) (Standard__string.first temp___947) (Standard__string.last temp___947) (Standard__string.to_array temp___948) (Standard__string.first temp___948) (Standard__string.last temp___948))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12299] ((epsilon temp___result_949 : bool.
   ( (temp___result_949 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_949 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item__split_fields, item__split_discrs, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate" defined at spark-text_io.ads:623, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get_immediate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_immediate 
   (file : Spark__text_io__file_type.file_type__ref) (item__split_fields : Spark__text_io__character_result.__split_fields__ref) (item__split_discrs : Spark__text_io__character_result.__split_discrs__ref) (item__attr__constrained : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:12336] ((epsilon temp___result_951 : bool.
   ( (temp___result_951 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_951 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12338] not ( ((epsilon temp___result_952 : bool.
   ( (temp___result_952 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_952 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:12347] ((epsilon temp___result_953 : bool.
   ( (temp___result_953 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_953 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12353] ((let temp___959 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_955 : Standard__string.string.
   ( (temp___result_955 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_955 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___958 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_954 : Standard__string.string.
   ( (temp___result_954 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_954 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___958) (Standard__string.first temp___958) (Standard__string.last temp___958) (Standard__string.to_array temp___959) (Standard__string.first temp___959) (Standard__string.last temp___959))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12363] ((let temp___965 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_961 : Standard__string.string.
   ( (temp___result_961 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_961 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___964 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_960 : Standard__string.string.
   ( (temp___result_960 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_960 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___964) (Standard__string.first temp___964) (Standard__string.last temp___964) (Standard__string.to_array temp___965) (Standard__string.first temp___965) (Standard__string.last temp___965))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12373] ( ((epsilon temp___result_966 : bool.
   ( (temp___result_966 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_966 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_967 : bool.
   ( (temp___result_967 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_967 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ ( (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) /\ (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained } True True True True) ) ) }
  writes {file, item__split_fields, item__split_discrs}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__2" defined at spark-text_io.ads:632, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get_immediate__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_immediate__2 
   (item__split_fields : Spark__text_io__character_result.__split_fields__ref) (item__split_discrs : Spark__text_io__character_result.__split_discrs__ref) (item__attr__constrained : bool) : unit
  requires {  ( ( [@GP_Pretty_Ada:12408] ((epsilon temp___result_969 : bool.
   ( (temp___result_969 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_969 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12410] not ( ((epsilon temp___result_970 : bool.
   ( (temp___result_970 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_970 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:12417] ((epsilon temp___result_971 : bool.
   ( (temp___result_971 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_971 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12423] ((let temp___977 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_973 : Standard__string.string.
   ( (temp___result_973 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_973 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___976 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_972 : Standard__string.string.
   ( (temp___result_972 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_972 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___976) (Standard__string.first temp___976) (Standard__string.last temp___976) (Standard__string.to_array temp___977) (Standard__string.first temp___977) (Standard__string.last temp___977))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12433] ((let temp___983 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_979 : Standard__string.string.
   ( (temp___result_979 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_979 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___982 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_978 : Standard__string.string.
   ( (temp___result_978 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_978 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___982) (Standard__string.first temp___982) (Standard__string.last temp___982) (Standard__string.to_array temp___983) (Standard__string.first temp___983) (Standard__string.last temp___983))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12441] ((epsilon temp___result_984 : bool.
   ( (temp___result_984 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_984 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = item__attr__constrained } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item__split_fields, item__split_discrs}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__3" defined at spark-text_io.ads:641, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get_immediate__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result
 use        Spark__text_io__immediate_result___axiom as Spark__text_io__immediate_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_immediate__3 
   (file : Spark__text_io__file_type.file_type__ref) (item__split_fields : Spark__text_io__immediate_result.__split_fields__ref) (item__split_discrs : Spark__text_io__immediate_result.__split_discrs__ref) (item__attr__constrained : bool) (available : bool__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:12487] ((epsilon temp___result_986 : bool.
   ( (temp___result_986 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_986 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12489] not ( ((epsilon temp___result_987 : bool.
   ( (temp___result_987 = (Spark__text_io__end_of_file.end_of_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_987 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:12498] ((epsilon temp___result_988 : bool.
   ( (temp___result_988 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_988 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12504] ((let temp___994 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_990 : Standard__string.string.
   ( (temp___result_990 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_990 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___993 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_989 : Standard__string.string.
   ( (temp___result_989 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_989 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___993) (Standard__string.first temp___993) (Standard__string.last temp___993) (Standard__string.to_array temp___994) (Standard__string.first temp___994) (Standard__string.last temp___994))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12514] ((let temp___1000 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_996 : Standard__string.string.
   ( (temp___result_996 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_996 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___999 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_995 : Standard__string.string.
   ( (temp___result_995 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_995 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___999) (Standard__string.first temp___999) (Standard__string.last temp___999) (Standard__string.to_array temp___1000) (Standard__string.first temp___1000) (Standard__string.last temp___1000))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12524] ( ((epsilon temp___result_1001 : bool.
   ( (temp___result_1001 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1001 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_1002 : bool.
   ( (temp___result_1002 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1002 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ ( (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) /\ (Spark__text_io__immediate_result___axiom.dynamic_invariant { Spark__text_io__immediate_result.__split_fields = item__split_fields.Spark__text_io__immediate_result.__split_fields__content; Spark__text_io__immediate_result.__split_discrs = item__split_discrs.Spark__text_io__immediate_result.__split_discrs__content; Spark__text_io__immediate_result.attr__constrained = item__attr__constrained } True True True True) ) ) }
  writes {file, item__split_fields, item__split_discrs, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__4" defined at spark-text_io.ads:651, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get_immediate__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result
 use        Spark__text_io__immediate_result___axiom as Spark__text_io__immediate_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_immediate__4 
   (item__split_fields : Spark__text_io__immediate_result.__split_fields__ref) (item__split_discrs : Spark__text_io__immediate_result.__split_discrs__ref) (item__attr__constrained : bool) (available : bool__ref) : unit
  requires {  ( ( [@GP_Pretty_Ada:12568] ((epsilon temp___result_1005 : bool.
   ( (temp___result_1005 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1005 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12570] not ( ((epsilon temp___result_1006 : bool.
   ( (temp___result_1006 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_1006 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:12577] ((epsilon temp___result_1007 : bool.
   ( (temp___result_1007 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1007 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12583] ((let temp___1013 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1009 : Standard__string.string.
   ( (temp___result_1009 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1009 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1012 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1008 : Standard__string.string.
   ( (temp___result_1008 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1008 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1012) (Standard__string.first temp___1012) (Standard__string.last temp___1012) (Standard__string.to_array temp___1013) (Standard__string.first temp___1013) (Standard__string.last temp___1013))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12593] ((let temp___1019 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1015 : Standard__string.string.
   ( (temp___result_1015 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1015 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1018 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1014 : Standard__string.string.
   ( (temp___result_1014 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1014 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1018) (Standard__string.first temp___1018) (Standard__string.last temp___1018) (Standard__string.to_array temp___1019) (Standard__string.first temp___1019) (Standard__string.last temp___1019))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12601] ((epsilon temp___result_1020 : bool.
   ( (temp___result_1020 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_1020 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( (Spark__text_io__immediate_result___axiom.dynamic_invariant { Spark__text_io__immediate_result.__split_fields = item__split_fields.Spark__text_io__immediate_result.__split_fields__content; Spark__text_io__immediate_result.__split_discrs = item__split_discrs.Spark__text_io__immediate_result.__split_discrs__content; Spark__text_io__immediate_result.attr__constrained = item__attr__constrained } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item__split_fields, item__split_discrs, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at spark-text_io.ads:663, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get__3 
   (file : Spark__text_io__file_type.file_type__ref) (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires {  ( [@GP_Pretty_Ada:32929] ((epsilon temp___result_1023 : bool.
   ( (temp___result_1023 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1023 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( [@GP_Pretty_Ada:12643] ((epsilon temp___result_1024 : bool.
   ( (temp___result_1024 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1024 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12649] ((let temp___1030 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1026 : Standard__string.string.
   ( (temp___result_1026 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1026 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1029 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1025 : Standard__string.string.
   ( (temp___result_1025 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1025 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1029) (Standard__string.first temp___1029) (Standard__string.last temp___1029) (Standard__string.to_array temp___1030) (Standard__string.first temp___1030) (Standard__string.last temp___1030))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12659] ((let temp___1036 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1032 : Standard__string.string.
   ( (temp___result_1032 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1032 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1035 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1031 : Standard__string.string.
   ( (temp___result_1031 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1031 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1035) (Standard__string.first temp___1035) (Standard__string.last temp___1035) (Standard__string.to_array temp___1036) (Standard__string.first temp___1036) (Standard__string.last temp___1036))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12669] ( ((epsilon temp___result_1037 : bool.
   ( (temp___result_1037 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1037 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_1038 : bool.
   ( (temp___result_1038 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1038 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (if (((epsilon temp___result_1039 : int.
   ( (temp___result_1039 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1039 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:12684] ((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) >= (0 : int)) )) else (
   ( [@GP_Pretty_Ada:33975] true ))) ) /\ ( (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) /\ (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) ) ) }
  writes {file, item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__4" defined at spark-text_io.ads:674, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get__4 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires {  ( [@GP_Pretty_Ada:33025] ((epsilon temp___result_1042 : int.
   ( (temp___result_1042 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1042 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) }
  ensures {  ( ( ( ( ( ( [@GP_Pretty_Ada:12732] ((epsilon temp___result_1043 : bool.
   ( (temp___result_1043 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1043 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12738] ((let temp___1049 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1045 : Standard__string.string.
   ( (temp___result_1045 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1045 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1048 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1044 : Standard__string.string.
   ( (temp___result_1044 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1044 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1048) (Standard__string.first temp___1048) (Standard__string.last temp___1048) (Standard__string.to_array temp___1049) (Standard__string.first temp___1049) (Standard__string.last temp___1049))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12748] ((let temp___1055 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1051 : Standard__string.string.
   ( (temp___result_1051 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1051 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1054 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1050 : Standard__string.string.
   ( (temp___result_1050 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1050 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1054) (Standard__string.first temp___1054) (Standard__string.last temp___1054) (Standard__string.to_array temp___1055) (Standard__string.first temp___1055) (Standard__string.last temp___1055))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12756] ((epsilon temp___result_1056 : bool.
   ( (temp___result_1056 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_1056 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (if (((epsilon temp___result_1057 : int.
   ( (temp___result_1057 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1057 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( [@GP_Pretty_Ada:12767] ((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) >= (0 : int)) )) else (
   ( [@GP_Pretty_Ada:33983] true ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at spark-text_io.ads:686, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__put__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val put__3 
   (file : Spark__text_io__file_type.file_type__ref) (item : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:12805] ((epsilon temp___result_1060 : bool.
   ( (temp___result_1060 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1060 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12811] ((epsilon temp___result_1061 : int.
   ( (temp___result_1061 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1061 file.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) }
  ensures {  ( ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:12817] ((epsilon temp___result_1062 : bool.
   ( (temp___result_1062 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1062 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12821] ((epsilon temp___result_1063 : bool.
   ( (temp___result_1063 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1063 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:12827] ((epsilon temp___result_1064 : int.
   ( (temp___result_1064 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1064 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1065 : int.
   ( (temp___result_1065 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1065 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12837] ((let temp___1071 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1067 : Standard__string.string.
   ( (temp___result_1067 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1067 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1070 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1066 : Standard__string.string.
   ( (temp___result_1066 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1066 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1070) (Standard__string.first temp___1070) (Standard__string.last temp___1070) (Standard__string.to_array temp___1071) (Standard__string.first temp___1071) (Standard__string.last temp___1071))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12847] ((let temp___1077 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1073 : Standard__string.string.
   ( (temp___result_1073 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1073 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1076 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1072 : Standard__string.string.
   ( (temp___result_1072 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1072 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1076) (Standard__string.first temp___1076) (Standard__string.last temp___1076) (Standard__string.to_array temp___1077) (Standard__string.first temp___1077) (Standard__string.last temp___1077))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12857] ((epsilon temp___result_1078 : int.
   ( (temp___result_1078 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1078 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1079 : int.
   ( (temp___result_1079 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1079 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12867] ((epsilon temp___result_1080 : int.
   ( (temp___result_1080 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1080 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1081 : int.
   ( (temp___result_1081 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1081 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12877] ( ((epsilon temp___result_1082 : bool.
   ( (temp___result_1082 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1082 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_1083 : bool.
   ( (temp___result_1083 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1083 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at spark-text_io.ads:698, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val put__4 
   (item : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:33220] ((epsilon temp___result_1085 : int.
   ( (temp___result_1085 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1085 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:12927] ((epsilon temp___result_1086 : bool.
   ( (temp___result_1086 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1086 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12933] ((epsilon temp___result_1087 : int.
   ( (temp___result_1087 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1087 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:12939] ((let temp___1093 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1089 : Standard__string.string.
   ( (temp___result_1089 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1089 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1092 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1088 : Standard__string.string.
   ( (temp___result_1088 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1088 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1092) (Standard__string.first temp___1092) (Standard__string.last temp___1092) (Standard__string.to_array temp___1093) (Standard__string.first temp___1093) (Standard__string.last temp___1093))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12949] ((let temp___1099 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1095 : Standard__string.string.
   ( (temp___result_1095 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1095 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1098 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1094 : Standard__string.string.
   ( (temp___result_1094 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1094 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1098) (Standard__string.first temp___1098) (Standard__string.last temp___1098) (Standard__string.to_array temp___1099) (Standard__string.first temp___1099) (Standard__string.last temp___1099))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:12959] ((epsilon temp___result_1100 : int.
   ( (temp___result_1100 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1100 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1101 : int.
   ( (temp___result_1101 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1101 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12969] ((epsilon temp___result_1102 : int.
   ( (temp___result_1102 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1102 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1103 : int.
   ( (temp___result_1103 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1103 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:12977] ((epsilon temp___result_1104 : bool.
   ( (temp___result_1104 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_1104 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at spark-text_io.ads:717, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_line 
   (file : Spark__text_io__file_type.file_type__ref) (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  ( [@GP_Pretty_Ada:33307] ((epsilon temp___result_1106 : bool.
   ( (temp___result_1106 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1106 file.Spark__text_io__file_type.file_type__content) )) = True) ) }
  ensures {  ( ( ( ( ( ( [@GP_Pretty_Ada:13028] ((epsilon temp___result_1107 : bool.
   ( (temp___result_1107 = (Spark__text_io__is_readable.is_readable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1107 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:13034] ((let temp___1113 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1109 : Standard__string.string.
   ( (temp___result_1109 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1109 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1112 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1108 : Standard__string.string.
   ( (temp___result_1108 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1108 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1112) (Standard__string.first temp___1112) (Standard__string.last temp___1112) (Standard__string.to_array temp___1113) (Standard__string.first temp___1113) (Standard__string.last temp___1113))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13044] ((let temp___1119 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1115 : Standard__string.string.
   ( (temp___result_1115 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1115 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1118 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1114 : Standard__string.string.
   ( (temp___result_1114 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1114 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1118) (Standard__string.first temp___1118) (Standard__string.last temp___1118) (Standard__string.to_array temp___1119) (Standard__string.first temp___1119) (Standard__string.last temp___1119))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13054] ( ((epsilon temp___result_1120 : bool.
   ( (temp___result_1120 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1120 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_1121 : bool.
   ( (temp___result_1121 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1121 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (if (((epsilon temp___result_1122 : int.
   ( (temp___result_1122 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1122 file.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( ( [@GP_Pretty_Ada:13067] (last.int__content >= ((Standard__integer__rep.to_rep item__first) - (1 : int))) ) /\ ( [@GP_Pretty_Ada:13075] (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:13080] (last.int__content = (0 : int)) ))) ) /\ ( ( (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) /\ (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) ) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  writes {file, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at spark-text_io.ads:732, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_input as Spark__text_io__is_standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( ( ( [@GP_Pretty_Ada:13135] ((epsilon temp___result_1125 : bool.
   ( (temp___result_1125 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1125 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:13141] ((let temp___1131 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1127 : Standard__string.string.
   ( (temp___result_1127 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1127 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1130 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1126 : Standard__string.string.
   ( (temp___result_1126 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1126 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1130) (Standard__string.first temp___1130) (Standard__string.last temp___1130) (Standard__string.to_array temp___1131) (Standard__string.first temp___1131) (Standard__string.last temp___1131))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13151] ((let temp___1137 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1133 : Standard__string.string.
   ( (temp___result_1133 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1133 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1136 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1132 : Standard__string.string.
   ( (temp___result_1132 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1132 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1136) (Standard__string.first temp___1136) (Standard__string.last temp___1136) (Standard__string.to_array temp___1137) (Standard__string.first temp___1137) (Standard__string.last temp___1137))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13159] ((epsilon temp___result_1138 : bool.
   ( (temp___result_1138 = (Spark__text_io__is_standard_input.is_standard_input Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_input.is_standard_input__function_guard temp___result_1138 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (if (((epsilon temp___result_1139 : int.
   ( (temp___result_1139 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1139 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int))) then (
   ( ( [@GP_Pretty_Ada:13168] (last.int__content >= ((Standard__integer__rep.to_rep item__first) - (1 : int))) ) /\ ( [@GP_Pretty_Ada:13176] (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:13181] (last.int__content = (0 : int)) ))) ) /\ ( ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at spark-text_io.ads:745, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__put_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val put_line 
   (file : Spark__text_io__file_type.file_type__ref) (item : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:13219] ((epsilon temp___result_1142 : bool.
   ( (temp___result_1142 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1142 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:13225] ((epsilon temp___result_1143 : int.
   ( (temp___result_1143 = (Spark__text_io__status.status file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1143 file.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) }
  ensures {  ( ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:13231] ((epsilon temp___result_1144 : bool.
   ( (temp___result_1144 = (Spark__text_io__is_writable.is_writable file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1144 file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:13235] ((epsilon temp___result_1145 : bool.
   ( (temp___result_1145 = (Spark__text_io__is_open.is_open file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1145 file.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:13241] ((epsilon temp___result_1146 : int.
   ( (temp___result_1146 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1146 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1147 : int.
   ( (temp___result_1147 = (Spark__text_io__mode__2.mode__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1147 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:13251] ((let temp___1153 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1149 : Standard__string.string.
   ( (temp___result_1149 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1149 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1152 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1148 : Standard__string.string.
   ( (temp___result_1148 = (Spark__text_io__name.name file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1148 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1152) (Standard__string.first temp___1152) (Standard__string.last temp___1152) (Standard__string.to_array temp___1153) (Standard__string.first temp___1153) (Standard__string.last temp___1153))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13261] ((let temp___1159 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1155 : Standard__string.string.
   ( (temp___result_1155 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1155 file.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1158 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1154 : Standard__string.string.
   ( (temp___result_1154 = (Spark__text_io__form.form file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1154 file.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1158) (Standard__string.first temp___1158) (Standard__string.last temp___1158) (Standard__string.to_array temp___1159) (Standard__string.first temp___1159) (Standard__string.last temp___1159))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13271] ((epsilon temp___result_1160 : int.
   ( (temp___result_1160 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1160 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1161 : int.
   ( (temp___result_1161 = (Spark__text_io__line_length__2.line_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1161 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:13281] ((epsilon temp___result_1162 : int.
   ( (temp___result_1162 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1162 file.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1163 : int.
   ( (temp___result_1163 = (Spark__text_io__page_length__2.page_length__2 file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1163 file.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:13291] ( ((epsilon temp___result_1164 : bool.
   ( (temp___result_1164 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1164 file.Spark__text_io__file_type.file_type__content) )) = True) <-> ((old (epsilon temp___result_1165 : bool.
   ( (temp___result_1165 = (Spark__text_io__is_standard_file.is_standard_file file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1165 file.Spark__text_io__file_type.file_type__content) )) ) = True) ) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant file.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at spark-text_io.ads:758, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__is_standard_output as Spark__text_io__is_standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:33601] ((epsilon temp___result_1167 : int.
   ( (temp___result_1167 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1167 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) }
  ensures {  ( ( ( ( ( ( ( ( [@GP_Pretty_Ada:13341] ((epsilon temp___result_1168 : bool.
   ( (temp___result_1168 = (Spark__text_io__is_open.is_open Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1168 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:13347] ((epsilon temp___result_1169 : int.
   ( (temp___result_1169 = (Spark__text_io__mode__2.mode__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1169 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:13353] ((let temp___1175 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1171 : Standard__string.string.
   ( (temp___result_1171 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1171 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1174 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1170 : Standard__string.string.
   ( (temp___result_1170 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1170 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1174) (Standard__string.first temp___1174) (Standard__string.last temp___1174) (Standard__string.to_array temp___1175) (Standard__string.first temp___1175) (Standard__string.last temp___1175))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13363] ((let temp___1181 [@mlw:proxy_symbol] [@introduced] = (old (epsilon temp___result_1177 : Standard__string.string.
   ( (temp___result_1177 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1177 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) ) in (
  (let temp___1180 [@mlw:proxy_symbol] [@introduced] = (epsilon temp___result_1176 : Standard__string.string.
   ( (temp___result_1176 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1176 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) in (
   (Array__Int__Standard__character.bool_eq (Standard__string.to_array temp___1180) (Standard__string.first temp___1180) (Standard__string.last temp___1180) (Standard__string.to_array temp___1181) (Standard__string.first temp___1181) (Standard__string.last temp___1181))))
  ))
   = True) ) ) /\ ( [@GP_Pretty_Ada:13373] ((epsilon temp___result_1182 : int.
   ( (temp___result_1182 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1182 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1183 : int.
   ( (temp___result_1183 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1183 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:13383] ((epsilon temp___result_1184 : int.
   ( (temp___result_1184 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1184 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (old (epsilon temp___result_1185 : int.
   ( (temp___result_1185 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1185 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) )) ) ) /\ ( [@GP_Pretty_Ada:13391] ((epsilon temp___result_1186 : bool.
   ( (temp___result_1186 = (Spark__text_io__is_standard_output.is_standard_output Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_output.is_standard_output__function_guard temp___result_1186 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "text_io" defined at spark-text_io.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Spark__text_io__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__standard_error as Spark__text_io__standard_error
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__standard_error___axiom as Spark__text_io__standard_error___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom

 let def [#"spark-text_io.ads" 49 0 0][@GP_Subp:spark-text_io.ads:49] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 49 0 0] true }
  ensures { [#"spark-text_io.ads" 49 0 0] ([#"spark-text_io.ads" 51 0 0] ( [@vc:annotation] [@comment:       Initial_Condition => Is_Readable (Standard_Input) and        ^ spark-text_io.ads:51:8:VC_INITIAL_CONDITION] [@GP_Sloc:spark-text_io.ads:51:8] [@GP_Id:0] [@GP_Reason:VC_INITIAL_CONDITION] ( ( ( ( ( ((epsilon temp___result_1188 : bool.
   ( (temp___result_1188 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1188 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) /\ ((epsilon temp___result_1189 : bool.
   ( (temp___result_1189 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1189 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ((epsilon temp___result_1190 : bool.
   ( (temp___result_1190 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1190 Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ((epsilon temp___result_1191 : int.
   ( (temp___result_1191 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1191 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) /\ ((epsilon temp___result_1192 : int.
   ( (temp___result_1192 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1192 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) /\ ((epsilon temp___result_1193 : int.
   ( (temp___result_1193 = (Spark__text_io__status.status Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1193 Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) )) }
   = [@vc:divergent]
  ( ();
  ([#"spark-text_io.ads" 51 0 0] ());
  ([#"spark-text_io.ads" 50 0 0] ());
  ([#"spark-text_io.ads" 58 0 0] ());
  ([#"spark-text_io.ads" 58 0 0] ());
  ([#"spark-text_io.ads" 59 0 0] ());
  ([#"spark-text_io.ads" 59 0 0] ());
  ([#"spark-text_io.ads" 60 0 0] ());
  ([#"spark-text_io.ads" 60 0 0] ());
  ([#"spark-text_io.ads" 61 0 0] ());
  ([#"spark-text_io.ads" 61 0 0] ());
  ([#"spark-text_io.ads" 62 0 0] ());
  ([#"spark-text_io.ads" 62 0 0] ());
  ([#"spark-text_io.ads" 64 0 0] ());
  ([#"spark-text_io.ads" 65 0 0] ());
  ([#"spark-text_io.ads" 67 0 0] ());
  ([#"spark-text_io.ads" 67 0 0] ());
  ([#"spark-text_io.ads" 71 0 0] ());
  ([#"spark-text_io.ads" 71 0 0] ());
  ([#"spark-text_io.ads" 69 0 0] ());
  ([#"spark-text_io.ads" 76 0 0] ());
  ([#"spark-text_io.ads" 83 0 0] ());
  ([#"spark-text_io.ads" 102 0 0] ());
  ([#"spark-text_io.ads" 102 0 0] ( [#"spark-text_io.ads" 102 0 0] begin ensures {true} let _ = (let _ = ( () ) in (
   ()))
   in () end ;
  [#"spark-text_io.ads" 102 0 0] assume { [#"spark-text_io.ads" 102 0 0] (Spark__text_io__file_type___axiom.default_initial_assumption Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False) };
  [#"spark-text_io.ads" 102 0 0] assume { [#"spark-text_io.ads" 102 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False False True True) } ));
  ([#"spark-text_io.ads" 102 0 0] ( [#"spark-text_io.ads" 102 0 0] begin ensures {true} let _ = (let _ = ( () ) in (
   ()))
   in () end ;
  [#"spark-text_io.ads" 102 0 0] assume { [#"spark-text_io.ads" 102 0 0] (Spark__text_io__file_type___axiom.default_initial_assumption Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False) };
  [#"spark-text_io.ads" 102 0 0] assume { [#"spark-text_io.ads" 102 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False False True True) } ));
  ([#"spark-text_io.ads" 102 0 0] ( [#"spark-text_io.ads" 102 0 0] begin ensures {true} let _ = (let _ = ( () ) in (
   ()))
   in () end ;
  [#"spark-text_io.ads" 102 0 0] assume { [#"spark-text_io.ads" 102 0 0] (Spark__text_io__file_type___axiom.default_initial_assumption Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content False) };
  [#"spark-text_io.ads" 102 0 0] assume { [#"spark-text_io.ads" 102 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content False False True True) } ));
  ([#"spark-text_io.ads" 113 0 0] ());
  ([#"spark-text_io.ads" 116 0 0] ());
  ([#"spark-text_io.ads" 115 0 0] ());
  ([#"spark-text_io.ads" 114 0 0] ());
  ([#"spark-text_io.ads" 119 0 0] ());
  ([#"spark-text_io.ads" 122 0 0] ());
  ([#"spark-text_io.ads" 121 0 0] ());
  ([#"spark-text_io.ads" 120 0 0] ());
  ([#"spark-text_io.ads" 125 0 0] ());
  ([#"spark-text_io.ads" 128 0 0] ());
  ([#"spark-text_io.ads" 127 0 0] ());
  ([#"spark-text_io.ads" 126 0 0] ());
  ([#"spark-text_io.ads" 133 0 0] ());
  ([#"spark-text_io.ads" 134 0 0] ());
  ([#"spark-text_io.ads" 139 0 0] ());
  ([#"spark-text_io.ads" 141 0 0] ());
  ([#"spark-text_io.ads" 140 0 0] ());
  ([#"spark-text_io.ads" 143 0 0] ());
  ([#"spark-text_io.ads" 145 0 0] ());
  ([#"spark-text_io.ads" 144 0 0] ());
  ([#"spark-text_io.ads" 147 0 0] ());
  ([#"spark-text_io.ads" 149 0 0] ());
  ([#"spark-text_io.ads" 148 0 0] ());
  ([#"spark-text_io.ads" 151 0 0] ());
  ([#"spark-text_io.ads" 154 0 0] ());
  ([#"spark-text_io.ads" 153 0 0] ());
  ([#"spark-text_io.ads" 156 0 0] ());
  ([#"spark-text_io.ads" 160 0 0] ());
  ([#"spark-text_io.ads" 159 0 0] ());
  ([#"spark-text_io.ads" 162 0 0] ());
  ([#"spark-text_io.ads" 163 0 0] ());
  ([#"spark-text_io.ads" 165 0 0] ());
  ([#"spark-text_io.ads" 167 0 0] ());
  ([#"spark-text_io.ads" 166 0 0] ());
  ([#"spark-text_io.ads" 172 0 0] ());
  ([#"spark-text_io.ads" 174 0 0] ());
  ([#"spark-text_io.ads" 173 0 0] ());
  ([#"spark-text_io.ads" 176 0 0] ());
  ([#"spark-text_io.ads" 178 0 0] ());
  ([#"spark-text_io.ads" 177 0 0] ());
  ([#"spark-text_io.ads" 181 0 0] ());
  ([#"spark-text_io.ads" 181 0 0] ());
  ([#"spark-text_io.ads" 180 0 0] ());
  ([#"spark-text_io.ads" 182 0 0] ());
  ([#"spark-text_io.ads" 184 0 0] ());
  ([#"spark-text_io.ads" 187 0 0] ());
  ([#"spark-text_io.ads" 191 0 0] ());
  ([#"spark-text_io.ads" 198 0 0] ());
  ([#"spark-text_io.ads" 197 0 0] ());
  ([#"spark-text_io.ads" 196 0 0] ());
  ([#"spark-text_io.ads" 211 0 0] ());
  ([#"spark-text_io.ads" 218 0 0] ());
  ([#"spark-text_io.ads" 217 0 0] ());
  ([#"spark-text_io.ads" 216 0 0] ());
  ([#"spark-text_io.ads" 229 0 0] ());
  ([#"spark-text_io.ads" 233 0 0] ());
  ([#"spark-text_io.ads" 232 0 0] ());
  ([#"spark-text_io.ads" 231 0 0] ());
  ([#"spark-text_io.ads" 235 0 0] ());
  ([#"spark-text_io.ads" 239 0 0] ());
  ([#"spark-text_io.ads" 238 0 0] ());
  ([#"spark-text_io.ads" 237 0 0] ());
  ([#"spark-text_io.ads" 241 0 0] ());
  ([#"spark-text_io.ads" 245 0 0] ());
  ([#"spark-text_io.ads" 244 0 0] ());
  ([#"spark-text_io.ads" 243 0 0] ());
  ([#"spark-text_io.ads" 252 0 0] ());
  ([#"spark-text_io.ads" 256 0 0] ());
  ([#"spark-text_io.ads" 255 0 0] ());
  ([#"spark-text_io.ads" 254 0 0] ());
  ([#"spark-text_io.ads" 272 0 0] ());
  ([#"spark-text_io.ads" 275 0 0] ());
  ([#"spark-text_io.ads" 274 0 0] ());
  ([#"spark-text_io.ads" 273 0 0] ());
  ([#"spark-text_io.ads" 283 0 0] ());
  ([#"spark-text_io.ads" 285 0 0] ());
  ([#"spark-text_io.ads" 284 0 0] ());
  ([#"spark-text_io.ads" 299 0 0] ());
  ([#"spark-text_io.ads" 302 0 0] ());
  ([#"spark-text_io.ads" 301 0 0] ());
  ([#"spark-text_io.ads" 300 0 0] ());
  ([#"spark-text_io.ads" 310 0 0] ());
  ([#"spark-text_io.ads" 312 0 0] ());
  ([#"spark-text_io.ads" 311 0 0] ());
  ([#"spark-text_io.ads" 323 0 0] ());
  ([#"spark-text_io.ads" 326 0 0] ());
  ([#"spark-text_io.ads" 325 0 0] ());
  ([#"spark-text_io.ads" 324 0 0] ());
  ([#"spark-text_io.ads" 333 0 0] ());
  ([#"spark-text_io.ads" 335 0 0] ());
  ([#"spark-text_io.ads" 334 0 0] ());
  ([#"spark-text_io.ads" 345 0 0] ());
  ([#"spark-text_io.ads" 347 0 0] ());
  ([#"spark-text_io.ads" 346 0 0] ());
  ([#"spark-text_io.ads" 349 0 0] ());
  ([#"spark-text_io.ads" 350 0 0] ());
  ([#"spark-text_io.ads" 352 0 0] ());
  ([#"spark-text_io.ads" 354 0 0] ());
  ([#"spark-text_io.ads" 353 0 0] ());
  ([#"spark-text_io.ads" 356 0 0] ());
  ([#"spark-text_io.ads" 357 0 0] ());
  ([#"spark-text_io.ads" 361 0 0] ());
  ([#"spark-text_io.ads" 365 0 0] ());
  ([#"spark-text_io.ads" 364 0 0] ());
  ([#"spark-text_io.ads" 363 0 0] ());
  ([#"spark-text_io.ads" 372 0 0] ());
  ([#"spark-text_io.ads" 374 0 0] ());
  ([#"spark-text_io.ads" 373 0 0] ());
  ([#"spark-text_io.ads" 386 0 0] ());
  ([#"spark-text_io.ads" 390 0 0] ());
  ([#"spark-text_io.ads" 389 0 0] ());
  ([#"spark-text_io.ads" 388 0 0] ());
  ([#"spark-text_io.ads" 395 0 0] ());
  ([#"spark-text_io.ads" 399 0 0] ());
  ([#"spark-text_io.ads" 397 0 0] ());
  ([#"spark-text_io.ads" 396 0 0] ());
  ([#"spark-text_io.ads" 404 0 0] ());
  ([#"spark-text_io.ads" 406 0 0] ());
  ([#"spark-text_io.ads" 405 0 0] ());
  ([#"spark-text_io.ads" 408 0 0] ());
  ([#"spark-text_io.ads" 409 0 0] ());
  ([#"spark-text_io.ads" 411 0 0] ());
  ([#"spark-text_io.ads" 414 0 0] ());
  ([#"spark-text_io.ads" 413 0 0] ());
  ([#"spark-text_io.ads" 412 0 0] ());
  ([#"spark-text_io.ads" 421 0 0] ());
  ([#"spark-text_io.ads" 423 0 0] ());
  ([#"spark-text_io.ads" 422 0 0] ());
  ([#"spark-text_io.ads" 435 0 0] ());
  ([#"spark-text_io.ads" 438 0 0] ());
  ([#"spark-text_io.ads" 437 0 0] ());
  ([#"spark-text_io.ads" 436 0 0] ());
  ([#"spark-text_io.ads" 443 0 0] ());
  ([#"spark-text_io.ads" 447 0 0] ());
  ([#"spark-text_io.ads" 445 0 0] ());
  ([#"spark-text_io.ads" 444 0 0] ());
  ([#"spark-text_io.ads" 452 0 0] ());
  ([#"spark-text_io.ads" 454 0 0] ());
  ([#"spark-text_io.ads" 453 0 0] ());
  ([#"spark-text_io.ads" 456 0 0] ());
  ([#"spark-text_io.ads" 457 0 0] ());
  ([#"spark-text_io.ads" 459 0 0] ());
  ([#"spark-text_io.ads" 461 0 0] ());
  ([#"spark-text_io.ads" 460 0 0] ());
  ([#"spark-text_io.ads" 463 0 0] ());
  ([#"spark-text_io.ads" 465 0 0] ());
  ([#"spark-text_io.ads" 464 0 0] ());
  ([#"spark-text_io.ads" 467 0 0] ());
  ([#"spark-text_io.ads" 472 0 0] ());
  ([#"spark-text_io.ads" 469 0 0] ());
  ([#"spark-text_io.ads" 468 0 0] ());
  ([#"spark-text_io.ads" 482 0 0] ());
  ([#"spark-text_io.ads" 487 0 0] ());
  ([#"spark-text_io.ads" 484 0 0] ());
  ([#"spark-text_io.ads" 483 0 0] ());
  ([#"spark-text_io.ads" 499 0 0] ());
  ([#"spark-text_io.ads" 505 0 0] ());
  ([#"spark-text_io.ads" 501 0 0] ());
  ([#"spark-text_io.ads" 500 0 0] ());
  ([#"spark-text_io.ads" 514 0 0] ());
  ([#"spark-text_io.ads" 519 0 0] ());
  ([#"spark-text_io.ads" 516 0 0] ());
  ([#"spark-text_io.ads" 515 0 0] ());
  ([#"spark-text_io.ads" 531 0 0] ());
  ([#"spark-text_io.ads" 533 0 0] ());
  ([#"spark-text_io.ads" 532 0 0] ());
  ([#"spark-text_io.ads" 535 0 0] ());
  ([#"spark-text_io.ads" 536 0 0] ());
  ([#"spark-text_io.ads" 538 0 0] ());
  ([#"spark-text_io.ads" 540 0 0] ());
  ([#"spark-text_io.ads" 539 0 0] ());
  ([#"spark-text_io.ads" 542 0 0] ());
  ([#"spark-text_io.ads" 543 0 0] ());
  ([#"spark-text_io.ads" 545 0 0] ());
  ([#"spark-text_io.ads" 547 0 0] ());
  ([#"spark-text_io.ads" 546 0 0] ());
  ([#"spark-text_io.ads" 549 0 0] ());
  ([#"spark-text_io.ads" 550 0 0] ());
  ([#"spark-text_io.ads" 554 0 0] ());
  ([#"spark-text_io.ads" 557 0 0] ());
  ([#"spark-text_io.ads" 556 0 0] ());
  ([#"spark-text_io.ads" 555 0 0] ());
  ([#"spark-text_io.ads" 562 0 0] ());
  ([#"spark-text_io.ads" 569 0 0] ());
  ([#"spark-text_io.ads" 566 0 0] ());
  ([#"spark-text_io.ads" 564 0 0] ());
  ([#"spark-text_io.ads" 563 0 0] ());
  ([#"spark-text_io.ads" 577 0 0] ());
  ([#"spark-text_io.ads" 580 0 0] ());
  ([#"spark-text_io.ads" 579 0 0] ());
  ([#"spark-text_io.ads" 578 0 0] ());
  ([#"spark-text_io.ads" 589 0 0] ());
  ([#"spark-text_io.ads" 593 0 0] ());
  ([#"spark-text_io.ads" 592 0 0] ());
  ([#"spark-text_io.ads" 591 0 0] ());
  ([#"spark-text_io.ads" 590 0 0] ());
  ([#"spark-text_io.ads" 605 0 0] ());
  ([#"spark-text_io.ads" 610 0 0] ());
  ([#"spark-text_io.ads" 609 0 0] ());
  ([#"spark-text_io.ads" 608 0 0] ());
  ([#"spark-text_io.ads" 615 0 0] ());
  ([#"spark-text_io.ads" 618 0 0] ());
  ([#"spark-text_io.ads" 617 0 0] ());
  ([#"spark-text_io.ads" 623 0 0] ());
  ([#"spark-text_io.ads" 627 0 0] ());
  ([#"spark-text_io.ads" 626 0 0] ());
  ([#"spark-text_io.ads" 625 0 0] ());
  ([#"spark-text_io.ads" 632 0 0] ());
  ([#"spark-text_io.ads" 636 0 0] ());
  ([#"spark-text_io.ads" 634 0 0] ());
  ([#"spark-text_io.ads" 633 0 0] ());
  ([#"spark-text_io.ads" 641 0 0] ());
  ([#"spark-text_io.ads" 646 0 0] ());
  ([#"spark-text_io.ads" 645 0 0] ());
  ([#"spark-text_io.ads" 644 0 0] ());
  ([#"spark-text_io.ads" 651 0 0] ());
  ([#"spark-text_io.ads" 656 0 0] ());
  ([#"spark-text_io.ads" 654 0 0] ());
  ([#"spark-text_io.ads" 653 0 0] ());
  ([#"spark-text_io.ads" 663 0 0] ());
  ([#"spark-text_io.ads" 667 0 0] ());
  ([#"spark-text_io.ads" 666 0 0] ());
  ([#"spark-text_io.ads" 665 0 0] ());
  ([#"spark-text_io.ads" 674 0 0] ());
  ([#"spark-text_io.ads" 679 0 0] ());
  ([#"spark-text_io.ads" 678 0 0] ());
  ([#"spark-text_io.ads" 676 0 0] ());
  ([#"spark-text_io.ads" 675 0 0] ());
  ([#"spark-text_io.ads" 686 0 0] ());
  ([#"spark-text_io.ads" 689 0 0] ());
  ([#"spark-text_io.ads" 688 0 0] ());
  ([#"spark-text_io.ads" 687 0 0] ());
  ([#"spark-text_io.ads" 698 0 0] ());
  ([#"spark-text_io.ads" 702 0 0] ());
  ([#"spark-text_io.ads" 701 0 0] ());
  ([#"spark-text_io.ads" 700 0 0] ());
  ([#"spark-text_io.ads" 699 0 0] ());
  ([#"spark-text_io.ads" 717 0 0] ());
  ([#"spark-text_io.ads" 722 0 0] ());
  ([#"spark-text_io.ads" 721 0 0] ());
  ([#"spark-text_io.ads" 720 0 0] ());
  ([#"spark-text_io.ads" 732 0 0] ());
  ([#"spark-text_io.ads" 736 0 0] ());
  ([#"spark-text_io.ads" 734 0 0] ());
  ([#"spark-text_io.ads" 733 0 0] ());
  ([#"spark-text_io.ads" 745 0 0] ());
  ([#"spark-text_io.ads" 748 0 0] ());
  ([#"spark-text_io.ads" 747 0 0] ());
  ([#"spark-text_io.ads" 746 0 0] ());
  ([#"spark-text_io.ads" 758 0 0] ());
  ([#"spark-text_io.ads" 762 0 0] ());
  ([#"spark-text_io.ads" 761 0 0] ());
  ([#"spark-text_io.ads" 760 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 759 0 0] ());
  ([#"spark-text_io.ads" 151 0 0] ());
  ([#"spark-text_io.ads" 156 0 0] ());
  ([#"spark-text_io.ads" 180 0 0] ());
  ([#"spark-text_io.ads" 184 0 0] ());
  (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content))) ((Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content))))) ((Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content))))) (((Spark__text_io__status___axiom.status(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) = (1 : int))))) (((Spark__text_io__status___axiom.status(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) = (1 : int))))) (((Spark__text_io__status___axiom.status(Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content)) = (1 : int)))) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_open__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_open__file as Spark__text_io__is_open__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_open__file___axiom as Spark__text_io__is_open__file___axiom

 val spark__text_io__is_open__result [@model_projected] [@name:Is_Open] [@model_trace:9100@result]  : bool__ref 
 
 let def [#"spark-text_io.ads" 162 0 0][@GP_Subp:spark-text_io.ads:162] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 162 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:162 *)
  ;
  [#"spark-text_io.ads" 162 0 0] assume { [#"spark-text_io.ads" 162 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_open__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:162 *)
  ;
  [#"spark-text_io.ads" 162 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:162 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__mode__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2__file as Spark__text_io__mode__2__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2__file___axiom as Spark__text_io__mode__2__file___axiom

 val spark__text_io__mode__2__result [@model_trace:9124@result] [@model_projected] [@name:Mode]  : int__ref 
 
 let def [#"spark-text_io.ads" 165 0 0][@GP_Subp:spark-text_io.ads:165] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 165 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:165 *)
  ;
  [#"spark-text_io.ads" 165 0 0] assume { [#"spark-text_io.ads" 165 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__mode__2__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:165 *)
  ;
  [#"spark-text_io.ads" 165 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_open___axiom.is_open(Spark__text_io__mode__2__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:165 *)
  ;
  [#"spark-text_io.ads" 165 0 0] assume { [#"spark-text_io.ads" 165 0 0] ( [@GP_Pretty_Ada:29650] ((epsilon temp___result_1201 : bool.
   ( (temp___result_1201 = (Spark__text_io__is_open.is_open Spark__text_io__mode__2__file.file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1201 Spark__text_io__mode__2__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_readable__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__is_readable__file as Spark__text_io__is_readable__file
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable__file___axiom as Spark__text_io__is_readable__file___axiom

 val spark__text_io__is_readable__result [@name:Is_Readable] [@model_projected] [@model_trace:9211@result]  : bool__ref 
 
 let def [#"spark-text_io.ads" 180 0 0][@GP_Subp:spark-text_io.ads:180] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 180 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:180 *)
  ;
  [#"spark-text_io.ads" 180 0 0] assume { [#"spark-text_io.ads" 180 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_readable__file.file True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram spark-text_io.ads:180 *)
  ;
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:180 *)
  ;
  [#"spark-text_io.ads" 180 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:180 *)
  ;
  [#"spark-text_io.ads" 180 0 0] try
   ( ();
   ( [@GP_Sloc:spark-text_io.ads:181:7] ([#"spark-text_io.ads" 181 0 0] ()) );
   ( [@GP_Sloc:spark-text_io.ads:181:22] ([#"spark-text_io.ads" 181 0 0] ( [#"spark-text_io.ads" 181 0 0] (spark__text_io__is_readable__result.bool__content <- ( ( (Spark__text_io__is_open___axiom.is_open(Spark__text_io__is_readable__file.file)) && (([#"spark-text_io.ads" 181 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:return__andthen__cmp__call_mode__2] [@GP_Id:1] [@GP_Sloc:spark-text_io.ads:181:31] [@comment:     (Is_Open (File) and then Mode (File) = In_File)                               ^ spark-text_io.ads:181:31:VC_PRECONDITION] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__is_readable__file.file)) )) = (0 : int)) ) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  spark__text_io__is_readable__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__status__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__status__file as Spark__text_io__status__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__status__file___axiom as Spark__text_io__status__file___axiom

 val spark__text_io__status__result [@model_projected] [@model_trace:8930@result] [@name:Status]  : int__ref 
 
 let def [#"spark-text_io.ads" 133 0 0][@GP_Subp:spark-text_io.ads:133] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 133 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:133 *)
  ;
  [#"spark-text_io.ads" 133 0 0] assume { [#"spark-text_io.ads" 133 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__status__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:133 *)
  ;
  [#"spark-text_io.ads" 133 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:133 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init_standard_input" defined at spark-text_io.ads:113, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__init_standard_input__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom

 let def [#"spark-text_io.ads" 113 0 0][@GP_Subp:spark-text_io.ads:113] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 113 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:113 *)
  ;
  [#"spark-text_io.ads" 113 0 0] assume { [#"spark-text_io.ads" 113 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:113 *)
  ;
  [#"spark-text_io.ads" 113 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:113 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_writable__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable__file as Spark__text_io__is_writable__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable__file___axiom as Spark__text_io__is_writable__file___axiom

 val spark__text_io__is_writable__result [@model_projected] [@model_trace:9243@result] [@name:Is_Writable]  : bool__ref 
 
 let def [#"spark-text_io.ads" 184 0 0][@GP_Subp:spark-text_io.ads:184] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 184 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:184 *)
  ;
  [#"spark-text_io.ads" 184 0 0] assume { [#"spark-text_io.ads" 184 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_writable__file.file True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram spark-text_io.ads:184 *)
  ;
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:184 *)
  ;
  [#"spark-text_io.ads" 184 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:184 *)
  ;
  [#"spark-text_io.ads" 184 0 0] try
   ( ();
   ( [@GP_Sloc:spark-text_io.ads:185:7] ([#"spark-text_io.ads" 185 0 0] ()) );
   ( [@GP_Sloc:spark-text_io.ads:185:22] ([#"spark-text_io.ads" 185 0 0] ( [#"spark-text_io.ads" 185 0 0] (spark__text_io__is_writable__result.bool__content <- ( ( (Spark__text_io__is_open___axiom.is_open(Spark__text_io__is_writable__file.file)) && ( (([#"spark-text_io.ads" 186 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:186:12] [@GP_Shape:return__andthen__orelse__cmp__call_mode__2] [@GP_Id:2] [@comment:          (Mode (File) = Out_File or else Mode (File) = Append_File))            ^ spark-text_io.ads:186:12:VC_PRECONDITION] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__is_writable__file.file)) )) = (1 : int)) || (([#"spark-text_io.ads" 186 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:186:43] [@comment:          (Mode (File) = Out_File or else Mode (File) = Append_File))                                           ^ spark-text_io.ads:186:43:VC_PRECONDITION] [@GP_Shape:return__andthen__orelse__cmp__call_mode__2] [@GP_Id:3] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__is_writable__file.file)) )) = (2 : int)) ) ) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  spark__text_io__is_writable__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init_standard_output" defined at spark-text_io.ads:119, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__init_standard_output__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom

 let def [#"spark-text_io.ads" 119 0 0][@GP_Subp:spark-text_io.ads:119] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 119 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:119 *)
  ;
  [#"spark-text_io.ads" 119 0 0] assume { [#"spark-text_io.ads" 119 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:119 *)
  ;
  [#"spark-text_io.ads" 119 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:119 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init_standard_error" defined at spark-text_io.ads:125, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__init_standard_error__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_error as Spark__text_io__standard_error
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_error___axiom as Spark__text_io__standard_error___axiom

 let def [#"spark-text_io.ads" 125 0 0][@GP_Subp:spark-text_io.ads:125] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 125 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:125 *)
  ;
  [#"spark-text_io.ads" 125 0 0] assume { [#"spark-text_io.ads" 125 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_error.standard_error.Spark__text_io__file_type.file_type__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:125 *)
  ;
  [#"spark-text_io.ads" 125 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:125 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_standard_input" defined at spark-text_io.ads:139, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_standard_input__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_standard_input__file as Spark__text_io__is_standard_input__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_input__file___axiom as Spark__text_io__is_standard_input__file___axiom

 val spark__text_io__is_standard_input__result [@model_projected] [@model_trace:8954@result] [@name:Is_Standard_Input]  : bool__ref 
 
 let def [#"spark-text_io.ads" 139 0 0][@GP_Subp:spark-text_io.ads:139] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 139 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:139 *)
  ;
  [#"spark-text_io.ads" 139 0 0] assume { [#"spark-text_io.ads" 139 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_standard_input__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:139 *)
  ;
  [#"spark-text_io.ads" 139 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:139 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_standard_output" defined at spark-text_io.ads:143, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_standard_output__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_standard_output__file as Spark__text_io__is_standard_output__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_output__file___axiom as Spark__text_io__is_standard_output__file___axiom

 val spark__text_io__is_standard_output__result [@model_projected] [@name:Is_Standard_Output] [@model_trace:8980@result]  : bool__ref 
 
 let def [#"spark-text_io.ads" 143 0 0][@GP_Subp:spark-text_io.ads:143] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 143 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:143 *)
  ;
  [#"spark-text_io.ads" 143 0 0] assume { [#"spark-text_io.ads" 143 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_standard_output__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:143 *)
  ;
  [#"spark-text_io.ads" 143 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:143 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_standard_error" defined at spark-text_io.ads:147, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_standard_error__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_standard_error__file as Spark__text_io__is_standard_error__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_error__file___axiom as Spark__text_io__is_standard_error__file___axiom

 val spark__text_io__is_standard_error__result [@model_projected] [@model_trace:9006@result] [@name:Is_Standard_Error]  : bool__ref 
 
 let def [#"spark-text_io.ads" 147 0 0][@GP_Subp:spark-text_io.ads:147] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 147 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:147 *)
  ;
  [#"spark-text_io.ads" 147 0 0] assume { [#"spark-text_io.ads" 147 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_standard_error__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:147 *)
  ;
  [#"spark-text_io.ads" 147 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:147 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_standard_writable" defined at spark-text_io.ads:151, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_standard_writable__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_writable__file as Spark__text_io__is_standard_writable__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_writable__file___axiom as Spark__text_io__is_standard_writable__file___axiom

 val spark__text_io__is_standard_writable__result [@model_projected] [@model_trace:9032@result] [@name:Is_Standard_Writable]  : bool__ref 
 
 let def [#"spark-text_io.ads" 151 0 0][@GP_Subp:spark-text_io.ads:151] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 151 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:151 *)
  ;
  [#"spark-text_io.ads" 151 0 0] assume { [#"spark-text_io.ads" 151 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_standard_writable__file.file True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram spark-text_io.ads:151 *)
  ;
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:151 *)
  ;
  [#"spark-text_io.ads" 151 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:151 *)
  ;
  [#"spark-text_io.ads" 151 0 0] try
   ( ();
   ( [@GP_Sloc:spark-text_io.ads:152:7] ([#"spark-text_io.ads" 152 0 0] ()) );
   ( [@GP_Sloc:spark-text_io.ads:152:33] ([#"spark-text_io.ads" 152 0 0] ( [#"spark-text_io.ads" 152 0 0] (spark__text_io__is_standard_writable__result.bool__content <- ( ( (Spark__text_io__is_standard_output___axiom.is_standard_output(Spark__text_io__is_standard_writable__file.file)) || (Spark__text_io__is_standard_error___axiom.is_standard_error(Spark__text_io__is_standard_writable__file.file)) ) ));
   [#"spark-text_io.ads" 152 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  spark__text_io__is_standard_writable__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_standard_file" defined at spark-text_io.ads:156, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__is_standard_file__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file__file as Spark__text_io__is_standard_file__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file__file___axiom as Spark__text_io__is_standard_file__file___axiom

 val spark__text_io__is_standard_file__result [@model_projected] [@name:Is_Standard_File] [@model_trace:9064@result]  : bool__ref 
 
 let def [#"spark-text_io.ads" 156 0 0][@GP_Subp:spark-text_io.ads:156] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 156 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:156 *)
  ;
  [#"spark-text_io.ads" 156 0 0] assume { [#"spark-text_io.ads" 156 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__is_standard_file__file.file True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram spark-text_io.ads:156 *)
  ;
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:156 *)
  ;
  [#"spark-text_io.ads" 156 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:156 *)
  ;
  [#"spark-text_io.ads" 156 0 0] try
   ( ();
   ( [@GP_Sloc:spark-text_io.ads:157:7] ([#"spark-text_io.ads" 157 0 0] ()) );
   ( [@GP_Sloc:spark-text_io.ads:158:11] ([#"spark-text_io.ads" 158 0 0] ( [#"spark-text_io.ads" 158 0 0] (spark__text_io__is_standard_file__result.bool__content <- ( ( ( (Spark__text_io__is_standard_input___axiom.is_standard_input(Spark__text_io__is_standard_file__file.file)) || (Spark__text_io__is_standard_output___axiom.is_standard_output(Spark__text_io__is_standard_file__file.file)) ) || (Spark__text_io__is_standard_error___axiom.is_standard_error(Spark__text_io__is_standard_file__file.file)) ) ));
   [#"spark-text_io.ads" 158 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  spark__text_io__is_standard_file__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "name" defined at spark-text_io.ads:172, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__name__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__name__file as Spark__text_io__name__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__name__file___axiom as Spark__text_io__name__file___axiom

 val spark__text_io__name__result [@name:Name] [@model_trace:9153@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"spark-text_io.ads" 172 0 0][@GP_Subp:spark-text_io.ads:172] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 172 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:172 *)
  ;
  [#"spark-text_io.ads" 172 0 0] assume { [#"spark-text_io.ads" 172 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__name__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:172 *)
  ;
  [#"spark-text_io.ads" 172 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_open___axiom.is_open(Spark__text_io__name__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:172 *)
  ;
  [#"spark-text_io.ads" 172 0 0] assume { [#"spark-text_io.ads" 172 0 0] ( [@GP_Pretty_Ada:29674] ((epsilon temp___result_1202 : bool.
   ( (temp___result_1202 = (Spark__text_io__is_open.is_open Spark__text_io__name__file.file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1202 Spark__text_io__name__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "form" defined at spark-text_io.ads:176, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__form__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__form__file as Spark__text_io__form__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__form__file___axiom as Spark__text_io__form__file___axiom

 val spark__text_io__form__result [@model_trace:9182@result] [@model_projected] [@name:Form]  : Standard__string.string__ref 
 
 let def [#"spark-text_io.ads" 176 0 0][@GP_Subp:spark-text_io.ads:176] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 176 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:176 *)
  ;
  [#"spark-text_io.ads" 176 0 0] assume { [#"spark-text_io.ads" 176 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__form__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:176 *)
  ;
  [#"spark-text_io.ads" 176 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_open___axiom.is_open(Spark__text_io__form__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:176 *)
  ;
  [#"spark-text_io.ads" 176 0 0] assume { [#"spark-text_io.ads" 176 0 0] ( [@GP_Pretty_Ada:29698] ((epsilon temp___result_1203 : bool.
   ( (temp___result_1203 = (Spark__text_io__is_open.is_open Spark__text_io__form__file.file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1203 Spark__text_io__form__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "line_length__2" defined at spark-text_io.ads:345, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__line_length__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2__file as Spark__text_io__line_length__2__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2__file___axiom as Spark__text_io__line_length__2__file___axiom

 val spark__text_io__line_length__2__result [@model_trace:10287@result] [@model_projected] [@name:Line_Length]  : int__ref 
 
 let def [#"spark-text_io.ads" 345 0 0][@GP_Subp:spark-text_io.ads:345] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 345 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:345 *)
  ;
  [#"spark-text_io.ads" 345 0 0] assume { [#"spark-text_io.ads" 345 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__line_length__2__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:345 *)
  ;
  [#"spark-text_io.ads" 345 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__line_length__2__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:345 *)
  ;
  [#"spark-text_io.ads" 345 0 0] assume { [#"spark-text_io.ads" 345 0 0] ( [@GP_Pretty_Ada:30744] ((epsilon temp___result_1204 : bool.
   ( (temp___result_1204 = (Spark__text_io__is_writable.is_writable Spark__text_io__line_length__2__file.file)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1204 Spark__text_io__line_length__2__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "page_length__2" defined at spark-text_io.ads:352, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__page_length__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__page_length__2__file as Spark__text_io__page_length__2__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__page_length__2__file___axiom as Spark__text_io__page_length__2__file___axiom

 val spark__text_io__page_length__2__result [@model_projected] [@name:Page_Length] [@model_trace:10331@result]  : int__ref 
 
 let def [#"spark-text_io.ads" 352 0 0][@GP_Subp:spark-text_io.ads:352] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 352 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:352 *)
  ;
  [#"spark-text_io.ads" 352 0 0] assume { [#"spark-text_io.ads" 352 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__page_length__2__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:352 *)
  ;
  [#"spark-text_io.ads" 352 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__page_length__2__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:352 *)
  ;
  [#"spark-text_io.ads" 352 0 0] assume { [#"spark-text_io.ads" 352 0 0] ( [@GP_Pretty_Ada:30777] ((epsilon temp___result_1205 : bool.
   ( (temp___result_1205 = (Spark__text_io__is_writable.is_writable Spark__text_io__page_length__2__file.file)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1205 Spark__text_io__page_length__2__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "create__2" defined at spark-text_io.ads:191, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__create__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__create__2__the_file as Spark__text_io__create__2__the_file
 use        Spark__text_io__create__2__the_mode as Spark__text_io__create__2__the_mode
 use        Spark__text_io__create__2__the_name as Spark__text_io__create__2__the_name
 use        Spark__text_io__create__2__the_form as Spark__text_io__create__2__the_form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__create__2__the_file___axiom as Spark__text_io__create__2__the_file___axiom
 use        Spark__text_io__create__2__the_mode___axiom as Spark__text_io__create__2__the_mode___axiom
 use        Spark__text_io__create__2__the_name___axiom as Spark__text_io__create__2__the_name___axiom
 use        Spark__text_io__create__2__the_form___axiom as Spark__text_io__create__2__the_form___axiom

 let def [#"spark-text_io.ads" 191 0 0][@GP_Subp:spark-text_io.ads:191] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 191 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:191 *)
  ;
  [#"spark-text_io.ads" 191 0 0] assume { [#"spark-text_io.ads" 191 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__create__2__the_file.the_file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 191 0 0] assume { [#"spark-text_io.ads" 191 0 0] (Spark__text_io__file_mode___axiom.dynamic_invariant Spark__text_io__create__2__the_mode.the_mode True False True True) };
  [#"spark-text_io.ads" 191 0 0] assume { [#"spark-text_io.ads" 191 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__create__2__the_name.the_name True False True True) };
  [#"spark-text_io.ads" 191 0 0] assume { [#"spark-text_io.ads" 191 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__create__2__the_form.the_form True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:191 *)
  ;
  [#"spark-text_io.ads" 191 0 0] begin ensures {true} let _ = (let _ = not ( (Spark__text_io__is_open___axiom.is_open(Spark__text_io__create__2__the_file.the_file.Spark__text_io__file_type.file_type__content)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:191 *)
  ;
  [#"spark-text_io.ads" 191 0 0] assume { [#"spark-text_io.ads" 191 0 0] ( [@GP_Pretty_Ada:29790] not ( ((epsilon temp___result_1214 : bool.
   ( (temp___result_1214 = (Spark__text_io__is_open.is_open Spark__text_io__create__2__the_file.the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1214 Spark__text_io__create__2__the_file.the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "open__2" defined at spark-text_io.ads:211, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__open__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__open__2__the_file as Spark__text_io__open__2__the_file
 use        Spark__text_io__open__2__the_mode as Spark__text_io__open__2__the_mode
 use        Spark__text_io__open__2__the_name as Spark__text_io__open__2__the_name
 use        Spark__text_io__open__2__the_form as Spark__text_io__open__2__the_form
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__open__2__the_file___axiom as Spark__text_io__open__2__the_file___axiom
 use        Spark__text_io__open__2__the_mode___axiom as Spark__text_io__open__2__the_mode___axiom
 use        Spark__text_io__open__2__the_name___axiom as Spark__text_io__open__2__the_name___axiom
 use        Spark__text_io__open__2__the_form___axiom as Spark__text_io__open__2__the_form___axiom

 let def [#"spark-text_io.ads" 211 0 0][@GP_Subp:spark-text_io.ads:211] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 211 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:211 *)
  ;
  [#"spark-text_io.ads" 211 0 0] assume { [#"spark-text_io.ads" 211 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__open__2__the_file.the_file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 211 0 0] assume { [#"spark-text_io.ads" 211 0 0] (Spark__text_io__file_mode___axiom.dynamic_invariant Spark__text_io__open__2__the_mode.the_mode True False True True) };
  [#"spark-text_io.ads" 211 0 0] assume { [#"spark-text_io.ads" 211 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__open__2__the_name.the_name True False True True) };
  [#"spark-text_io.ads" 211 0 0] assume { [#"spark-text_io.ads" 211 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__open__2__the_form.the_form True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:211 *)
  ;
  [#"spark-text_io.ads" 211 0 0] begin ensures {true} let _ = (let _ = not ( (Spark__text_io__is_open___axiom.is_open(Spark__text_io__open__2__the_file.the_file.Spark__text_io__file_type.file_type__content)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:211 *)
  ;
  [#"spark-text_io.ads" 211 0 0] assume { [#"spark-text_io.ads" 211 0 0] ( [@GP_Pretty_Ada:29877] not ( ((epsilon temp___result_1223 : bool.
   ( (temp___result_1223 = (Spark__text_io__is_open.is_open Spark__text_io__open__2__the_file.the_file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1223 Spark__text_io__open__2__the_file.the_file.Spark__text_io__file_type.file_type__content) )) = True) ) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "close" defined at spark-text_io.ads:229, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__close__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__close__file as Spark__text_io__close__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__close__file___axiom as Spark__text_io__close__file___axiom

 let def [#"spark-text_io.ads" 229 0 0][@GP_Subp:spark-text_io.ads:229] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 229 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:229 *)
  ;
  [#"spark-text_io.ads" 229 0 0] assume { [#"spark-text_io.ads" 229 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:229 *)
  ;
  [#"spark-text_io.ads" 229 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((Spark__text_io__is_open___axiom.is_open(Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content))) (not ( (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content)) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:229 *)
  ;
  [#"spark-text_io.ads" 229 0 0] assume { [#"spark-text_io.ads" 229 0 0] ( ( [@GP_Pretty_Ada:9524] ((epsilon temp___result_1224 : bool.
   ( (temp___result_1224 = (Spark__text_io__is_open.is_open Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1224 Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9526] not ( ((epsilon temp___result_1225 : bool.
   ( (temp___result_1225 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1225 Spark__text_io__close__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "delete" defined at spark-text_io.ads:235, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__delete__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__delete__file as Spark__text_io__delete__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__delete__file___axiom as Spark__text_io__delete__file___axiom

 let def [#"spark-text_io.ads" 235 0 0][@GP_Subp:spark-text_io.ads:235] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 235 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:235 *)
  ;
  [#"spark-text_io.ads" 235 0 0] assume { [#"spark-text_io.ads" 235 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:235 *)
  ;
  [#"spark-text_io.ads" 235 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((Spark__text_io__is_open___axiom.is_open(Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content))) (not ( (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content)) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:235 *)
  ;
  [#"spark-text_io.ads" 235 0 0] assume { [#"spark-text_io.ads" 235 0 0] ( ( [@GP_Pretty_Ada:9570] ((epsilon temp___result_1226 : bool.
   ( (temp___result_1226 = (Spark__text_io__is_open.is_open Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1226 Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9572] not ( ((epsilon temp___result_1227 : bool.
   ( (temp___result_1227 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1227 Spark__text_io__delete__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reset__2" defined at spark-text_io.ads:241, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__reset__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__reset__2__file as Spark__text_io__reset__2__file
 use        Spark__text_io__reset__2__the_mode as Spark__text_io__reset__2__the_mode
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__reset__2__file___axiom as Spark__text_io__reset__2__file___axiom
 use        Spark__text_io__reset__2__the_mode___axiom as Spark__text_io__reset__2__the_mode___axiom

 let def [#"spark-text_io.ads" 241 0 0][@GP_Subp:spark-text_io.ads:241] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 241 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:241 *)
  ;
  [#"spark-text_io.ads" 241 0 0] assume { [#"spark-text_io.ads" 241 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 241 0 0] assume { [#"spark-text_io.ads" 241 0 0] (Spark__text_io__file_mode___axiom.dynamic_invariant Spark__text_io__reset__2__the_mode.the_mode True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:241 *)
  ;
  [#"spark-text_io.ads" 241 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((Spark__text_io__is_open___axiom.is_open(Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content))) (not ( (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) ))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:241 *)
  ;
  [#"spark-text_io.ads" 241 0 0] assume { [#"spark-text_io.ads" 241 0 0] ( ( [@GP_Pretty_Ada:9625] ((epsilon temp___result_1238 : bool.
   ( (temp___result_1238 = (Spark__text_io__is_open.is_open Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1238 Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9627] not ( ((epsilon temp___result_1239 : bool.
   ( (temp___result_1239 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1239 Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
  [#"spark-text_io.ads" 241 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 249 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:249:31] [@GP_Id:18] [@comment:                Form (File) = Form (File)'Old and                               ^ spark-text_io.ads:249:31:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] (Spark__text_io__form___axiom.form(Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1232 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1237 : Standard__string.string.
   ( (temp___result_1237 = (Spark__text_io__form.form Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1237 Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 248 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@GP_Id:17] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:248:31] [@comment:                Name (File) = Name (File)'Old and                               ^ spark-text_io.ads:248:31:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1228 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1236 : Standard__string.string.
    ( (temp___result_1236 = (Spark__text_io__name.name Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1236 Spark__text_io__reset__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reset__3" defined at spark-text_io.ads:252, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__reset__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__reset__3__file as Spark__text_io__reset__3__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__reset__3__file___axiom as Spark__text_io__reset__3__file___axiom

 let def [#"spark-text_io.ads" 252 0 0][@GP_Subp:spark-text_io.ads:252] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 252 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:252 *)
  ;
  [#"spark-text_io.ads" 252 0 0] assume { [#"spark-text_io.ads" 252 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:252 *)
  ;
  [#"spark-text_io.ads" 252 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_open___axiom.is_open(Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) && not ( (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:252 *)
  ;
  [#"spark-text_io.ads" 252 0 0] assume { [#"spark-text_io.ads" 252 0 0] ( ( [@GP_Pretty_Ada:9701] ((epsilon temp___result_1252 : bool.
   ( (temp___result_1252 = (Spark__text_io__is_open.is_open Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1252 Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:9703] not ( ((epsilon temp___result_1253 : bool.
   ( (temp___result_1253 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1253 Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
  [#"spark-text_io.ads" 252 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 259 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:               Form (File) = Form (File)'Old and                              ^ spark-text_io.ads:259:30:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:259:30] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Id:24] (Spark__text_io__form___axiom.form(Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1245 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1251 : Standard__string.string.
   ( (temp___result_1251 = (Spark__text_io__form.form Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1251 Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 258 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@comment:               Name (File) = Name (File)'Old and                              ^ spark-text_io.ads:258:30:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:258:30] [@GP_Id:23] (Spark__text_io__name___axiom.name(Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1241 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1250 : Standard__string.string.
    ( (temp___result_1250 = (Spark__text_io__name.name Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1250 Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 257 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:257:30] [@comment:               Mode (File) = Mode (File)'Old and                              ^ spark-text_io.ads:257:30:VC_PRECONDITION] [@GP_Id:22] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_mode__2] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1240 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1249 : int.
     ( (temp___result_1249 = (Spark__text_io__mode__2.mode__2 Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1249 Spark__text_io__reset__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "flush" defined at spark-text_io.ads:272, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__flush__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__flush__file as Spark__text_io__flush__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__flush__file___axiom as Spark__text_io__flush__file___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom

 let def [#"spark-text_io.ads" 272 0 0][@GP_Subp:spark-text_io.ads:272] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 272 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:272 *)
  ;
  [#"spark-text_io.ads" 272 0 0] assume { [#"spark-text_io.ads" 272 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:272 *)
  ;
  [#"spark-text_io.ads" 272 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:272 *)
  ;
  [#"spark-text_io.ads" 272 0 0] assume { [#"spark-text_io.ads" 272 0 0] ( [@GP_Pretty_Ada:30228] ((epsilon temp___result_1272 : bool.
   ( (temp___result_1272 = (Spark__text_io__is_writable.is_writable Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1272 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 272 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 277 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:34] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:277:33] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:277:33:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1255 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1271 : Standard__string.string.
   ( (temp___result_1271 = (Spark__text_io__name.name Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1271 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 276 0 0] ( [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:276:33] [@vc:annotation] [@GP_Id:33] [@comment:                  Mode (File) = Mode (File)'Old and                                 ^ spark-text_io.ads:276:33:VC_PRECONDITION] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1254 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1270 : int.
    ( (temp___result_1270 = (Spark__text_io__mode__2.mode__2 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1270 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) in (
     ()))
     in () end ;
    (let temp___old_1265 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
    ensures { (result = (epsilon temp___result_1269 : bool.
     ( (temp___result_1269 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1269 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 280 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Page_Length (File) = Page_Length (File)'Old and                                        ^ spark-text_io.ads:280:40:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Id:32] [@GP_Sloc:spark-text_io.ads:280:40] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1264 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1268 : int.
      ( (temp___result_1268 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1268 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 279 0 0] ( [@GP_Sloc:spark-text_io.ads:279:40] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@GP_Id:31] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:279:40:VC_PRECONDITION] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1263 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1267 : int.
       ( (temp___result_1267 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1267 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 278 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:278:33] [@GP_Reason:VC_PRECONDITION] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:278:33:VC_PRECONDITION] [@vc:annotation] [@GP_Id:30] (Spark__text_io__form___axiom.form(Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1259 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
       ensures { (result = (epsilon temp___result_1266 : Standard__string.string.
        ( (temp___result_1266 = (Spark__text_io__form.form Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1266 Spark__text_io__flush__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "flush__2" defined at spark-text_io.ads:283, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__flush__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom

 let def [#"spark-text_io.ads" 283 0 0][@GP_Subp:spark-text_io.ads:283] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 283 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:283 *)
  ;
  [#"spark-text_io.ads" 283 0 0] assume { [#"spark-text_io.ads" 283 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:283 *)
  ;
  [#"spark-text_io.ads" 283 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:283 *)
  ;
  [#"spark-text_io.ads" 283 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 294 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:43] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@comment:                       Page_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:294:24:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:294:24] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1282 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1286 : int.
   ( (temp___result_1286 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1286 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 292 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                       Line_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:292:24:VC_PRECONDITION] [@GP_Id:42] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:292:24] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1281 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1285 : int.
    ( (temp___result_1285 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1285 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 290 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@GP_Id:41] [@GP_Sloc:spark-text_io.ads:290:24] [@vc:annotation] [@comment:                       Form (Standard_Output)'Old and                        ^ spark-text_io.ads:290:24:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1277 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1284 : Standard__string.string.
     ( (temp___result_1284 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1284 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 288 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                       Name (Standard_Output)'Old and                        ^ spark-text_io.ads:288:24:VC_PRECONDITION] [@GP_Id:40] [@GP_Sloc:spark-text_io.ads:288:24] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1273 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1283 : Standard__string.string.
      ( (temp___result_1283 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1283 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_line_length__2" defined at spark-text_io.ads:299, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_line_length__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__set_line_length__2__file as Spark__text_io__set_line_length__2__file
 use        Spark__text_io__set_line_length__2__to as Spark__text_io__set_line_length__2__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__set_line_length__2__file___axiom as Spark__text_io__set_line_length__2__file___axiom
 use        Spark__text_io__set_line_length__2__to___axiom as Spark__text_io__set_line_length__2__to___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom

 let def [#"spark-text_io.ads" 299 0 0][@GP_Subp:spark-text_io.ads:299] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 299 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:299 *)
  ;
  [#"spark-text_io.ads" 299 0 0] assume { [#"spark-text_io.ads" 299 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 299 0 0] assume { [#"spark-text_io.ads" 299 0 0] (Spark__text_io__count___axiom.dynamic_invariant Spark__text_io__set_line_length__2__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:299 *)
  ;
  [#"spark-text_io.ads" 299 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:299 *)
  ;
  [#"spark-text_io.ads" 299 0 0] assume { [#"spark-text_io.ads" 299 0 0] ( [@GP_Pretty_Ada:30396] ((epsilon temp___result_1303 : bool.
   ( (temp___result_1303 = (Spark__text_io__is_writable.is_writable Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1303 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 299 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  (let temp___old_1297 [@mlw:proxy_symbol] [@introduced] = [#"spark-text_io.ads" 299 0 0] (val _f : bool
  ensures {[#"spark-text_io.ads" 299 0 0] (result = (epsilon temp___result_1302 : bool.
   ( (temp___result_1302 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1302 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   ( [#"spark-text_io.ads" 299 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 307 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:307:41] [@vc:annotation] [@comment:                   Page_Length (File) = Page_Length (File)'Old and                                         ^ spark-text_io.ads:307:41:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Id:52] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1296 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1301 : int.
    ( (temp___result_1301 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1301 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 306 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:306:34] [@vc:annotation] [@GP_Id:51] [@comment:                   Form (File) = Form (File)'Old and                                  ^ spark-text_io.ads:306:34:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1292 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1300 : Standard__string.string.
     ( (temp___result_1300 = (Spark__text_io__form.form Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1300 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 305 0 0] ( [@comment:                   Name (File) = Name (File)'Old and                                  ^ spark-text_io.ads:305:34:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:305:34] [@GP_Id:50] (Spark__text_io__name___axiom.name(Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1288 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1299 : Standard__string.string.
      ( (temp___result_1299 = (Spark__text_io__name.name Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1299 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 304 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:304:34] [@vc:annotation] [@GP_Id:49] [@comment:                   Mode (File) = Mode (File)'Old and                                  ^ spark-text_io.ads:304:34:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_mode__2] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1287 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1298 : int.
       ( (temp___result_1298 = (Spark__text_io__mode__2.mode__2 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1298 Spark__text_io__set_line_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       ()))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_line_length__3" defined at spark-text_io.ads:310, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_line_length__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__set_line_length__3__to as Spark__text_io__set_line_length__3__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__set_line_length__3__to___axiom as Spark__text_io__set_line_length__3__to___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom

 let def [#"spark-text_io.ads" 310 0 0][@GP_Subp:spark-text_io.ads:310] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 310 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:310 *)
  ;
  [#"spark-text_io.ads" 310 0 0] assume { [#"spark-text_io.ads" 310 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 310 0 0] assume { [#"spark-text_io.ads" 310 0 0] (Spark__text_io__count___axiom.dynamic_invariant Spark__text_io__set_line_length__3__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:310 *)
  ;
  [#"spark-text_io.ads" 310 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:310 *)
  ;
  [#"spark-text_io.ads" 310 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 319 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@comment:                    Page_Length (Standard_Output)'Old and                     ^ spark-text_io.ads:319:21:VC_PRECONDITION] [@GP_Id:60] [@GP_Sloc:spark-text_io.ads:319:21] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1312 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1315 : int.
   ( (temp___result_1315 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1315 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 317 0 0] ( [@GP_Id:59] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@comment:                    Form (Standard_Output) = Form (Standard_Output)'Old and                                              ^ spark-text_io.ads:317:46:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:317:46] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1308 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1314 : Standard__string.string.
    ( (temp___result_1314 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1314 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 316 0 0] ( [@GP_Sloc:spark-text_io.ads:316:46] [@GP_Id:58] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@comment:                    Name (Standard_Output) = Name (Standard_Output)'Old and                                              ^ spark-text_io.ads:316:46:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1304 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1313 : Standard__string.string.
     ( (temp___result_1313 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1313 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_page_length__2" defined at spark-text_io.ads:323, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_page_length__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__set_page_length__2__file as Spark__text_io__set_page_length__2__file
 use        Spark__text_io__set_page_length__2__to as Spark__text_io__set_page_length__2__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__set_page_length__2__file___axiom as Spark__text_io__set_page_length__2__file___axiom
 use        Spark__text_io__set_page_length__2__to___axiom as Spark__text_io__set_page_length__2__to___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom

 let def [#"spark-text_io.ads" 323 0 0][@GP_Subp:spark-text_io.ads:323] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 323 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:323 *)
  ;
  [#"spark-text_io.ads" 323 0 0] assume { [#"spark-text_io.ads" 323 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 323 0 0] assume { [#"spark-text_io.ads" 323 0 0] (Spark__text_io__count___axiom.dynamic_invariant Spark__text_io__set_page_length__2__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:323 *)
  ;
  [#"spark-text_io.ads" 323 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:323 *)
  ;
  [#"spark-text_io.ads" 323 0 0] assume { [#"spark-text_io.ads" 323 0 0] ( [@GP_Pretty_Ada:30570] ((epsilon temp___result_1332 : bool.
   ( (temp___result_1332 = (Spark__text_io__is_writable.is_writable Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1332 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 323 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 328 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:328:33:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:328:33] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Id:69] (Spark__text_io__name___axiom.name(Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1317 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1331 : Standard__string.string.
   ( (temp___result_1331 = (Spark__text_io__name.name Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1331 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 327 0 0] ( [@GP_Sloc:spark-text_io.ads:327:52] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_mode__2] [@comment:                  Is_Open (File) and Mode (File) = Mode (File)'Old and                                                    ^ spark-text_io.ads:327:52:VC_PRECONDITION] [@GP_Id:68] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1316 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1330 : int.
    ( (temp___result_1330 = (Spark__text_io__mode__2.mode__2 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1330 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) in (
     ()))
     in () end ;
    (let temp___old_1326 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
    ensures { (result = (epsilon temp___result_1329 : bool.
     ( (temp___result_1329 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1329 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 330 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:330:40:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:330:40] [@GP_Id:67] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_line_length__2] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1325 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1328 : int.
      ( (temp___result_1328 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1328 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 329 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:329:33:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:329:33] [@GP_Id:66] (Spark__text_io__form___axiom.form(Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1321 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
      ensures { (result = (epsilon temp___result_1327 : Standard__string.string.
       ( (temp___result_1327 = (Spark__text_io__form.form Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1327 Spark__text_io__set_page_length__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       ()))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_page_length__3" defined at spark-text_io.ads:333, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_page_length__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__set_page_length__3__to as Spark__text_io__set_page_length__3__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__set_page_length__3__to___axiom as Spark__text_io__set_page_length__3__to___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom

 let def [#"spark-text_io.ads" 333 0 0][@GP_Subp:spark-text_io.ads:333] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 333 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:333 *)
  ;
  [#"spark-text_io.ads" 333 0 0] assume { [#"spark-text_io.ads" 333 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 333 0 0] assume { [#"spark-text_io.ads" 333 0 0] (Spark__text_io__count___axiom.dynamic_invariant Spark__text_io__set_page_length__3__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:333 *)
  ;
  [#"spark-text_io.ads" 333 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:333 *)
  ;
  [#"spark-text_io.ads" 333 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 342 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:342:24] [@comment:                       Line_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:342:24:VC_PRECONDITION] [@vc:annotation] [@GP_Id:77] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_line_length__2] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1341 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1344 : int.
   ( (temp___result_1344 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1344 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 340 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@vc:annotation] [@comment:                    Form (Standard_Output) = Form (Standard_Output)'Old and                                              ^ spark-text_io.ads:340:46:VC_PRECONDITION] [@GP_Id:76] [@GP_Sloc:spark-text_io.ads:340:46] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1337 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1343 : Standard__string.string.
    ( (temp___result_1343 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1343 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 339 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@comment:                    Name (Standard_Output) = Name (Standard_Output)'Old and                                              ^ spark-text_io.ads:339:46:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:339:46] [@vc:annotation] [@GP_Id:75] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1333 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1342 : Standard__string.string.
     ( (temp___result_1342 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1342 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "line_length__3" defined at spark-text_io.ads:349, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__line_length__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom

 val spark__text_io__line_length__3__result [@model_projected] [@model_trace:10316@result] [@name:Line_Length]  : int__ref 
 
 let def [#"spark-text_io.ads" 349 0 0][@GP_Subp:spark-text_io.ads:349] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 349 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:349 *)
  ;
  [#"spark-text_io.ads" 349 0 0] assume { [#"spark-text_io.ads" 349 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:349 *)
  ;
  [#"spark-text_io.ads" 349 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:349 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "page_length__3" defined at spark-text_io.ads:356, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__page_length__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom

 val spark__text_io__page_length__3__result [@model_projected] [@name:Page_Length] [@model_trace:10360@result]  : int__ref 
 
 let def [#"spark-text_io.ads" 356 0 0][@GP_Subp:spark-text_io.ads:356] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 356 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:356 *)
  ;
  [#"spark-text_io.ads" 356 0 0] assume { [#"spark-text_io.ads" 356 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:356 *)
  ;
  [#"spark-text_io.ads" 356 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:356 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "new_line__2" defined at spark-text_io.ads:361, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__new_line__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__new_line__2__file as Spark__text_io__new_line__2__file
 use        Spark__text_io__new_line__2__spacing as Spark__text_io__new_line__2__spacing
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__new_line__2__file___axiom as Spark__text_io__new_line__2__file___axiom
 use        Spark__text_io__new_line__2__spacing___axiom as Spark__text_io__new_line__2__spacing___axiom

 let def [#"spark-text_io.ads" 361 0 0][@GP_Subp:spark-text_io.ads:361] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 361 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:361 *)
  ;
  [#"spark-text_io.ads" 361 0 0] assume { [#"spark-text_io.ads" 361 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 361 0 0] assume { [#"spark-text_io.ads" 361 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__new_line__2__spacing.spacing True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:361 *)
  ;
  [#"spark-text_io.ads" 361 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:361 *)
  ;
  [#"spark-text_io.ads" 361 0 0] assume { [#"spark-text_io.ads" 361 0 0] ( [@GP_Pretty_Ada:30810] ((epsilon temp___result_1363 : bool.
   ( (temp___result_1363 = (Spark__text_io__is_writable.is_writable Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1363 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 361 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 366 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:87] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:366:33] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:366:33:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1346 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1362 : Standard__string.string.
   ( (temp___result_1362 = (Spark__text_io__name.name Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1362 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 365 0 0] ( [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@GP_Reason:VC_PRECONDITION] [@GP_Id:86] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:365:52] [@comment:          Post => Is_Open (File) and Mode (File) = Mode (File)'Old and                                                    ^ spark-text_io.ads:365:52:VC_PRECONDITION] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1345 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1361 : int.
    ( (temp___result_1361 = (Spark__text_io__mode__2.mode__2 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1361 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) in (
     ()))
     in () end ;
    (let temp___old_1356 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
    ensures { (result = (epsilon temp___result_1360 : bool.
     ( (temp___result_1360 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1360 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 369 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:85] [@comment:                  Page_Length (File) = Page_Length (File)'Old and                                        ^ spark-text_io.ads:369:40:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:369:40] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1355 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1359 : int.
      ( (temp___result_1359 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1359 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 368 0 0] ( [@GP_Sloc:spark-text_io.ads:368:40] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:368:40:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:84] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1354 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1358 : int.
       ( (temp___result_1358 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1358 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 367 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:367:33] [@GP_Reason:VC_PRECONDITION] [@GP_Id:83] [@vc:annotation] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:367:33:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1350 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
       ensures { (result = (epsilon temp___result_1357 : Standard__string.string.
        ( (temp___result_1357 = (Spark__text_io__form.form Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1357 Spark__text_io__new_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "new_line__3" defined at spark-text_io.ads:372, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__new_line__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__new_line__3__spacing as Spark__text_io__new_line__3__spacing
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__new_line__3__spacing___axiom as Spark__text_io__new_line__3__spacing___axiom

 let def [#"spark-text_io.ads" 372 0 0][@GP_Subp:spark-text_io.ads:372] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 372 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:372 *)
  ;
  [#"spark-text_io.ads" 372 0 0] assume { [#"spark-text_io.ads" 372 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 372 0 0] assume { [#"spark-text_io.ads" 372 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__new_line__3__spacing.spacing True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:372 *)
  ;
  [#"spark-text_io.ads" 372 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:372 *)
  ;
  [#"spark-text_io.ads" 372 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 381 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@comment:                       Line_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:381:24:VC_PRECONDITION] [@GP_Id:96] [@GP_Sloc:spark-text_io.ads:381:24] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1372 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1377 : int.
   ( (temp___result_1377 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1377 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 379 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:379:24] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                       Form (Standard_Output)'Old and                        ^ spark-text_io.ads:379:24:VC_PRECONDITION] [@GP_Id:95] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1368 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1376 : Standard__string.string.
    ( (temp___result_1376 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1376 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 377 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:377:24] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@comment:                       Name (Standard_Output)'Old and                        ^ spark-text_io.ads:377:24:VC_PRECONDITION] [@GP_Id:94] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1364 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1375 : Standard__string.string.
     ( (temp___result_1375 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1375 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 383 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                       Page_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:383:24:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Sloc:spark-text_io.ads:383:24] [@GP_Id:93] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1373 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1374 : int.
      ( (temp___result_1374 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1374 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "end_of_file" defined at spark-text_io.ads:459, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__end_of_file__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file__file as Spark__text_io__end_of_file__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file__file___axiom as Spark__text_io__end_of_file__file___axiom

 val spark__text_io__end_of_file__result [@model_projected] [@name:End_Of_File] [@model_trace:11081@result]  : bool__ref 
 
 let def [#"spark-text_io.ads" 459 0 0][@GP_Subp:spark-text_io.ads:459] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 459 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:459 *)
  ;
  [#"spark-text_io.ads" 459 0 0] assume { [#"spark-text_io.ads" 459 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__end_of_file__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:459 *)
  ;
  [#"spark-text_io.ads" 459 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__end_of_file__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:459 *)
  ;
  [#"spark-text_io.ads" 459 0 0] assume { [#"spark-text_io.ads" 459 0 0] ( [@GP_Pretty_Ada:31496] ((epsilon temp___result_1378 : bool.
   ( (temp___result_1378 = (Spark__text_io__is_readable.is_readable Spark__text_io__end_of_file__file.file)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1378 Spark__text_io__end_of_file__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "skip_line__2" defined at spark-text_io.ads:386, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__skip_line__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__skip_line__2__file as Spark__text_io__skip_line__2__file
 use        Spark__text_io__skip_line__2__spacing as Spark__text_io__skip_line__2__spacing
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__skip_line__2__file___axiom as Spark__text_io__skip_line__2__file___axiom
 use        Spark__text_io__skip_line__2__spacing___axiom as Spark__text_io__skip_line__2__spacing___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom

 let def [#"spark-text_io.ads" 386 0 0][@GP_Subp:spark-text_io.ads:386] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 386 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:386 *)
  ;
  [#"spark-text_io.ads" 386 0 0] assume { [#"spark-text_io.ads" 386 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 386 0 0] assume { [#"spark-text_io.ads" 386 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__skip_line__2__spacing.spacing True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:386 *)
  ;
  [#"spark-text_io.ads" 386 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) && not ( ([#"spark-text_io.ads" 389 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:389:51] [@vc:annotation] [@GP_Shape:pragargs__andthen__not__call_end_of_file] [@GP_Id:101] [@comment:          Pre  => Is_Readable (File) and then not End_Of_File (File),                                                   ^ spark-text_io.ads:389:51:VC_PRECONDITION] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:386 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:10597] ((epsilon temp___result_1391 : bool.
   ( (temp___result_1391 = (Spark__text_io__is_readable.is_readable Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1391 Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10599] not ( ((epsilon temp___result_1392 : bool.
   ( (temp___result_1392 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1392 Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
   begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  (let temp___old_1387 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
  ensures { (result = (epsilon temp___result_1390 : bool.
   ( (temp___result_1390 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1390 Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 392 0 0] ( [@GP_Sloc:spark-text_io.ads:392:33] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:392:33:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Id:100] (Spark__text_io__form___axiom.form(Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1383 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1389 : Standard__string.string.
    ( (temp___result_1389 = (Spark__text_io__form.form Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1389 Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 391 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:391:33:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:391:33] [@GP_Id:99] (Spark__text_io__name___axiom.name(Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1379 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1388 : Standard__string.string.
     ( (temp___result_1388 = (Spark__text_io__name.name Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1388 Spark__text_io__skip_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "end_of_file__2" defined at spark-text_io.ads:463, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__end_of_file__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom

 val spark__text_io__end_of_file__2__result [@model_trace:11110@result] [@model_projected] [@name:End_Of_File]  : bool__ref 
 
 let def [#"spark-text_io.ads" 463 0 0][@GP_Subp:spark-text_io.ads:463] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 463 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:463 *)
  ;
  [#"spark-text_io.ads" 463 0 0] assume { [#"spark-text_io.ads" 463 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:463 *)
  ;
  [#"spark-text_io.ads" 463 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:463 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "skip_line__3" defined at spark-text_io.ads:395, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__skip_line__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__skip_line__3__spacing as Spark__text_io__skip_line__3__spacing
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__skip_line__3__spacing___axiom as Spark__text_io__skip_line__3__spacing___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom

 let def [#"spark-text_io.ads" 395 0 0][@GP_Subp:spark-text_io.ads:395] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 395 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:395 *)
  ;
  [#"spark-text_io.ads" 395 0 0] assume { [#"spark-text_io.ads" 395 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 395 0 0] assume { [#"spark-text_io.ads" 395 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__skip_line__3__spacing.spacing True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:395 *)
  ;
  [#"spark-text_io.ads" 395 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) && not ( (Spark__text_io__end_of_file__2___axiom.end_of_file__2(())) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:395 *)
  ;
  [#"spark-text_io.ads" 395 0 0] assume { [#"spark-text_io.ads" 395 0 0] ( ( [@GP_Pretty_Ada:10670] ((epsilon temp___result_1403 : bool.
   ( (temp___result_1403 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1403 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10672] not ( ((epsilon temp___result_1404 : bool.
   ( (temp___result_1404 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_1404 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
  [#"spark-text_io.ads" 395 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 401 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:401:45] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Id:106] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:401:45:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1397 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1402 : Standard__string.string.
   ( (temp___result_1402 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1402 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 400 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Id:105] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:400:45:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:400:45] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1393 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1401 : Standard__string.string.
    ( (temp___result_1401 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1401 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "end_of_line" defined at spark-text_io.ads:404, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__end_of_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_line__file as Spark__text_io__end_of_line__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_line__file___axiom as Spark__text_io__end_of_line__file___axiom

 val spark__text_io__end_of_line__result [@model_trace:10704@result] [@name:End_Of_Line] [@model_projected]  : bool__ref 
 
 let def [#"spark-text_io.ads" 404 0 0][@GP_Subp:spark-text_io.ads:404] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 404 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:404 *)
  ;
  [#"spark-text_io.ads" 404 0 0] assume { [#"spark-text_io.ads" 404 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__end_of_line__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:404 *)
  ;
  [#"spark-text_io.ads" 404 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__end_of_line__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:404 *)
  ;
  [#"spark-text_io.ads" 404 0 0] assume { [#"spark-text_io.ads" 404 0 0] ( [@GP_Pretty_Ada:31120] ((epsilon temp___result_1405 : bool.
   ( (temp___result_1405 = (Spark__text_io__is_readable.is_readable Spark__text_io__end_of_line__file.file)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1405 Spark__text_io__end_of_line__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "end_of_line__2" defined at spark-text_io.ads:408, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__end_of_line__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom

 val spark__text_io__end_of_line__2__result [@model_trace:10733@result] [@name:End_Of_Line] [@model_projected]  : bool__ref 
 
 let def [#"spark-text_io.ads" 408 0 0][@GP_Subp:spark-text_io.ads:408] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 408 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:408 *)
  ;
  [#"spark-text_io.ads" 408 0 0] assume { [#"spark-text_io.ads" 408 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:408 *)
  ;
  [#"spark-text_io.ads" 408 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:408 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "new_page" defined at spark-text_io.ads:411, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__new_page__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__new_page__file as Spark__text_io__new_page__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__new_page__file___axiom as Spark__text_io__new_page__file___axiom

 let def [#"spark-text_io.ads" 411 0 0][@GP_Subp:spark-text_io.ads:411] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 411 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:411 *)
  ;
  [#"spark-text_io.ads" 411 0 0] assume { [#"spark-text_io.ads" 411 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:411 *)
  ;
  [#"spark-text_io.ads" 411 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:411 *)
  ;
  [#"spark-text_io.ads" 411 0 0] assume { [#"spark-text_io.ads" 411 0 0] ( [@GP_Pretty_Ada:31153] ((epsilon temp___result_1424 : bool.
   ( (temp___result_1424 = (Spark__text_io__is_writable.is_writable Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1424 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 411 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 416 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:416:33:VC_PRECONDITION] [@GP_Id:116] [@GP_Sloc:spark-text_io.ads:416:33] (Spark__text_io__form___axiom.form(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1411 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1423 : Standard__string.string.
   ( (temp___result_1423 = (Spark__text_io__form.form Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1423 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 415 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:415:33] [@vc:annotation] [@GP_Id:115] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:415:33:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] (Spark__text_io__name___axiom.name(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1407 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1422 : Standard__string.string.
    ( (temp___result_1422 = (Spark__text_io__name.name Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1422 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 414 0 0] ( [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@GP_Reason:VC_PRECONDITION] [@comment:          Post => Is_Open (File) and Mode (File) = Mode (File)'Old and                                                    ^ spark-text_io.ads:414:52:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:414:52] [@vc:annotation] [@GP_Id:114] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1406 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1421 : int.
     ( (temp___result_1421 = (Spark__text_io__mode__2.mode__2 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1421 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) in (
      ()))
      in () end ;
     (let temp___old_1417 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
     ensures { (result = (epsilon temp___result_1420 : bool.
      ( (temp___result_1420 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1420 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 418 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Page_Length (File) = Page_Length (File)'Old and                                        ^ spark-text_io.ads:418:40:VC_PRECONDITION] [@vc:annotation] [@GP_Id:113] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Sloc:spark-text_io.ads:418:40] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1416 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1419 : int.
       ( (temp___result_1419 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1419 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 417 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@GP_Id:112] [@GP_Sloc:spark-text_io.ads:417:40] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:417:40:VC_PRECONDITION] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1415 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
       ensures { (result = (epsilon temp___result_1418 : int.
        ( (temp___result_1418 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1418 Spark__text_io__new_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "new_page__2" defined at spark-text_io.ads:421, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__new_page__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom

 let def [#"spark-text_io.ads" 421 0 0][@GP_Subp:spark-text_io.ads:421] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 421 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:421 *)
  ;
  [#"spark-text_io.ads" 421 0 0] assume { [#"spark-text_io.ads" 421 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:421 *)
  ;
  [#"spark-text_io.ads" 421 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:421 *)
  ;
  [#"spark-text_io.ads" 421 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 432 0 0] ( [@comment:                       Page_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:432:24:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:125] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Sloc:spark-text_io.ads:432:24] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1434 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1438 : int.
   ( (temp___result_1438 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1438 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 430 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:124] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@comment:                       Line_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:430:24:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:430:24] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1433 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1437 : int.
    ( (temp___result_1437 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1437 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 428 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@GP_Id:123] [@comment:                       Form (Standard_Output)'Old and                        ^ spark-text_io.ads:428:24:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:428:24] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1429 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1436 : Standard__string.string.
     ( (temp___result_1436 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1436 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 426 0 0] ( [@GP_Id:122] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                       Name (Standard_Output)'Old and                        ^ spark-text_io.ads:426:24:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:426:24] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1425 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1435 : Standard__string.string.
      ( (temp___result_1435 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1435 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "skip_page" defined at spark-text_io.ads:435, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__skip_page__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__skip_page__file as Spark__text_io__skip_page__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__skip_page__file___axiom as Spark__text_io__skip_page__file___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom

 let def [#"spark-text_io.ads" 435 0 0][@GP_Subp:spark-text_io.ads:435] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 435 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:435 *)
  ;
  [#"spark-text_io.ads" 435 0 0] assume { [#"spark-text_io.ads" 435 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:435 *)
  ;
  [#"spark-text_io.ads" 435 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) && not ( ([#"spark-text_io.ads" 437 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__andthen__not__call_end_of_file] [@comment:          Pre  => Is_Readable (File) and then not End_Of_File (File),                                                   ^ spark-text_io.ads:437:51:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:437:51] [@GP_Id:130] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) )) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:435 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:10940] ((epsilon temp___result_1451 : bool.
   ( (temp___result_1451 = (Spark__text_io__is_readable.is_readable Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1451 Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:10942] not ( ((epsilon temp___result_1452 : bool.
   ( (temp___result_1452 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1452 Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
   begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 440 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:129] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:440:33] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:440:33:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1443 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1450 : Standard__string.string.
   ( (temp___result_1450 = (Spark__text_io__form.form Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1450 Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 439 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:439:33:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@GP_Id:128] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:439:33] (Spark__text_io__name___axiom.name(Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1439 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1449 : Standard__string.string.
    ( (temp___result_1449 = (Spark__text_io__name.name Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1449 Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) in (
     ()))
     in () end ;
    (let temp___old_1447 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
    ensures { (result = (epsilon temp___result_1448 : bool.
     ( (temp___result_1448 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1448 Spark__text_io__skip_page__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "skip_page__2" defined at spark-text_io.ads:443, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__skip_page__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom

 let def [#"spark-text_io.ads" 443 0 0][@GP_Subp:spark-text_io.ads:443] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 443 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:443 *)
  ;
  [#"spark-text_io.ads" 443 0 0] assume { [#"spark-text_io.ads" 443 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:443 *)
  ;
  [#"spark-text_io.ads" 443 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) && not ( (Spark__text_io__end_of_file__2___axiom.end_of_file__2(())) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:443 *)
  ;
  [#"spark-text_io.ads" 443 0 0] assume { [#"spark-text_io.ads" 443 0 0] ( ( [@GP_Pretty_Ada:11003] ((epsilon temp___result_1463 : bool.
   ( (temp___result_1463 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1463 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11005] not ( ((epsilon temp___result_1464 : bool.
   ( (temp___result_1464 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_1464 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
  [#"spark-text_io.ads" 443 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 448 0 0] ( [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:448:45:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:448:45] [@vc:annotation] [@GP_Id:134] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1453 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1462 : Standard__string.string.
   ( (temp___result_1462 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1462 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 449 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:449:45:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:449:45] [@GP_Id:133] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1457 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1461 : Standard__string.string.
    ( (temp___result_1461 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1461 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "end_of_page" defined at spark-text_io.ads:452, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__end_of_page__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_page__file as Spark__text_io__end_of_page__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_page__file___axiom as Spark__text_io__end_of_page__file___axiom

 val spark__text_io__end_of_page__result [@name:End_Of_Page] [@model_projected] [@model_trace:11037@result]  : bool__ref 
 
 let def [#"spark-text_io.ads" 452 0 0][@GP_Subp:spark-text_io.ads:452] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 452 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:452 *)
  ;
  [#"spark-text_io.ads" 452 0 0] assume { [#"spark-text_io.ads" 452 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__end_of_page__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:452 *)
  ;
  [#"spark-text_io.ads" 452 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__end_of_page__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:452 *)
  ;
  [#"spark-text_io.ads" 452 0 0] assume { [#"spark-text_io.ads" 452 0 0] ( [@GP_Pretty_Ada:31463] ((epsilon temp___result_1465 : bool.
   ( (temp___result_1465 = (Spark__text_io__is_readable.is_readable Spark__text_io__end_of_page__file.file)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1465 Spark__text_io__end_of_page__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "end_of_page__2" defined at spark-text_io.ads:456, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__end_of_page__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom

 val spark__text_io__end_of_page__2__result [@model_trace:11066@result] [@name:End_Of_Page] [@model_projected]  : bool__ref 
 
 let def [#"spark-text_io.ads" 456 0 0][@GP_Subp:spark-text_io.ads:456] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 456 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:456 *)
  ;
  [#"spark-text_io.ads" 456 0 0] assume { [#"spark-text_io.ads" 456 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:456 *)
  ;
  [#"spark-text_io.ads" 456 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:456 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "col__3" defined at spark-text_io.ads:531, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__col__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__col__3__file as Spark__text_io__col__3__file
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__col__3__file___axiom as Spark__text_io__col__3__file___axiom

 val spark__text_io__col__3__result [@model_trace:11642@result] [@model_projected] [@name:Col]  : Spark__text_io__count_result.count_result__ref 
 
 let def [#"spark-text_io.ads" 531 0 0][@GP_Subp:spark-text_io.ads:531] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 531 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:531 *)
  ;
  [#"spark-text_io.ads" 531 0 0] assume { [#"spark-text_io.ads" 531 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__col__3__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:531 *)
  ;
  [#"spark-text_io.ads" 531 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_open___axiom.is_open(Spark__text_io__col__3__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:531 *)
  ;
  [#"spark-text_io.ads" 531 0 0] assume { [#"spark-text_io.ads" 531 0 0] ( [@GP_Pretty_Ada:32046] ((epsilon temp___result_1466 : bool.
   ( (temp___result_1466 = (Spark__text_io__is_open.is_open Spark__text_io__col__3__file.file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1466 Spark__text_io__col__3__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_col__2" defined at spark-text_io.ads:467, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_col__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__set_col__2__file as Spark__text_io__set_col__2__file
 use        Spark__text_io__set_col__2__to as Spark__text_io__set_col__2__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__set_col__2__file___axiom as Spark__text_io__set_col__2__file___axiom
 use        Spark__text_io__set_col__2__to___axiom as Spark__text_io__set_col__2__to___axiom

 let def [#"spark-text_io.ads" 467 0 0][@GP_Subp:spark-text_io.ads:467] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 467 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:467 *)
  ;
  [#"spark-text_io.ads" 467 0 0] assume { [#"spark-text_io.ads" 467 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 467 0 0] assume { [#"spark-text_io.ads" 467 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__set_col__2__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:467 *)
  ;
  [#"spark-text_io.ads" 467 0 0] begin ensures {true} let _ = (let _ = (if (( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) && (([#"spark-text_io.ads" 469 0 0] ( [@comment:          Pre  => (if Is_Writable (File) and then Line_Length (File) > 0 then                                                   ^ spark-text_io.ads:469:51:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__if__andthen__cmp__call_line_length__2] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:469:51] [@GP_Id:148] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) > (0 : int)) )) then (
   (Spark__text_io__set_col__2__to.to__ <= ([#"spark-text_io.ads" 470 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                       To <= Line_Length (File)                              ^ spark-text_io.ads:470:30:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:470:30] [@GP_Id:146] [@GP_Shape:pragargs__if__cmp__call_line_length__2] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )))) else ((if ((Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content))) then (
   not ( ([#"spark-text_io.ads" 471 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__if__if__not__call_end_of_file] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:471:54] [@GP_Id:147] [@comment:                   elsif Is_Readable (File) then not End_Of_File (File)),                                                      ^ spark-text_io.ads:471:54:VC_PRECONDITION] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) )) else (
   (Boolean.of_int((1 : int))))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:467 *)
  ;
   assume {  (if (( ((epsilon temp___result_1492 : bool.
   ( (temp___result_1492 = (Spark__text_io__is_writable.is_writable Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1492 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) /\ ((epsilon temp___result_1493 : int.
   ( (temp___result_1493 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1493 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )) > (0 : int)) )) then (
   ( [@GP_Pretty_Ada:11180] (Spark__text_io__set_col__2__to.to__ <= (epsilon temp___result_1489 : int.
    ( (temp___result_1489 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1489 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) ))) )) else ((if (((epsilon temp___result_1491 : bool.
   ( (temp___result_1491 = (Spark__text_io__is_readable.is_readable Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1491 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )) = True)) then (
   ( [@GP_Pretty_Ada:11186] not ( ((epsilon temp___result_1490 : bool.
    ( (temp___result_1490 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1490 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33788] true ))))) };
   begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  (let temp___old_1470 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
  ensures { (result = (epsilon temp___result_1488 : bool.
   ( (temp___result_1488 = (Spark__text_io__is_readable.is_readable Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1488 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) in (
    ()))
    in () end ;
   (let temp___old_1481 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
   ensures { (result = (epsilon temp___result_1487 : bool.
    ( (temp___result_1487 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1487 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 474 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:474:53] [@GP_Id:145] [@GP_Shape:pragargs__and__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@comment:                   Is_Open (File) and Mode (File) = Mode (File)'Old and                                                     ^ spark-text_io.ads:474:53:VC_PRECONDITION] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1469 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1486 : int.
     ( (temp___result_1486 = (Spark__text_io__mode__2.mode__2 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1486 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 479 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                   Page_Length (File) = Page_Length (File)'Old and                                         ^ spark-text_io.ads:479:41:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Id:144] [@GP_Sloc:spark-text_io.ads:479:41] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1480 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1485 : int.
      ( (temp___result_1485 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1485 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 478 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:478:41] [@GP_Id:143] [@comment:                   Line_Length (File) = Line_Length (File)'Old and                                         ^ spark-text_io.ads:478:41:VC_PRECONDITION] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1479 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1484 : int.
       ( (temp___result_1484 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1484 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 477 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:477:34] [@GP_Id:142] [@comment:                   Form (File) = Form (File)'Old and                                  ^ spark-text_io.ads:477:34:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1475 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
       ensures { (result = (epsilon temp___result_1483 : Standard__string.string.
        ( (temp___result_1483 = (Spark__text_io__form.form Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1483 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 476 0 0] ( [@GP_Sloc:spark-text_io.ads:476:34] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:141] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@comment:                   Name (File) = Name (File)'Old and                                  ^ spark-text_io.ads:476:34:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
         ()))
         in () end ;
        (let temp___old_1471 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
        ensures { (result = (epsilon temp___result_1482 : Standard__string.string.
         ( (temp___result_1482 = (Spark__text_io__name.name Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1482 Spark__text_io__set_col__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
        in _f) in (
         ()))
         )))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_col__3" defined at spark-text_io.ads:482, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_col__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__set_col__3__to as Spark__text_io__set_col__3__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__set_col__3__to___axiom as Spark__text_io__set_col__3__to___axiom

 let def [#"spark-text_io.ads" 482 0 0][@GP_Subp:spark-text_io.ads:482] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 482 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:482 *)
  ;
  [#"spark-text_io.ads" 482 0 0] assume { [#"spark-text_io.ads" 482 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 482 0 0] assume { [#"spark-text_io.ads" 482 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__set_col__3__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:482 *)
  ;
  [#"spark-text_io.ads" 482 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) && (if ((([#"spark-text_io.ads" 485 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                    (if Line_Length (Standard_Output) > 0 then                         ^ spark-text_io.ads:485:25:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__andthen__if__cmp__call_line_length__2] [@GP_Id:160] [@GP_Sloc:spark-text_io.ads:485:25] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) > (0 : int))) then (
   (Spark__text_io__set_col__3__to.to__ <= ([#"spark-text_io.ads" 486 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                        To <= Line_Length (Standard_Output)),                               ^ spark-text_io.ads:486:31:VC_PRECONDITION] [@vc:annotation] [@GP_Id:159] [@GP_Shape:pragargs__andthen__if__cmp__call_line_length__2] [@GP_Sloc:spark-text_io.ads:486:31] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )))) else (
   (Boolean.of_int((1 : int))))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:482 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:11311] ((epsilon temp___result_1510 : bool.
   ( (temp___result_1510 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1510 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ (if (((epsilon temp___result_1512 : int.
   ( (temp___result_1512 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1512 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) > (0 : int))) then (
   ( [@GP_Pretty_Ada:11320] (Spark__text_io__set_col__3__to.to__ <= (epsilon temp___result_1511 : int.
    ( (temp___result_1511 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1511 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) ))) )) else (
   ( [@GP_Pretty_Ada:33831] true ))) ) };
   begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 496 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                        Page_Length (Standard_Output)'Old and                         ^ spark-text_io.ads:496:25:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:496:25] [@vc:annotation] [@GP_Id:158] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1505 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1509 : int.
   ( (temp___result_1509 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1509 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 494 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@GP_Id:157] [@vc:annotation] [@comment:                        Line_Length (Standard_Output)'Old and                         ^ spark-text_io.ads:494:25:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:494:25] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1504 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1508 : int.
    ( (temp___result_1508 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1508 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 490 0 0] ( [@comment:                     Form (Standard_Output) = Form (Standard_Output)'Old and                                               ^ spark-text_io.ads:490:47:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_form] [@GP_Id:156] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:490:47] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1500 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1507 : Standard__string.string.
     ( (temp___result_1507 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1507 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 489 0 0] ( [@GP_Sloc:spark-text_io.ads:489:47] [@GP_Reason:VC_PRECONDITION] [@GP_Id:155] [@vc:annotation] [@comment:                     Name (Standard_Output) = Name (Standard_Output)'Old and                                               ^ spark-text_io.ads:489:47:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__and__and__cmp__old_ref__call_name] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1496 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1506 : Standard__string.string.
      ( (temp___result_1506 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1506 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "page__3" defined at spark-text_io.ads:545, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__page__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__page__3__file as Spark__text_io__page__3__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__page__3__file___axiom as Spark__text_io__page__3__file___axiom

 val spark__text_io__page__3__result [@model_trace:11730@result] [@model_projected] [@name:Page]  : Spark__text_io__count_result.count_result__ref 
 
 let def [#"spark-text_io.ads" 545 0 0][@GP_Subp:spark-text_io.ads:545] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 545 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:545 *)
  ;
  [#"spark-text_io.ads" 545 0 0] assume { [#"spark-text_io.ads" 545 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__page__3__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:545 *)
  ;
  [#"spark-text_io.ads" 545 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_open___axiom.is_open(Spark__text_io__page__3__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:545 *)
  ;
  [#"spark-text_io.ads" 545 0 0] assume { [#"spark-text_io.ads" 545 0 0] ( [@GP_Pretty_Ada:32112] ((epsilon temp___result_1513 : bool.
   ( (temp___result_1513 = (Spark__text_io__is_open.is_open Spark__text_io__page__3__file.file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1513 Spark__text_io__page__3__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_line__2" defined at spark-text_io.ads:499, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_line__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__set_line__2__file as Spark__text_io__set_line__2__file
 use        Spark__text_io__set_line__2__to as Spark__text_io__set_line__2__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__set_line__2__file___axiom as Spark__text_io__set_line__2__file___axiom
 use        Spark__text_io__set_line__2__to___axiom as Spark__text_io__set_line__2__to___axiom

 let def [#"spark-text_io.ads" 499 0 0][@GP_Subp:spark-text_io.ads:499] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 499 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:499 *)
  ;
  [#"spark-text_io.ads" 499 0 0] assume { [#"spark-text_io.ads" 499 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 499 0 0] assume { [#"spark-text_io.ads" 499 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__set_line__2__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:499 *)
  ;
  [#"spark-text_io.ads" 499 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) && (if ((([#"spark-text_io.ads" 502 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__if__cmp__call_page_length__2] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:502:25] [@GP_Id:174] [@comment:                    (if Page_Length (File) > 0 then                         ^ spark-text_io.ads:502:25:VC_PRECONDITION] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) > (0 : int))) then (
   (Spark__text_io__set_line__2__to.to__ <= ([#"spark-text_io.ads" 503 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__if__cmp__call_page_length__2] [@comment:                       To <= Page_Length (File)                              ^ spark-text_io.ads:503:30:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:503:30] [@GP_Id:172] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )))) else ((if ((Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content))) then (
   not ( ([#"spark-text_io.ads" 504 0 0] ( [@GP_Shape:pragargs__andthen__if__if__not__call_end_of_file] [@GP_Reason:VC_PRECONDITION] [@comment:                   elsif Is_Readable (File) then not End_Of_File (File)),                                                      ^ spark-text_io.ads:504:54:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:504:54] [@GP_Id:173] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) )) else (
   (Boolean.of_int((1 : int))))))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:499 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:11430] ((epsilon temp___result_1534 : bool.
   ( (temp___result_1534 = (Spark__text_io__is_writable.is_writable Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1534 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ (if (((epsilon temp___result_1538 : int.
   ( (temp___result_1538 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1538 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )) > (0 : int))) then (
   ( [@GP_Pretty_Ada:11439] (Spark__text_io__set_line__2__to.to__ <= (epsilon temp___result_1535 : int.
    ( (temp___result_1535 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1535 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) ))) )) else ((if (((epsilon temp___result_1537 : bool.
   ( (temp___result_1537 = (Spark__text_io__is_readable.is_readable Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1537 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )) = True)) then (
   ( [@GP_Pretty_Ada:11445] not ( ((epsilon temp___result_1536 : bool.
    ( (temp___result_1536 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1536 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) )) else (
   ( [@GP_Pretty_Ada:33874] true ))))) ) };
   begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 509 0 0] ( [@GP_Sloc:spark-text_io.ads:509:34] [@comment:                   Form (File) = Form (File)'Old and                                  ^ spark-text_io.ads:509:34:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_form] [@GP_Id:171] (Spark__text_io__form___axiom.form(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1521 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1533 : Standard__string.string.
   ( (temp___result_1533 = (Spark__text_io__form.form Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1533 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 508 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                   Name (File) = Name (File)'Old and                                  ^ spark-text_io.ads:508:34:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Id:170] [@GP_Sloc:spark-text_io.ads:508:34] (Spark__text_io__name___axiom.name(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1517 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1532 : Standard__string.string.
    ( (temp___result_1532 = (Spark__text_io__name.name Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1532 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 507 0 0] ( [@GP_Id:169] [@GP_Reason:VC_PRECONDITION] [@comment:                  (Is_Open (File) and Mode (File) = Mode (File)'Old and                                                     ^ spark-text_io.ads:507:53:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:507:53] [@GP_Shape:pragargs__and__and__and__and__and__and__and__cmp__old_ref__call_mode__2] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1516 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1531 : int.
     ( (temp___result_1531 = (Spark__text_io__mode__2.mode__2 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1531 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) in (
      ()))
      in () end ;
     (let temp___old_1527 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
     ensures { (result = (epsilon temp___result_1530 : bool.
      ( (temp___result_1530 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1530 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 511 0 0] ( [@GP_Id:168] [@GP_Reason:VC_PRECONDITION] [@comment:                   Page_Length (File) = Page_Length (File)'Old and                                         ^ spark-text_io.ads:511:41:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:511:41] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_page_length__2] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1526 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1529 : int.
       ( (temp___result_1529 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1529 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 510 0 0] ( [@GP_Id:167] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:510:41] [@vc:annotation] [@comment:                   Line_Length (File) = Line_Length (File)'Old and                                         ^ spark-text_io.ads:510:41:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_line_length__2] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1525 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
       ensures { (result = (epsilon temp___result_1528 : int.
        ( (temp___result_1528 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1528 Spark__text_io__set_line__2__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "line__3" defined at spark-text_io.ads:538, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__line__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__line__3__file as Spark__text_io__line__3__file
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__line__3__file___axiom as Spark__text_io__line__3__file___axiom

 val spark__text_io__line__3__result [@model_trace:11686@result] [@model_projected] [@name:Line]  : Spark__text_io__count_result.count_result__ref 
 
 let def [#"spark-text_io.ads" 538 0 0][@GP_Subp:spark-text_io.ads:538] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 538 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:538 *)
  ;
  [#"spark-text_io.ads" 538 0 0] assume { [#"spark-text_io.ads" 538 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__line__3__file.file True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:538 *)
  ;
  [#"spark-text_io.ads" 538 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_open___axiom.is_open(Spark__text_io__line__3__file.file)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:538 *)
  ;
  [#"spark-text_io.ads" 538 0 0] assume { [#"spark-text_io.ads" 538 0 0] ( [@GP_Pretty_Ada:32079] ((epsilon temp___result_1539 : bool.
   ( (temp___result_1539 = (Spark__text_io__is_open.is_open Spark__text_io__line__3__file.file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_1539 Spark__text_io__line__3__file.file) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_line__3" defined at spark-text_io.ads:514, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__set_line__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__page_length__3 as Spark__text_io__page_length__3
 use        Spark__text_io__page_length__3___axiom as Spark__text_io__page_length__3___axiom
 use        Spark__text_io__set_line__3__to as Spark__text_io__set_line__3__to
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__positive_count___axiom as Spark__text_io__positive_count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__page_length__3___axiom as Spark__text_io__page_length__3___axiom
 use        Spark__text_io__set_line__3__to___axiom as Spark__text_io__set_line__3__to___axiom

 let def [#"spark-text_io.ads" 514 0 0][@GP_Subp:spark-text_io.ads:514] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 514 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:514 *)
  ;
  [#"spark-text_io.ads" 514 0 0] assume { [#"spark-text_io.ads" 514 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 514 0 0] assume { [#"spark-text_io.ads" 514 0 0] (Spark__text_io__positive_count___axiom.dynamic_invariant Spark__text_io__set_line__3__to.to__ True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:514 *)
  ;
  [#"spark-text_io.ads" 514 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) && (if (((Spark__text_io__page_length__3___axiom.page_length__3(())) > (0 : int))) then (
   (Spark__text_io__set_line__3__to.to__ <= ([#"spark-text_io.ads" 518 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                        To <= Page_Length (Standard_Output)),                               ^ spark-text_io.ads:518:31:VC_PRECONDITION] [@GP_Shape:pragargs__andthen__if__cmp__call_page_length__2] [@vc:annotation] [@GP_Id:185] [@GP_Sloc:spark-text_io.ads:518:31] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )))) else (
   (Boolean.of_int((1 : int))))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:514 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:11561] ((epsilon temp___result_1556 : bool.
   ( (temp___result_1556 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1556 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ (if (((epsilon temp___result_1558 : int.
   ( (temp___result_1558 = (Spark__text_io__page_length__3.page_length__3 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__3.page_length__3__function_guard temp___result_1558 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) > (0 : int))) then (
   ( [@GP_Pretty_Ada:11568] (Spark__text_io__set_line__3__to.to__ <= (epsilon temp___result_1557 : int.
    ( (temp___result_1557 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1557 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) ))) )) else (
   ( [@GP_Pretty_Ada:33918] true ))) ) };
   begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 523 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:184] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:523:45] [@comment:                   Name (Standard_Output) = Name (Standard_Output)'Old and                                             ^ spark-text_io.ads:523:45:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1542 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1555 : Standard__string.string.
   ( (temp___result_1555 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1555 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 528 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:528:25] [@vc:annotation] [@GP_Id:183] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@comment:                        Page_Length (Standard_Output)'Old and                         ^ spark-text_io.ads:528:25:VC_PRECONDITION] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1551 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1554 : int.
    ( (temp___result_1554 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1554 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 526 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@GP_Sloc:spark-text_io.ads:526:25] [@vc:annotation] [@GP_Id:182] [@comment:                        Line_Length (Standard_Output)'Old and                         ^ spark-text_io.ads:526:25:VC_PRECONDITION] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1550 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1553 : int.
     ( (temp___result_1553 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1553 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 524 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:181] [@comment:                   Form (Standard_Output) = Form (Standard_Output)'Old and                                             ^ spark-text_io.ads:524:45:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:524:45] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1546 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1552 : Standard__string.string.
      ( (temp___result_1552 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1552 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "col__4" defined at spark-text_io.ads:535, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__col__4__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom

 val spark__text_io__col__4__result [@model_trace:11671@result] [@model_projected] [@name:Col]  : Spark__text_io__count_result.count_result__ref 
 
 let def [#"spark-text_io.ads" 535 0 0][@GP_Subp:spark-text_io.ads:535] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 535 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:535 *)
  ;
  [#"spark-text_io.ads" 535 0 0] assume { [#"spark-text_io.ads" 535 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:535 *)
  ;
  [#"spark-text_io.ads" 535 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:535 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "line__4" defined at spark-text_io.ads:542, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__line__4__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom

 val spark__text_io__line__4__result [@model_projected] [@name:Line] [@model_trace:11715@result]  : Spark__text_io__count_result.count_result__ref 
 
 let def [#"spark-text_io.ads" 542 0 0][@GP_Subp:spark-text_io.ads:542] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 542 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:542 *)
  ;
  [#"spark-text_io.ads" 542 0 0] assume { [#"spark-text_io.ads" 542 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:542 *)
  ;
  [#"spark-text_io.ads" 542 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:542 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "page__4" defined at spark-text_io.ads:549, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__page__4__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__count_result as Spark__text_io__count_result
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__count_result___axiom as Spark__text_io__count_result___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom

 val spark__text_io__page__4__result [@model_projected] [@name:Page] [@model_trace:11759@result]  : Spark__text_io__count_result.count_result__ref 
 
 let def [#"spark-text_io.ads" 549 0 0][@GP_Subp:spark-text_io.ads:549] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 549 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:549 *)
  ;
  [#"spark-text_io.ads" 549 0 0] assume { [#"spark-text_io.ads" 549 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:549 *)
  ;
  [#"spark-text_io.ads" 549 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:549 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at spark-text_io.ads:554, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__get__file as Spark__text_io__get__file
 use        Spark__text_io__get__item as Spark__text_io__get__item
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__get__file___axiom as Spark__text_io__get__file___axiom
 use        Spark__text_io__get__item___axiom as Spark__text_io__get__item___axiom

 let def [#"spark-text_io.ads" 554 0 0][@GP_Subp:spark-text_io.ads:554] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 554 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:554 *)
  ;
  [#"spark-text_io.ads" 554 0 0] assume { [#"spark-text_io.ads" 554 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 554 0 0] assume { [#"spark-text_io.ads" 554 0 0] (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = Spark__text_io__get__item.item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = Spark__text_io__get__item.item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = Spark__text_io__get__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:554 *)
  ;
  [#"spark-text_io.ads" 554 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) && not ( ([#"spark-text_io.ads" 556 0 0] ( [@GP_Id:190] [@GP_Reason:VC_PRECONDITION] [@comment:          Pre  => Is_Readable (File) and then not End_Of_File (File),                                                   ^ spark-text_io.ads:556:51:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__andthen__not__call_end_of_file] [@GP_Sloc:spark-text_io.ads:556:51] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) )) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:554 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:11810] ((epsilon temp___result_1571 : bool.
   ( (temp___result_1571 = (Spark__text_io__is_readable.is_readable Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1571 Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11812] not ( ((epsilon temp___result_1572 : bool.
   ( (temp___result_1572 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1572 Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
   begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  (let temp___old_1567 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
  ensures { (result = (epsilon temp___result_1570 : bool.
   ( (temp___result_1570 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1570 Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 559 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:559:33:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:559:33] [@GP_Id:189] (Spark__text_io__form___axiom.form(Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1563 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1569 : Standard__string.string.
    ( (temp___result_1569 = (Spark__text_io__form.form Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1569 Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 558 0 0] ( [@GP_Sloc:spark-text_io.ads:558:33] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Id:188] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:558:33:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1559 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1568 : Standard__string.string.
     ( (temp___result_1568 = (Spark__text_io__name.name Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1568 Spark__text_io__get__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get__2" defined at spark-text_io.ads:562, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__get__2__item as Spark__text_io__get__2__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__get__2__item___axiom as Spark__text_io__get__2__item___axiom

 let def [#"spark-text_io.ads" 562 0 0][@GP_Subp:spark-text_io.ads:562] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 562 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:562 *)
  ;
  [#"spark-text_io.ads" 562 0 0] assume { [#"spark-text_io.ads" 562 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 562 0 0] assume { [#"spark-text_io.ads" 562 0 0] (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = Spark__text_io__get__2__item.item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = Spark__text_io__get__2__item.item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = Spark__text_io__get__2__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:562 *)
  ;
  [#"spark-text_io.ads" 562 0 0] begin ensures {true} let _ = (let _ = ( not ( (Spark__text_io__end_of_file__2___axiom.end_of_file__2(())) ) || ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) && not ( ([#"spark-text_io.ads" 568 0 0] ( [@GP_Sloc:spark-text_io.ads:568:31] [@GP_Reason:VC_PRECONDITION] [@GP_Id:195] [@vc:annotation] [@GP_Shape:pragargs__orelse__andthen__not__call_end_of_file] [@comment:                          not End_Of_File (Standard_Input)),                               ^ spark-text_io.ads:568:31:VC_PRECONDITION] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) ) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:562 *)
  ;
   assume {  ( [@GP_Pretty_Ada:32241] ( not ( ((epsilon temp___result_1583 : bool.
   ( (temp___result_1583 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_1583 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) \/ ( ((epsilon temp___result_1584 : bool.
   ( (temp___result_1584 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1584 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) /\ not ( ((epsilon temp___result_1585 : bool.
   ( (temp___result_1585 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1585 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) ) };
   begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 571 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:571:45] [@GP_Id:194] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:571:45:VC_PRECONDITION] [@vc:annotation] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1577 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1582 : Standard__string.string.
   ( (temp___result_1582 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1582 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 570 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:193] [@vc:annotation] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:570:45:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:570:45] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1573 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1581 : Standard__string.string.
    ( (temp___result_1581 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1581 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put" defined at spark-text_io.ads:577, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__put__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__file as Spark__text_io__put__file
 use        Spark__text_io__put__item as Spark__text_io__put__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__file___axiom as Spark__text_io__put__file___axiom
 use        Spark__text_io__put__item___axiom as Spark__text_io__put__item___axiom

 let def [#"spark-text_io.ads" 577 0 0][@GP_Subp:spark-text_io.ads:577] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 577 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:577 *)
  ;
  [#"spark-text_io.ads" 577 0 0] assume { [#"spark-text_io.ads" 577 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 577 0 0] assume { [#"spark-text_io.ads" 577 0 0] (Standard__character___axiom.dynamic_invariant Spark__text_io__put__item.item True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:577 *)
  ;
  [#"spark-text_io.ads" 577 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) && ((Spark__text_io__status___axiom.status(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) = (1 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:577 *)
  ;
  [#"spark-text_io.ads" 577 0 0] assume { [#"spark-text_io.ads" 577 0 0] ( ( [@GP_Pretty_Ada:11982] ((epsilon temp___result_1604 : bool.
   ( (temp___result_1604 = (Spark__text_io__is_writable.is_writable Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1604 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:11988] ((epsilon temp___result_1605 : int.
   ( (temp___result_1605 = (Spark__text_io__status.status Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1605 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) };
  [#"spark-text_io.ads" 577 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 584 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@GP_Id:205] [@vc:annotation] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:584:33:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:584:33] (Spark__text_io__form___axiom.form(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1591 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1603 : Standard__string.string.
   ( (temp___result_1603 = (Spark__text_io__form.form Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1603 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 583 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:204] [@GP_Sloc:spark-text_io.ads:583:33] [@vc:annotation] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:583:33:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] (Spark__text_io__name___axiom.name(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1587 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1602 : Standard__string.string.
    ( (temp___result_1602 = (Spark__text_io__name.name Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1602 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 582 0 0] ( [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@comment:                  Mode (File) = Mode (File)'Old and                                 ^ spark-text_io.ads:582:33:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:203] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:582:33] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1586 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1601 : int.
     ( (temp___result_1601 = (Spark__text_io__mode__2.mode__2 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1601 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) in (
      ()))
      in () end ;
     (let temp___old_1597 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
     ensures { (result = (epsilon temp___result_1600 : bool.
      ( (temp___result_1600 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1600 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 586 0 0] ( [@comment:                  Page_Length (File) = Page_Length (File)'Old and                                        ^ spark-text_io.ads:586:40:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:586:40] [@GP_Reason:VC_PRECONDITION] [@GP_Id:202] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1596 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1599 : int.
       ( (temp___result_1599 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1599 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 585 0 0] ( [@GP_Id:201] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:585:40] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:585:40:VC_PRECONDITION] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1595 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
       ensures { (result = (epsilon temp___result_1598 : int.
        ( (temp___result_1598 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1598 Spark__text_io__put__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put__2" defined at spark-text_io.ads:589, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__put__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__2__item as Spark__text_io__put__2__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__2__item___axiom as Spark__text_io__put__2__item___axiom

 let def [#"spark-text_io.ads" 589 0 0][@GP_Subp:spark-text_io.ads:589] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 589 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:589 *)
  ;
  [#"spark-text_io.ads" 589 0 0] assume { [#"spark-text_io.ads" 589 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 589 0 0] assume { [#"spark-text_io.ads" 589 0 0] (Standard__character___axiom.dynamic_invariant Spark__text_io__put__2__item.item True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:589 *)
  ;
  [#"spark-text_io.ads" 589 0 0] begin ensures {true} let _ = (let _ = ((Spark__text_io__status___axiom.status(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) = (1 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:589 *)
  ;
  [#"spark-text_io.ads" 589 0 0] assume { [#"spark-text_io.ads" 589 0 0] ( [@GP_Pretty_Ada:32441] ((epsilon temp___result_1620 : int.
   ( (temp___result_1620 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1620 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) };
  [#"spark-text_io.ads" 589 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 598 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@comment:                      Form (Standard_Output)'Old and                       ^ spark-text_io.ads:598:23:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:598:23] [@GP_Id:214] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1610 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1619 : Standard__string.string.
   ( (temp___result_1619 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1619 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 596 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                      Name (Standard_Output)'Old and                       ^ spark-text_io.ads:596:23:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:596:23] [@GP_Id:213] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1606 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1618 : Standard__string.string.
    ( (temp___result_1618 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1618 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 602 0 0] ( [@comment:                       Page_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:602:24:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Id:212] [@GP_Sloc:spark-text_io.ads:602:24] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1615 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1617 : int.
     ( (temp___result_1617 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1617 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 600 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:600:24] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@comment:                       Line_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:600:24:VC_PRECONDITION] [@GP_Id:211] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1614 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1616 : int.
      ( (temp___result_1616 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1616 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "look_ahead" defined at spark-text_io.ads:605, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__look_ahead__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__look_ahead__file as Spark__text_io__look_ahead__file
 use        Spark__text_io__look_ahead__item as Spark__text_io__look_ahead__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__look_ahead__file___axiom as Spark__text_io__look_ahead__file___axiom
 use        Spark__text_io__look_ahead__item___axiom as Spark__text_io__look_ahead__item___axiom

 let def [#"spark-text_io.ads" 605 0 0][@GP_Subp:spark-text_io.ads:605] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 605 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:605 *)
  ;
  [#"spark-text_io.ads" 605 0 0] assume { [#"spark-text_io.ads" 605 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 605 0 0] assume { [#"spark-text_io.ads" 605 0 0] (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = Spark__text_io__look_ahead__item.item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = Spark__text_io__look_ahead__item.item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = Spark__text_io__look_ahead__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:605 *)
  ;
  [#"spark-text_io.ads" 605 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:605 *)
  ;
  [#"spark-text_io.ads" 605 0 0] assume { [#"spark-text_io.ads" 605 0 0] ( [@GP_Pretty_Ada:32528] ((epsilon temp___result_1633 : bool.
   ( (temp___result_1633 = (Spark__text_io__is_readable.is_readable Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1633 Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 605 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  (let temp___old_1629 [@mlw:proxy_symbol] [@introduced] = [#"spark-text_io.ads" 605 0 0] (val _f : bool
  ensures {[#"spark-text_io.ads" 605 0 0] (result = (epsilon temp___result_1632 : bool.
   ( (temp___result_1632 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1632 Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   ( [#"spark-text_io.ads" 605 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 612 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:612:33:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:612:33] [@GP_Id:218] (Spark__text_io__form___axiom.form(Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1625 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1631 : Standard__string.string.
    ( (temp___result_1631 = (Spark__text_io__form.form Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1631 Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 611 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:611:33:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:611:33] [@vc:annotation] [@GP_Id:217] (Spark__text_io__name___axiom.name(Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1621 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1630 : Standard__string.string.
     ( (temp___result_1630 = (Spark__text_io__name.name Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1630 Spark__text_io__look_ahead__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "look_ahead__2" defined at spark-text_io.ads:615, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__look_ahead__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__look_ahead__2__item as Spark__text_io__look_ahead__2__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__look_ahead__2__item___axiom as Spark__text_io__look_ahead__2__item___axiom

 let def [#"spark-text_io.ads" 615 0 0][@GP_Subp:spark-text_io.ads:615] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 615 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:615 *)
  ;
  [#"spark-text_io.ads" 615 0 0] assume { [#"spark-text_io.ads" 615 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 615 0 0] assume { [#"spark-text_io.ads" 615 0 0] (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = Spark__text_io__look_ahead__2__item.item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = Spark__text_io__look_ahead__2__item.item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = Spark__text_io__look_ahead__2__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:615 *)
  ;
  [#"spark-text_io.ads" 615 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:615 *)
  ;
  [#"spark-text_io.ads" 615 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 620 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Id:222] [@GP_Sloc:spark-text_io.ads:620:45] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:620:45:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1638 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1643 : Standard__string.string.
   ( (temp___result_1643 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1643 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 619 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:619:45] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:619:45:VC_PRECONDITION] [@GP_Id:221] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1634 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1642 : Standard__string.string.
    ( (temp___result_1642 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1642 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_immediate" defined at spark-text_io.ads:623, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get_immediate__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__get_immediate__file as Spark__text_io__get_immediate__file
 use        Spark__text_io__get_immediate__item as Spark__text_io__get_immediate__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__get_immediate__file___axiom as Spark__text_io__get_immediate__file___axiom
 use        Spark__text_io__get_immediate__item___axiom as Spark__text_io__get_immediate__item___axiom

 let def [#"spark-text_io.ads" 623 0 0][@GP_Subp:spark-text_io.ads:623] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 623 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:623 *)
  ;
  [#"spark-text_io.ads" 623 0 0] assume { [#"spark-text_io.ads" 623 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 623 0 0] assume { [#"spark-text_io.ads" 623 0 0] (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = Spark__text_io__get_immediate__item.item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = Spark__text_io__get_immediate__item.item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = Spark__text_io__get_immediate__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:623 *)
  ;
  [#"spark-text_io.ads" 623 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) && not ( ([#"spark-text_io.ads" 626 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:          Pre  => Is_Readable (File) and then not End_Of_File (File),                                                   ^ spark-text_io.ads:626:51:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__andthen__not__call_end_of_file] [@GP_Id:227] [@GP_Sloc:spark-text_io.ads:626:51] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) )) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:623 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:12336] ((epsilon temp___result_1656 : bool.
   ( (temp___result_1656 = (Spark__text_io__is_readable.is_readable Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1656 Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12338] not ( ((epsilon temp___result_1657 : bool.
   ( (temp___result_1657 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1657 Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
   begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  (let temp___old_1652 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
  ensures { (result = (epsilon temp___result_1655 : bool.
   ( (temp___result_1655 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1655 Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 629 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:629:33] [@GP_Id:226] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:629:33:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1648 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1654 : Standard__string.string.
    ( (temp___result_1654 = (Spark__text_io__form.form Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1654 Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 628 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:628:33] [@vc:annotation] [@GP_Id:225] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:628:33:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1644 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1653 : Standard__string.string.
     ( (temp___result_1653 = (Spark__text_io__name.name Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1653 Spark__text_io__get_immediate__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_immediate__2" defined at spark-text_io.ads:632, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get_immediate__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__character_result as Spark__text_io__character_result
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__get_immediate__2__item as Spark__text_io__get_immediate__2__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__character_result___axiom as Spark__text_io__character_result___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__get_immediate__2__item___axiom as Spark__text_io__get_immediate__2__item___axiom

 let def [#"spark-text_io.ads" 632 0 0][@GP_Subp:spark-text_io.ads:632] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 632 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:632 *)
  ;
  [#"spark-text_io.ads" 632 0 0] assume { [#"spark-text_io.ads" 632 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 632 0 0] assume { [#"spark-text_io.ads" 632 0 0] (Spark__text_io__character_result___axiom.dynamic_invariant { Spark__text_io__character_result.__split_fields = Spark__text_io__get_immediate__2__item.item__split_fields.Spark__text_io__character_result.__split_fields__content; Spark__text_io__character_result.__split_discrs = Spark__text_io__get_immediate__2__item.item__split_discrs.Spark__text_io__character_result.__split_discrs__content; Spark__text_io__character_result.attr__constrained = Spark__text_io__get_immediate__2__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:632 *)
  ;
  [#"spark-text_io.ads" 632 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) && not ( (Spark__text_io__end_of_file__2___axiom.end_of_file__2(())) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:632 *)
  ;
  [#"spark-text_io.ads" 632 0 0] assume { [#"spark-text_io.ads" 632 0 0] ( ( [@GP_Pretty_Ada:12408] ((epsilon temp___result_1668 : bool.
   ( (temp___result_1668 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1668 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12410] not ( ((epsilon temp___result_1669 : bool.
   ( (temp___result_1669 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_1669 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
  [#"spark-text_io.ads" 632 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 638 0 0] ( [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:638:45:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:231] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:638:45] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1662 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1667 : Standard__string.string.
   ( (temp___result_1667 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1667 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 637 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:637:45:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@GP_Id:230] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:637:45] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1658 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1666 : Standard__string.string.
    ( (temp___result_1666 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1666 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_immediate__3" defined at spark-text_io.ads:641, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get_immediate__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file as Spark__text_io__end_of_file
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__get_immediate__3__file as Spark__text_io__get_immediate__3__file
 use        Spark__text_io__get_immediate__3__item as Spark__text_io__get_immediate__3__item
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result
 use        Spark__text_io__immediate_result___axiom as Spark__text_io__immediate_result___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__immediate_result___axiom as Spark__text_io__immediate_result___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__get_immediate__3__file___axiom as Spark__text_io__get_immediate__3__file___axiom
 use        Spark__text_io__get_immediate__3__item___axiom as Spark__text_io__get_immediate__3__item___axiom

 let def [#"spark-text_io.ads" 641 0 0][@GP_Subp:spark-text_io.ads:641] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 641 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:641 *)
  ;
  [#"spark-text_io.ads" 641 0 0] assume { [#"spark-text_io.ads" 641 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 641 0 0] assume { [#"spark-text_io.ads" 641 0 0] (Spark__text_io__immediate_result___axiom.dynamic_invariant { Spark__text_io__immediate_result.__split_fields = Spark__text_io__get_immediate__3__item.item__split_fields.Spark__text_io__immediate_result.__split_fields__content; Spark__text_io__immediate_result.__split_discrs = Spark__text_io__get_immediate__3__item.item__split_discrs.Spark__text_io__immediate_result.__split_discrs__content; Spark__text_io__immediate_result.attr__constrained = Spark__text_io__get_immediate__3__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:641 *)
  ;
  [#"spark-text_io.ads" 641 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) && not ( ([#"spark-text_io.ads" 645 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:236] [@vc:annotation] [@GP_Shape:pragargs__andthen__not__call_end_of_file] [@GP_Sloc:spark-text_io.ads:645:51] [@comment:          Pre  => Is_Readable (File) and then not End_Of_File (File),                                                   ^ spark-text_io.ads:645:51:VC_PRECONDITION] (Spark__text_io__end_of_file___axiom.end_of_file(Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) )) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:641 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:12487] ((epsilon temp___result_1682 : bool.
   ( (temp___result_1682 = (Spark__text_io__is_readable.is_readable Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1682 Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12489] not ( ((epsilon temp___result_1683 : bool.
   ( (temp___result_1683 = (Spark__text_io__end_of_file.end_of_file Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file.end_of_file__function_guard temp___result_1683 Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
   begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 647 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@GP_Id:235] [@vc:annotation] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:647:33:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:647:33] (Spark__text_io__name___axiom.name(Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1670 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1681 : Standard__string.string.
   ( (temp___result_1681 = (Spark__text_io__name.name Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1681 Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) in (
    ()))
    in () end ;
   (let temp___old_1678 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
   ensures { (result = (epsilon temp___result_1680 : bool.
    ( (temp___result_1680 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1680 Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 648 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:648:33] [@GP_Id:234] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:648:33:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1674 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1679 : Standard__string.string.
     ( (temp___result_1679 = (Spark__text_io__form.form Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1679 Spark__text_io__get_immediate__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_immediate__4" defined at spark-text_io.ads:651, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get_immediate__4__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__end_of_file__2 as Spark__text_io__end_of_file__2
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__immediate_result as Spark__text_io__immediate_result
 use        Spark__text_io__immediate_result___axiom as Spark__text_io__immediate_result___axiom
 use        Spark__text_io__get_immediate__4__item as Spark__text_io__get_immediate__4__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__immediate_result___axiom as Spark__text_io__immediate_result___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__end_of_file___axiom as Spark__text_io__end_of_file___axiom
 use        Spark__text_io__end_of_file__2___axiom as Spark__text_io__end_of_file__2___axiom
 use        Spark__text_io__get_immediate__4__item___axiom as Spark__text_io__get_immediate__4__item___axiom

 let def [#"spark-text_io.ads" 651 0 0][@GP_Subp:spark-text_io.ads:651] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 651 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:651 *)
  ;
  [#"spark-text_io.ads" 651 0 0] assume { [#"spark-text_io.ads" 651 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 651 0 0] assume { [#"spark-text_io.ads" 651 0 0] (Spark__text_io__immediate_result___axiom.dynamic_invariant { Spark__text_io__immediate_result.__split_fields = Spark__text_io__get_immediate__4__item.item__split_fields.Spark__text_io__immediate_result.__split_fields__content; Spark__text_io__immediate_result.__split_discrs = Spark__text_io__get_immediate__4__item.item__split_discrs.Spark__text_io__immediate_result.__split_discrs__content; Spark__text_io__immediate_result.attr__constrained = Spark__text_io__get_immediate__4__item.item__attr__constrained } False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:651 *)
  ;
  [#"spark-text_io.ads" 651 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) && not ( (Spark__text_io__end_of_file__2___axiom.end_of_file__2(())) ) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:651 *)
  ;
  [#"spark-text_io.ads" 651 0 0] assume { [#"spark-text_io.ads" 651 0 0] ( ( [@GP_Pretty_Ada:12568] ((epsilon temp___result_1694 : bool.
   ( (temp___result_1694 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1694 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12570] not ( ((epsilon temp___result_1695 : bool.
   ( (temp___result_1695 = (Spark__text_io__end_of_file__2.end_of_file__2 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__end_of_file__2.end_of_file__2__function_guard temp___result_1695 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) ) ) };
  [#"spark-text_io.ads" 651 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 658 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:658:45] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_form] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:658:45:VC_PRECONDITION] [@GP_Id:240] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1688 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1693 : Standard__string.string.
   ( (temp___result_1693 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1693 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 657 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Id:239] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:657:45:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:657:45] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1684 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1692 : Standard__string.string.
    ( (temp___result_1692 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1692 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get__3" defined at spark-text_io.ads:663, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__get__3__file as Spark__text_io__get__3__file
 use        Spark__text_io__get__3__item as Spark__text_io__get__3__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__get__3__file___axiom as Spark__text_io__get__3__file___axiom
 use        Spark__text_io__get__3__item___axiom as Spark__text_io__get__3__item___axiom

 let def [#"spark-text_io.ads" 663 0 0][@GP_Subp:spark-text_io.ads:663] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 663 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:663 *)
  ;
  [#"spark-text_io.ads" 663 0 0] assume { [#"spark-text_io.ads" 663 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 663 0 0] assume { [#"spark-text_io.ads" 663 0 0] (if (False) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Spark__text_io__get__3__item.item__first) (Standard__integer__rep.to_rep Spark__text_io__get__3__item.item__last)))) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:663 *)
  ;
  [#"spark-text_io.ads" 663 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:663 *)
  ;
  [#"spark-text_io.ads" 663 0 0] assume { [#"spark-text_io.ads" 663 0 0] ( [@GP_Pretty_Ada:32929] ((epsilon temp___result_1709 : bool.
   ( (temp___result_1709 = (Spark__text_io__is_readable.is_readable Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1709 Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 663 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 669 0 0] ( [@GP_Id:244] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@vc:annotation] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:669:33:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:669:33] (Spark__text_io__form___axiom.form(Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1700 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1707 : Standard__string.string.
   ( (temp___result_1707 = (Spark__text_io__form.form Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1707 Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 668 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:668:33] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:668:33:VC_PRECONDITION] [@GP_Id:243] (Spark__text_io__name___axiom.name(Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1696 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1706 : Standard__string.string.
    ( (temp___result_1706 = (Spark__text_io__name.name Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1706 Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) in (
     ()))
     in () end ;
    (let temp___old_1704 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
    ensures { (result = (epsilon temp___result_1705 : bool.
     ( (temp___result_1705 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1705 Spark__text_io__get__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get__4" defined at spark-text_io.ads:674, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get__4__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__get__4__item as Spark__text_io__get__4__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__get__4__item___axiom as Spark__text_io__get__4__item___axiom

 let def [#"spark-text_io.ads" 674 0 0][@GP_Subp:spark-text_io.ads:674] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 674 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:674 *)
  ;
  [#"spark-text_io.ads" 674 0 0] assume { [#"spark-text_io.ads" 674 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 674 0 0] assume { [#"spark-text_io.ads" 674 0 0] (if (False) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Spark__text_io__get__4__item.item__first) (Standard__integer__rep.to_rep Spark__text_io__get__4__item.item__last)))) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:674 *)
  ;
  [#"spark-text_io.ads" 674 0 0] begin ensures {true} let _ = (let _ = ((Spark__text_io__status___axiom.status(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) = (1 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:674 *)
  ;
  [#"spark-text_io.ads" 674 0 0] assume { [#"spark-text_io.ads" 674 0 0] ( [@GP_Pretty_Ada:33025] ((epsilon temp___result_1721 : int.
   ( (temp___result_1721 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1721 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) };
  [#"spark-text_io.ads" 674 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 681 0 0] ( [@GP_Id:248] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:681:45] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:681:45:VC_PRECONDITION] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1714 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1719 : Standard__string.string.
   ( (temp___result_1719 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1719 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 680 0 0] ( [@GP_Id:247] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:680:45] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:680:45:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1710 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1718 : Standard__string.string.
    ( (temp___result_1718 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1718 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put__3" defined at spark-text_io.ads:686, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__put__3__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__3__file as Spark__text_io__put__3__file
 use        Spark__text_io__put__3__item as Spark__text_io__put__3__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__3__file___axiom as Spark__text_io__put__3__file___axiom
 use        Spark__text_io__put__3__item___axiom as Spark__text_io__put__3__item___axiom

 let def [#"spark-text_io.ads" 686 0 0][@GP_Subp:spark-text_io.ads:686] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 686 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:686 *)
  ;
  [#"spark-text_io.ads" 686 0 0] assume { [#"spark-text_io.ads" 686 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 686 0 0] assume { [#"spark-text_io.ads" 686 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__put__3__item.item True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:686 *)
  ;
  [#"spark-text_io.ads" 686 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) && ((Spark__text_io__status___axiom.status(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) = (1 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:686 *)
  ;
  [#"spark-text_io.ads" 686 0 0] assume { [#"spark-text_io.ads" 686 0 0] ( ( [@GP_Pretty_Ada:12805] ((epsilon temp___result_1741 : bool.
   ( (temp___result_1741 = (Spark__text_io__is_writable.is_writable Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1741 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:12811] ((epsilon temp___result_1742 : int.
   ( (temp___result_1742 = (Spark__text_io__status.status Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1742 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) };
  [#"spark-text_io.ads" 686 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 695 0 0] ( [@GP_Sloc:spark-text_io.ads:695:40] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@comment:                  Page_Length (File) = Page_Length (File)'Old and                                        ^ spark-text_io.ads:695:40:VC_PRECONDITION] [@GP_Id:258] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1732 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1739 : int.
   ( (temp___result_1739 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1739 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 694 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:694:40:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:694:40] [@GP_Id:257] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1731 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1738 : int.
    ( (temp___result_1738 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1738 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 693 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:693:33:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:693:33] [@GP_Id:256] (Spark__text_io__form___axiom.form(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1727 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1737 : Standard__string.string.
     ( (temp___result_1737 = (Spark__text_io__form.form Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1737 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 692 0 0] ( [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:692:33:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:692:33] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Id:255] (Spark__text_io__name___axiom.name(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1723 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1736 : Standard__string.string.
      ( (temp___result_1736 = (Spark__text_io__name.name Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1736 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 691 0 0] ( [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                  Mode (File) = Mode (File)'Old and                                 ^ spark-text_io.ads:691:33:VC_PRECONDITION] [@GP_Id:254] [@GP_Sloc:spark-text_io.ads:691:33] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1722 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
      ensures { (result = (epsilon temp___result_1735 : int.
       ( (temp___result_1735 = (Spark__text_io__mode__2.mode__2 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1735 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) in (
        ()))
        in () end ;
       (let temp___old_1733 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
       ensures { (result = (epsilon temp___result_1734 : bool.
        ( (temp___result_1734 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1734 Spark__text_io__put__3__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put__4" defined at spark-text_io.ads:698, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__put__4__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__4__item as Spark__text_io__put__4__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put__4__item___axiom as Spark__text_io__put__4__item___axiom

 let def [#"spark-text_io.ads" 698 0 0][@GP_Subp:spark-text_io.ads:698] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 698 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:698 *)
  ;
  [#"spark-text_io.ads" 698 0 0] assume { [#"spark-text_io.ads" 698 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 698 0 0] assume { [#"spark-text_io.ads" 698 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__put__4__item.item True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:698 *)
  ;
  [#"spark-text_io.ads" 698 0 0] begin ensures {true} let _ = (let _ = ((Spark__text_io__status___axiom.status(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) = (1 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:698 *)
  ;
  [#"spark-text_io.ads" 698 0 0] assume { [#"spark-text_io.ads" 698 0 0] ( [@GP_Pretty_Ada:33220] ((epsilon temp___result_1758 : int.
   ( (temp___result_1758 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1758 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) };
  [#"spark-text_io.ads" 698 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 709 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:709:23] [@vc:annotation] [@comment:                      Page_Length (Standard_Output)'Old and                       ^ spark-text_io.ads:709:23:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Id:267] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1752 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1756 : int.
   ( (temp___result_1756 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1756 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 707 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@GP_Sloc:spark-text_io.ads:707:23] [@vc:annotation] [@GP_Id:266] [@comment:                      Line_Length (Standard_Output)'Old and                       ^ spark-text_io.ads:707:23:VC_PRECONDITION] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1751 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1755 : int.
    ( (temp___result_1755 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1755 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 705 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Sloc:spark-text_io.ads:705:46] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                    Form (Standard_Output) = Form (Standard_Output)'Old and                                              ^ spark-text_io.ads:705:46:VC_PRECONDITION] [@GP_Id:265] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1747 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1754 : Standard__string.string.
     ( (temp___result_1754 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1754 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 704 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:264] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Sloc:spark-text_io.ads:704:46] [@comment:                    Name (Standard_Output) = Name (Standard_Output)'Old and                                              ^ spark-text_io.ads:704:46:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1743 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1753 : Standard__string.string.
      ( (temp___result_1753 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1753 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at spark-text_io.ads:717, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__get_line__file as Spark__text_io__get_line__file
 use        Spark__text_io__get_line__item as Spark__text_io__get_line__item
 use        Spark__text_io__get_line__last as Spark__text_io__get_line__last
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__get_line__file___axiom as Spark__text_io__get_line__file___axiom
 use        Spark__text_io__get_line__item___axiom as Spark__text_io__get_line__item___axiom
 use        Spark__text_io__get_line__last___axiom as Spark__text_io__get_line__last___axiom

 let def [#"spark-text_io.ads" 717 0 0][@GP_Subp:spark-text_io.ads:717] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 717 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:717 *)
  ;
  [#"spark-text_io.ads" 717 0 0] assume { [#"spark-text_io.ads" 717 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 717 0 0] assume { [#"spark-text_io.ads" 717 0 0] (if (False) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Spark__text_io__get_line__item.item__first) (Standard__integer__rep.to_rep Spark__text_io__get_line__item.item__last)))) };
  [#"spark-text_io.ads" 717 0 0] assume { [#"spark-text_io.ads" 717 0 0] (Standard__natural___axiom.dynamic_invariant Spark__text_io__get_line__last.last.int__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:717 *)
  ;
  [#"spark-text_io.ads" 717 0 0] begin ensures {true} let _ = (let _ = (Spark__text_io__is_readable___axiom.is_readable(Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:717 *)
  ;
  [#"spark-text_io.ads" 717 0 0] assume { [#"spark-text_io.ads" 717 0 0] ( [@GP_Pretty_Ada:33307] ((epsilon temp___result_1772 : bool.
   ( (temp___result_1772 = (Spark__text_io__is_readable.is_readable Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_1772 Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) };
  [#"spark-text_io.ads" 717 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 723 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:272] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@vc:annotation] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:723:33:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:723:33] (Spark__text_io__name___axiom.name(Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1759 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1770 : Standard__string.string.
   ( (temp___result_1770 = (Spark__text_io__name.name Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1770 Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) in (
    ()))
    in () end ;
   (let temp___old_1767 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
   ensures { (result = (epsilon temp___result_1769 : bool.
    ( (temp___result_1769 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1769 Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 724 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:271] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:724:33:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:724:33] (Spark__text_io__form___axiom.form(Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1763 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
    ensures { (result = (epsilon temp___result_1768 : Standard__string.string.
     ( (temp___result_1768 = (Spark__text_io__form.form Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1768 Spark__text_io__get_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line__2" defined at spark-text_io.ads:732, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__get_line__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__get_line__2__item as Spark__text_io__get_line__2__item
 use        Spark__text_io__get_line__2__last as Spark__text_io__get_line__2__last
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__get_line__2__item___axiom as Spark__text_io__get_line__2__item___axiom
 use        Spark__text_io__get_line__2__last___axiom as Spark__text_io__get_line__2__last___axiom

 let def [#"spark-text_io.ads" 732 0 0][@GP_Subp:spark-text_io.ads:732] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 732 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:732 *)
  ;
  [#"spark-text_io.ads" 732 0 0] assume { [#"spark-text_io.ads" 732 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 732 0 0] assume { [#"spark-text_io.ads" 732 0 0] (if (False) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Spark__text_io__get_line__2__item.item__first) (Standard__integer__rep.to_rep Spark__text_io__get_line__2__item.item__last)))) };
  [#"spark-text_io.ads" 732 0 0] assume { [#"spark-text_io.ads" 732 0 0] (Standard__natural___axiom.dynamic_invariant Spark__text_io__get_line__2__last.last.int__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:732 *)
  ;
  [#"spark-text_io.ads" 732 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:732 *)
  ;
  [#"spark-text_io.ads" 732 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 737 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                    Name (Standard_Input) = Name (Standard_Input)'Old and                                             ^ spark-text_io.ads:737:45:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_name] [@GP_Id:277] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:737:45] (Spark__text_io__name___axiom.name(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1773 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1782 : Standard__string.string.
   ( (temp___result_1782 = (Spark__text_io__name.name Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1782 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 738 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_form] [@GP_Id:276] [@comment:                    Form (Standard_Input) = Form (Standard_Input)'Old and                                             ^ spark-text_io.ads:738:45:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:738:45] (Spark__text_io__form___axiom.form(Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1777 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
   ensures { (result = (epsilon temp___result_1781 : Standard__string.string.
    ( (temp___result_1781 = (Spark__text_io__form.form Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1781 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put_line" defined at spark-text_io.ads:745, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__put_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__is_standard_file as Spark__text_io__is_standard_file
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put_line__file as Spark__text_io__put_line__file
 use        Spark__text_io__put_line__item as Spark__text_io__put_line__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_standard_input___axiom as Spark__text_io__is_standard_input___axiom
 use        Spark__text_io__is_standard_output___axiom as Spark__text_io__is_standard_output___axiom
 use        Spark__text_io__is_standard_error___axiom as Spark__text_io__is_standard_error___axiom
 use        Spark__text_io__is_standard_file___axiom as Spark__text_io__is_standard_file___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put_line__file___axiom as Spark__text_io__put_line__file___axiom
 use        Spark__text_io__put_line__item___axiom as Spark__text_io__put_line__item___axiom

 let def [#"spark-text_io.ads" 745 0 0][@GP_Subp:spark-text_io.ads:745] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 745 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:745 *)
  ;
  [#"spark-text_io.ads" 745 0 0] assume { [#"spark-text_io.ads" 745 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 745 0 0] assume { [#"spark-text_io.ads" 745 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__put_line__item.item True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:745 *)
  ;
  [#"spark-text_io.ads" 745 0 0] begin ensures {true} let _ = (let _ = ( (Spark__text_io__is_writable___axiom.is_writable(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) && ((Spark__text_io__status___axiom.status(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) = (1 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:745 *)
  ;
  [#"spark-text_io.ads" 745 0 0] assume { [#"spark-text_io.ads" 745 0 0] ( ( [@GP_Pretty_Ada:13219] ((epsilon temp___result_1803 : bool.
   ( (temp___result_1803 = (Spark__text_io__is_writable.is_writable Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_1803 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:13225] ((epsilon temp___result_1804 : int.
   ( (temp___result_1804 = (Spark__text_io__status.status Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1804 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) };
  [#"spark-text_io.ads" 745 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 750 0 0] ( [@GP_Shape:pragargs__and__and__and__and__and__and__cmp__old_ref__call_mode__2] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:750:33] [@comment:                  Mode (File) = Mode (File)'Old and                                 ^ spark-text_io.ads:750:33:VC_PRECONDITION] [@GP_Id:287] (Spark__text_io__mode__2___axiom.mode__2(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1784 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (epsilon temp___result_1801 : int.
   ( (temp___result_1801 = (Spark__text_io__mode__2.mode__2 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_1801 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = (Spark__text_io__is_standard_file___axiom.is_standard_file(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) in (
    ()))
    in () end ;
   (let temp___old_1795 [@mlw:proxy_symbol] [@introduced] =  (val _f : bool
   ensures { (result = (epsilon temp___result_1800 : bool.
    ( (temp___result_1800 = (Spark__text_io__is_standard_file.is_standard_file Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_standard_file.is_standard_file__function_guard temp___result_1800 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 754 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@comment:                  Page_Length (File) = Page_Length (File)'Old and                                        ^ spark-text_io.ads:754:40:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:754:40] [@GP_Id:286] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1794 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1799 : int.
     ( (temp___result_1799 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1799 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 753 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:753:40] [@comment:                  Line_Length (File) = Line_Length (File)'Old and                                        ^ spark-text_io.ads:753:40:VC_PRECONDITION] [@GP_Id:285] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1793 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
     ensures { (result = (epsilon temp___result_1798 : int.
      ( (temp___result_1798 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1798 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 752 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@comment:                  Form (File) = Form (File)'Old and                                 ^ spark-text_io.ads:752:33:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:752:33] [@GP_Id:284] (Spark__text_io__form___axiom.form(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
       ()))
       in () end ;
      (let temp___old_1789 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
      ensures { (result = (epsilon temp___result_1797 : Standard__string.string.
       ( (temp___result_1797 = (Spark__text_io__form.form Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1797 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
      in _f) in (
       (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 751 0 0] ( [@GP_Sloc:spark-text_io.ads:751:33] [@GP_Reason:VC_PRECONDITION] [@comment:                  Name (File) = Name (File)'Old and                                 ^ spark-text_io.ads:751:33:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Id:283] (Spark__text_io__name___axiom.name(Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) )) in (
        ()))
        in () end ;
       (let temp___old_1785 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
       ensures { (result = (epsilon temp___result_1796 : Standard__string.string.
        ( (temp___result_1796 = (Spark__text_io__name.name Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1796 Spark__text_io__put_line__file.file.Spark__text_io__file_type.file_type__content) )))} 
       in _f) in (
        ()))
        )))
       )))
      )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put_line__2" defined at spark-text_io.ads:758, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spark__text_io__put_line__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__name as Spark__text_io__name
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form as Spark__text_io__form
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__line_length__2 as Spark__text_io__line_length__2
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2 as Spark__text_io__page_length__2
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put_line__2__item as Spark__text_io__put_line__2__item
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__count___axiom as Spark__text_io__count___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__name___axiom as Spark__text_io__name___axiom
 use        Spark__text_io__form___axiom as Spark__text_io__form___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Spark__text_io__line_length__2___axiom as Spark__text_io__line_length__2___axiom
 use        Spark__text_io__page_length__2___axiom as Spark__text_io__page_length__2___axiom
 use        Spark__text_io__put_line__2__item___axiom as Spark__text_io__put_line__2__item___axiom

 let def [#"spark-text_io.ads" 758 0 0][@GP_Subp:spark-text_io.ads:758] 
   (__void_param : unit)
  requires { [#"spark-text_io.ads" 758 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram spark-text_io.ads:758 *)
  ;
  [#"spark-text_io.ads" 758 0 0] assume { [#"spark-text_io.ads" 758 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"spark-text_io.ads" 758 0 0] assume { [#"spark-text_io.ads" 758 0 0] (Standard__string___axiom.dynamic_invariant Spark__text_io__put_line__2__item.item True False True True) };
  () (* Check for RTE in the Pre of the subprogram spark-text_io.ads:758 *)
  ;
  [#"spark-text_io.ads" 758 0 0] begin ensures {true} let _ = (let _ = ((Spark__text_io__status___axiom.status(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) = (1 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram spark-text_io.ads:758 *)
  ;
  [#"spark-text_io.ads" 758 0 0] assume { [#"spark-text_io.ads" 758 0 0] ( [@GP_Pretty_Ada:33601] ((epsilon temp___result_1820 : int.
   ( (temp___result_1820 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_1820 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) };
  [#"spark-text_io.ads" 758 0 0] begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 765 0 0] ( [@GP_Sloc:spark-text_io.ads:765:24] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__and__and__and__and__and__cmp__old_ref__call_name] [@GP_Id:296] [@comment:                       Name (Standard_Output)'Old and                        ^ spark-text_io.ads:765:24:VC_PRECONDITION] (Spark__text_io__name___axiom.name(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
   ()))
   in () end ;
  (let temp___old_1805 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
  ensures { (result = (epsilon temp___result_1818 : Standard__string.string.
   ( (temp___result_1818 = (Spark__text_io__name.name Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__name.name__function_guard temp___result_1818 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 771 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                       Page_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:771:24:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:spark-text_io.ads:771:24] [@GP_Shape:pragargs__and__and__cmp__old_ref__call_page_length__2] [@GP_Id:295] (Spark__text_io__page_length__2___axiom.page_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
    ()))
    in () end ;
   (let temp___old_1814 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (epsilon temp___result_1817 : int.
    ( (temp___result_1817 = (Spark__text_io__page_length__2.page_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__page_length__2.page_length__2__function_guard temp___result_1817 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
   in _f) in (
    (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 769 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:pragargs__and__and__and__cmp__old_ref__call_line_length__2] [@vc:annotation] [@comment:                       Line_Length (Standard_Output)'Old and                        ^ spark-text_io.ads:769:24:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:769:24] [@GP_Id:294] (Spark__text_io__line_length__2___axiom.line_length__2(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
     ()))
     in () end ;
    (let temp___old_1813 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
    ensures { (result = (epsilon temp___result_1816 : int.
     ( (temp___result_1816 = (Spark__text_io__line_length__2.line_length__2 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__line_length__2.line_length__2__function_guard temp___result_1816 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
    in _f) in (
     (  begin ensures {true} let _ = (let _ = ([#"spark-text_io.ads" 767 0 0] ( [@GP_Shape:pragargs__and__and__and__and__cmp__old_ref__call_form] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:293] [@comment:                       Form (Standard_Output)'Old and                        ^ spark-text_io.ads:767:24:VC_PRECONDITION] [@GP_Sloc:spark-text_io.ads:767:24] (Spark__text_io__form___axiom.form(Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) )) in (
      ()))
      in () end ;
     (let temp___old_1809 [@mlw:proxy_symbol] [@introduced] =  (val _f : Standard__string.string
     ensures { (result = (epsilon temp___result_1815 : Standard__string.string.
      ( (temp___result_1815 = (Spark__text_io__form.form Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__form.form__function_guard temp___result_1815 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )))} 
     in _f) in (
      ()))
      )))
     )))
    )))
   )
end
