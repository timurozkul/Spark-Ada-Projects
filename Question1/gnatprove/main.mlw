(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 63 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 62 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 129 0 0][@name:Default_Priority] [@model_trace:8040] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 63 63 >
 
 val constant first 
   : int
  ensures { result =  (63 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "angle" defined at angles.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Angles__angle
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type angle =
  < range 0 359 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (359 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = angle, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type angle__ref =
  { mutable angle__content : angle }
 
 function angle__ref_angle__content__projection 
   (a : angle__ref) : angle =
  a.angle__content
 
 meta "model_projection" function angle__ref_angle__content__projection
 
 meta "inline:no" function angle__ref_angle__content__projection
 
 val angle__havoc 
   (x : angle__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "angle" defined at angles.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Angles__angle__rep
 use        Angles__angle as Angles__angle
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Angles__angle.angle) : int =
  (Angles__angle.angle'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Angles__angle.angle, 
 predicate in_range = Angles__angle.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TTuser_inputSP1" defined at main.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Main__TTuser_inputSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTuser_inputSP1 =
  < range 1 20 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTuser_inputSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTuser_inputSP1__ref =
  { mutable tTuser_inputSP1__content : tTuser_inputSP1 }
 
 function tTuser_inputSP1__ref_tTuser_inputSP1__content__projection 
   (a : tTuser_inputSP1__ref) : tTuser_inputSP1 =
  a.tTuser_inputSP1__content
 
 meta "model_projection" function tTuser_inputSP1__ref_tTuser_inputSP1__content__projection
 
 meta "inline:no" function tTuser_inputSP1__ref_tTuser_inputSP1__content__projection
 
 val tTuser_inputSP1__havoc 
   (x : tTuser_inputSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTuser_inputSP1" defined at main.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Main__TTuser_inputSP1__rep
 use        Main__TTuser_inputSP1 as Main__TTuser_inputSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTuser_inputSP1.tTuser_inputSP1) : int =
  (Main__TTuser_inputSP1.tTuser_inputSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTuser_inputSP1.tTuser_inputSP1, 
 predicate in_range = Main__TTuser_inputSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tuser_inputS" defined at main.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Main__Tuser_inputS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "text_io_file_type" defined at spark.ads:61, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io_file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type text_io_file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : text_io_file_type) (b : text_io_file_type) : bool
 
 val constant dummy 
   : text_io_file_type

 
 type text_io_file_type__ref =
  { mutable text_io_file_type__content : text_io_file_type }
 
 function text_io_file_type__ref_text_io_file_type__content__projection 
   (a : text_io_file_type__ref) : text_io_file_type =
  a.text_io_file_type__content
 
 meta "model_projection" function text_io_file_type__ref_text_io_file_type__content__projection
 
 meta "inline:no" function text_io_file_type__ref_text_io_file_type__content__projection
 
 val text_io_file_type__havoc 
   (x : text_io_file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : file_type) (b : file_type) : bool
 
 val constant dummy 
   : file_type

 
 type file_type__ref =
  { mutable file_type__content : file_type }
 
 function file_type__ref_file_type__content__projection 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref_file_type__content__projection
 
 meta "inline:no" function file_type__ref_file_type__content__projection
 
 val file_type__havoc 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "file" defined at spark-text_io.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_writable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 184 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:184, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_writable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_open__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 162 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_open__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_open
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_open 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_open__function_guard 
   (temp___result_154 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode__rep
 use        Ada__text_io__file_mode as Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__file_mode.file_mode, 
 predicate in_range = Ada__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_modeB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_modeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_modeB__ref =
  { mutable file_modeB__content : file_modeB }
 
 function file_modeB__ref_file_modeB__content__projection 
   (a : file_modeB__ref) : file_modeB =
  a.file_modeB__content
 
 meta "model_projection" function file_modeB__ref_file_modeB__content__projection
 
 meta "inline:no" function file_modeB__ref_file_modeB__content__projection
 
 val file_modeB__havoc 
   (x : file_modeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB__rep
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_modeB.file_modeB, 
 predicate in_range = Spark__text_io__file_modeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__2__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__2__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__2__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode__rep
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_mode.file_mode, 
 predicate in_range = Spark__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "file" defined at spark-text_io.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__mode__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 165 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__mode__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__mode__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function mode__2 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate mode__2__function_guard 
   (temp___result_155 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_writable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_writable__function_guard 
   (temp___result_156 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__projection
 
 meta "inline:no" function file_status__ref_file_status__content__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status__rep
 use        Spark__file_status as Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__file_status.file_status, 
 predicate in_range = Spark__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_statusB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_statusB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_statusB__ref =
  { mutable file_statusB__content : file_statusB }
 
 function file_statusB__ref_file_statusB__content__projection 
   (a : file_statusB__ref) : file_statusB =
  a.file_statusB__content
 
 meta "model_projection" function file_statusB__ref_file_statusB__content__projection
 
 meta "inline:no" function file_statusB__ref_file_statusB__content__projection
 
 val file_statusB__havoc 
   (x : file_statusB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB__rep
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_statusB.file_statusB, 
 predicate in_range = Spark__text_io__file_statusB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__2__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__2__projection
 
 meta "inline:no" function file_status__ref_file_status__content__2__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status__rep
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_status.file_status, 
 predicate in_range = Spark__text_io__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "file" defined at spark-text_io.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__status__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 133 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:133, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__status__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function status 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate status__function_guard 
   (temp___result_157 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_readable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 180 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_readable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_readable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_readable__function_guard 
   (temp___result_158 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "T1b" defined at main.adb:28, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"as_io_wrapper.ads" 59 0 0][@name:Item] [@model_trace:2753] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T2b" defined at main.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (43 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "prompt_try_again_when_not_integer" defined at as_io_wrapper.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_get__3__prompt_try_again_when_not_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant prompt_try_again_when_not_integer [#"as_io_wrapper.ads" 106 0 0][@model_projected] [@model_trace:2902] [@name:Prompt_Try_Again_When_Not_Integer] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "prompt_try_again_when_not_integer" defined at as_io_wrapper.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__3__prompt_try_again_when_not_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3b" defined at main.adb:32, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (39 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put_line__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"as_io_wrapper.ads" 83 0 0][@name:Item] [@model_trace:2836] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put_line__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T4b" defined at main.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Main__L_3__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (35 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5b" defined at main.adb:40, created in Gnat2Why.Types.Translate_Type *)
module Main__L_3__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (43 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at main.adb:43, created in Gnat2Why.Types.Translate_Type *)
module Main__L_3__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (39 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "x" defined at angles.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Angles__addangles__x
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant x [#"angles.ads" 6 0 0][@model_trace:18346] [@name:X] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "x" defined at angles.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Angles__addangles__x___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "y" defined at angles.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Angles__addangles__y
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant y [#"angles.ads" 6 0 0][@name:Y] [@model_trace:18353] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "y" defined at angles.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Angles__addangles__y___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7b" defined at main.adb:50, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (22 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put_line__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"as_io_wrapper.ads" 119 0 0][@name:Item] [@model_trace:2980] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put_line__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T8b" defined at main.adb:52, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (44 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "x" defined at angles.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Angles__addangles2__x
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant x [#"angles.ads" 11 0 0][@name:X] [@model_trace:18407] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "x" defined at angles.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Angles__addangles2__x___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "y" defined at angles.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Angles__addangles2__y
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant y [#"angles.ads" 11 0 0][@model_trace:18414] [@name:Y] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "y" defined at angles.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Angles__addangles2__y___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "addangles2" defined at angles.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Angles__addangles2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function addangles2 
   (x : int) (y : int) : int
 
 val predicate addangles2__function_guard 
   (temp___result_159 : int) (x : int) (y : int)

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"as_io_wrapper.ads" 114 0 0][@name:Item] [@model_trace:2946] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T9b" defined at main.adb:57, created in Gnat2Why.Types.Translate_Type *)
module Main__L_4__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10b" defined at main.adb:58, created in Gnat2Why.Types.Translate_Type *)
module Main__L_4__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (32 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T11b" defined at main.adb:61, created in Gnat2Why.Types.Translate_Type *)
module Main__L_4__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T12b" defined at main.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t12b =
  < range 1 1 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t12b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t12b__ref =
  { mutable t12b__content : t12b }
 
 function t12b__ref_t12b__content__projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref_t12b__content__projection
 
 meta "inline:no" function t12b__ref_t12b__content__projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T12b" defined at main.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T12b__rep
 use        Main__L_1__T12b as Main__L_1__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__L_1__T12b.t12b) : int =
  (Main__L_1__T12b.t12b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__L_1__T12b.t12b, 
 predicate in_range = Main__L_1__T12b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T13b" defined at main.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T14b" defined at main.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "x" defined at main.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Main__x
 use        "_gnatprove_standard".Main
 use        "int".Int

 val x [#"main.adb" 13 0 0][@model_projected] [@model_trace:2317] [@name:X]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "x" defined at main.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__x___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "y" defined at main.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Main__y
 use        "_gnatprove_standard".Main
 use        "int".Int

 val y [#"main.adb" 13 0 0][@model_trace:2324] [@model_projected] [@name:Y]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "y" defined at main.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__y___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "u" defined at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__u
 use        "_gnatprove_standard".Main
 use        "int".Int

 val u [#"main.adb" 15 0 0][@model_projected] [@name:U] [@model_trace:2336]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "user_input" defined at main.adb:16, created in Gnat2Why.Decls.Translate_Variable *)
module Main__user_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val user_input [#"main.adb" 16 0 0][@model_projected] [@name:User_Input] [@model_trace:2345]  : Array__Int__Standard__character.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "user_input" defined at main.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__user_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "xtemp" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Main__xtemp
 use        "_gnatprove_standard".Main
 use        "int".Int

 val xtemp [#"main.adb" 19 0 0][@model_projected] [@model_trace:2359] [@name:Xtemp]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "xtemp" defined at main.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__xtemp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ytemp" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Main__ytemp
 use        "_gnatprove_standard".Main
 use        "int".Int

 val ytemp [#"main.adb" 19 0 0][@name:Ytemp] [@model_trace:2366] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ytemp" defined at main.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__ytemp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at main.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Main__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"main.adb" 19 0 0][@model_projected] [@name:Last] [@model_trace:2373]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at main.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_output [#"spark-text_io.ads" 103 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_input [#"spark-text_io.ads" 102 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at as_io_wrapper.ads:106, created in Gnat2Why.Decls.Translate_Variable *)
module As_io_wrapper__as_get__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val item [#"as_io_wrapper.ads" 106 0 0][@name:Item] [@model_projected] [@model_trace:2893]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "u" defined at angles.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Angles__addangles__u
 use        "_gnatprove_standard".Main
 use        "int".Int

 val u [#"angles.ads" 6 0 0][@model_projected] [@model_trace:18364] [@name:U]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at angles.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Angles__addangles__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at as_io_wrapper.ads:76, created in Gnat2Why.Decls.Translate_Variable *)
module As_io_wrapper__as_get_line__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"as_io_wrapper.ads" 76 0 0][@name:Item] [@model_trace:2787] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"as_io_wrapper.ads" 76 0 0][@model_trace:2787'First] [@name:Item] [@model_projected] 
   : Standard__integer.integer

 
 val constant item__last [#"as_io_wrapper.ads" 76 0 0][@name:Item] [@model_trace:2787'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get_line__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at as_io_wrapper.ads:76, created in Gnat2Why.Decls.Translate_Variable *)
module As_io_wrapper__as_get_line__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"as_io_wrapper.ads" 76 0 0][@model_trace:2796] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at as_io_wrapper.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get_line__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "main" defined at main.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_init_standard_output" defined at as_io_wrapper.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_init_standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_init_standard_input" defined at as_io_wrapper.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_init_standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:24, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:27, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put__2" defined at as_io_wrapper.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_get__3" defined at as_io_wrapper.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_get__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put_line" defined at as_io_wrapper.ads:83, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at main.adb:38, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at main.adb:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "addangles" defined at angles.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Angles__addangles
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put_line__3" defined at as_io_wrapper.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put_line__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put__3" defined at as_io_wrapper.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at main.adb:56, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at main.adb:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_get_line" defined at as_io_wrapper.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_164 : int) (temp___is_init_160 : bool) (temp___skip_constant_161 : bool) (temp___do_toplevel_162 : bool) (temp___do_typ_inv_163 : bool) =
  (if (( temp___is_init_160 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_164)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_164 : int) (temp___is_init_160 : bool) (temp___skip_constant_161 : bool) (temp___do_toplevel_162 : bool) (temp___do_typ_inv_163 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_164 : int) (temp___is_init_160 : bool) (temp___skip_constant_161 : bool) (temp___do_toplevel_162 : bool) (temp___do_typ_inv_163 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_165 : int) (temp___skip_top_level_166 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_165 : int) (temp___skip_top_level_166 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_165 : int) (temp___skip_top_level_166 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_171 : int) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) =
  (if (( temp___is_init_167 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_171)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_171 : int) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_171 : int) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_172 : int) (temp___skip_top_level_173 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_172 : int) (temp___skip_top_level_173 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_172 : int) (temp___skip_top_level_173 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_178 : int) (temp___is_init_174 : bool) (temp___skip_constant_175 : bool) (temp___do_toplevel_176 : bool) (temp___do_typ_inv_177 : bool) =
  (if (( temp___is_init_174 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_178)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_178 : int) (temp___is_init_174 : bool) (temp___skip_constant_175 : bool) (temp___do_toplevel_176 : bool) (temp___do_typ_inv_177 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_178 : int) (temp___is_init_174 : bool) (temp___skip_constant_175 : bool) (temp___do_toplevel_176 : bool) (temp___do_typ_inv_177 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_179 : int) (temp___skip_top_level_180 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_179 : int) (temp___skip_top_level_180 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_179 : int) (temp___skip_top_level_180 : bool) }

end

(* Module giving axioms for type "angle" defined at angles.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Angles__angle___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Angles__angle as Angles__angle

 predicate dynamic_invariant [@inline] 
   (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) =
  (if (( temp___is_init_181 \/ (Angles__angle.first <= Angles__angle.last) )) then (
   (Angles__angle.dynamic_property Angles__angle.first Angles__angle.last temp___expr_185)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_186 : int) (temp___skip_top_level_187 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_186 : int) (temp___skip_top_level_187 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_186 : int) (temp___skip_top_level_187 : bool) }

end

(* Module giving axioms for type "TTuser_inputSP1" defined at main.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTuser_inputSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tuser_inputS" defined at main.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__Tuser_inputS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_192 : Array__Int__Standard__character.map) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_192 : Array__Int__Standard__character.map) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_192 : Array__Int__Standard__character.map) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : Array__Int__Standard__character.map) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : Array__Int__Standard__character.map) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : Array__Int__Standard__character.map) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io_file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io_file_type as Spark__text_io_file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_202 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_202 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_202 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_203 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_204 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_203 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_204 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_203 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_204 : bool) }

end

(* Module giving axioms for type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : Spark__text_io__file_type.file_type) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_209 : Spark__text_io__file_type.file_type) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : Spark__text_io__file_type.file_type) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_210 : Spark__text_io__file_type.file_type) (temp___skip_top_level_211 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_210 : Spark__text_io__file_type.file_type) (temp___skip_top_level_211 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_210 : Spark__text_io__file_type.file_type) (temp___skip_top_level_211 : bool) }

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__file_mode as Ada__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) =
  (if (( temp___is_init_212 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_216)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_216 : int) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_217 : int) (temp___skip_top_level_218 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_217 : int) (temp___skip_top_level_218 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_217 : int) (temp___skip_top_level_218 : bool) }

end

(* Module giving axioms for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_modeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB

 predicate dynamic_invariant [@inline] 
   (temp___expr_223 : int) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) =
  (if (( temp___is_init_219 \/ (Spark__text_io__file_modeB.first <= Spark__text_io__file_modeB.last) )) then (
   (Spark__text_io__file_modeB.dynamic_property Spark__text_io__file_modeB.first Spark__text_io__file_modeB.last temp___expr_223)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_223 : int) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_223 : int) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_224 : int) (temp___skip_top_level_225 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_224 : int) (temp___skip_top_level_225 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_224 : int) (temp___skip_top_level_225 : bool) }

end

(* Module giving axioms for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_mode as Spark__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_230 : int) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) =
  (if (( temp___is_init_226 \/ (Spark__text_io__file_mode.first <= Spark__text_io__file_mode.last) )) then (
   (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last temp___expr_230)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_230 : int) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_230 : int) (temp___is_init_226 : bool) (temp___skip_constant_227 : bool) (temp___do_toplevel_228 : bool) (temp___do_typ_inv_229 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_231 : int) (temp___skip_top_level_232 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_231 : int) (temp___skip_top_level_232 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_231 : int) (temp___skip_top_level_232 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__file_status as Spark__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) =
  (if (( temp___is_init_240 \/ (Spark__file_status.first <= Spark__file_status.last) )) then (
   (Spark__file_status.dynamic_property Spark__file_status.first Spark__file_status.last temp___expr_244)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_244 : int) (temp___is_init_240 : bool) (temp___skip_constant_241 : bool) (temp___do_toplevel_242 : bool) (temp___do_typ_inv_243 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : int) (temp___skip_top_level_246 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_245 : int) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : int) (temp___skip_top_level_246 : bool) }

end

(* Module giving axioms for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_statusB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB

 predicate dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) =
  (if (( temp___is_init_247 \/ (Spark__text_io__file_statusB.first <= Spark__text_io__file_statusB.last) )) then (
   (Spark__text_io__file_statusB.dynamic_property Spark__text_io__file_statusB.first Spark__text_io__file_statusB.last temp___expr_251)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_251 : int) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_252 : int) (temp___skip_top_level_253 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_252 : int) (temp___skip_top_level_253 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_status as Spark__text_io__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) =
  (if (( temp___is_init_254 \/ (Spark__text_io__file_status.first <= Spark__text_io__file_status.last) )) then (
   (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last temp___expr_258)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_258 : int) (temp___is_init_254 : bool) (temp___skip_constant_255 : bool) (temp___do_toplevel_256 : bool) (temp___do_typ_inv_257 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_259 : int) (temp___skip_top_level_260 : bool) }

end

(* Module giving axioms for type "T1b" defined at main.adb:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at main.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at main.adb:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at main.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_3__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at main.adb:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_3__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at main.adb:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_3__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7b" defined at main.adb:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at main.adb:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T9b" defined at main.adb:57, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_4__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at main.adb:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_4__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at main.adb:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_4__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at main.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at main.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at main.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at main.adb:28, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_274
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_274 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_274__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_274 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (7 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (8 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (9 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (10 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (11 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (12 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (13 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (16 : int))) = (102 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (18 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (19 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (20 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (21 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (22 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (23 : int))) = (46 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (24 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (26 : int))) = (51 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (27 : int))) = (53 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (28 : int))) = (57 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (29 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_274 __void_param) (30 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:29, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_275
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_275 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_275__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_275 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (5 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (10 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (11 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (13 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (14 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (16 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (17 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (18 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (19 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (21 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (22 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (23 : int))) = (103 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (25 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (26 : int))) = (59 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (28 : int))) = (112 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (29 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (30 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (31 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (32 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (33 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (34 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (35 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (36 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (37 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (38 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (39 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (40 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (41 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (42 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_275 __void_param) (43 : int))) = (110 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:32, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_276
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_276 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_276__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_276 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (8 : int))) = (69 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (10 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (12 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (14 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (16 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (17 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (18 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (19 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (21 : int))) = (114 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (23 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (24 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (25 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (26 : int))) = (119 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (27 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (28 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (29 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (30 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (31 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (32 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (33 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (34 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (35 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (36 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (37 : int))) = (51 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (38 : int))) = (53 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (39 : int))) = (57 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:39, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_280
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_280 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_280__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_280 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (5 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (7 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (9 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (10 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (11 : int))) = (104 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (13 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (14 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (15 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (16 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (17 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (18 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (19 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (21 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (22 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (23 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (24 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (26 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (27 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (28 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (29 : int))) = (46 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (30 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (31 : int))) = (51 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (32 : int))) = (53 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (33 : int))) = (57 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (34 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (35 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:40, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_281
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_281 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_281__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_281 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (5 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (10 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (11 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (13 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (14 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (16 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (17 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (18 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (19 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (21 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (22 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (23 : int))) = (103 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (25 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (26 : int))) = (59 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (28 : int))) = (112 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (29 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (30 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (31 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (32 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (33 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (34 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (35 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (36 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (37 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (38 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (39 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (40 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (41 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (42 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (43 : int))) = (110 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:43, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_282
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_282 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_282__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_282 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (8 : int))) = (69 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (10 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (12 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (14 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (16 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (17 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (18 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (19 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (21 : int))) = (114 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (23 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (24 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (25 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (26 : int))) = (119 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (27 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (28 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (29 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (30 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (31 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (32 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (33 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (34 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (35 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (36 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (37 : int))) = (51 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (38 : int))) = (53 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (39 : int))) = (57 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:50, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_286
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_286 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_286__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_286 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (7 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (9 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (10 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (12 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (13 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (14 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (15 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (16 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (20 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (21 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (22 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:52, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_287
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_287 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_287__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_287 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (5 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (7 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (9 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (10 : int))) = (102 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (11 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (12 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (13 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (16 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (17 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (18 : int))) = (103 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (19 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (20 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (21 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (23 : int))) = (102 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (24 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (25 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (26 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (27 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (28 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (29 : int))) = (104 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (30 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (31 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (32 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (33 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (34 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (35 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (36 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (37 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (38 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (39 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (40 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (41 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (42 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (43 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (44 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:57, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_288
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_288 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_288__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_288 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at main.adb:58, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_289
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_289 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_289__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_289 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (1 : int))) = (68 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (4 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (5 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (6 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (8 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (9 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (11 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (12 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (13 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (14 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (16 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (17 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (18 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (20 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (21 : int))) = (103 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (22 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (23 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (24 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (25 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (26 : int))) = (40 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (27 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (28 : int))) = (47 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (29 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (30 : int))) = (41 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (31 : int))) = (63 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (32 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:61, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_291
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_291 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_291__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_291 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (5 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (8 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (9 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (12 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (14 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (16 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (17 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (18 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (19 : int))) = (45 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (21 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (22 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (23 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (24 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (25 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (26 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (27 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (28 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (29 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (30 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_291 __void_param) (31 : int))) = (103 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:63, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_298
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_298 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_298__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_298 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (1 : int))) = (110 : int)))

end
(* Module for defining the value of constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (31 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_open___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open

 val is_open 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__mode__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom

 val mode__2 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  ( [@GP_Pretty_Ada:24324] ((epsilon temp___result_233 : bool.
   ( (temp___result_233 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_233 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard result file) )/\(Spark__text_io__file_mode___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mode__2__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__mode__2.mode__2 file)].
   (let result = (Spark__text_io__mode__2.mode__2 file) in (
    (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last result)))
  )

end

(* Module giving a program function and a defining axiom for the expression function "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_writable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable

 val is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_writable.is_writable file)) /\ (Spark__text_io__is_writable.is_writable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_234 : bool.
   ( (temp___result_234 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_234 file) )) = True) /\ ( ((epsilon temp___result_235 : int.
   ( (temp___result_235 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_235 file) )) = (1 : int)) \/ ((epsilon temp___result_236 : int.
   ( (temp___result_236 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_236 file) )) = (2 : int)) ) ) ) ) }
 
 axiom is_writable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_writable.is_writable file)].
   ( (let result = (Spark__text_io__is_writable.is_writable file) in (
    (Spark__text_io__is_writable.is_writable__function_guard result file)))
    -> ( ((Spark__text_io__is_writable.is_writable file) = True) <-> ( ((epsilon temp___result_237 : bool.
    ( (temp___result_237 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_237 file) )) = True) /\ ( ((epsilon temp___result_238 : int.
    ( (temp___result_238 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_238 file) )) = (1 : int)) \/ ((epsilon temp___result_239 : int.
    ( (temp___result_239 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_239 file) )) = (2 : int)) ) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom

 val status 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__status.status file)) /\ (Spark__text_io__status.status__function_guard result file) )/\(Spark__text_io__file_status___axiom.dynamic_invariant result True False True True) ) }
 
 axiom status__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__status.status file)].
   (let result = (Spark__text_io__status.status file) in (
    (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "as_init_standard_output" defined at as_io_wrapper.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_init_standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_init_standard_output 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:2635] ((epsilon temp___result_261 : bool.
   ( (temp___result_261 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_261 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:2641] ((epsilon temp___result_262 : int.
   ( (temp___result_262 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_262 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module giving a program function and a defining axiom for the expression function "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_readable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_readable as Spark__text_io__is_readable

 val is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_263 : bool.
   ( (temp___result_263 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_263 file) )) = True) /\ ((epsilon temp___result_264 : int.
   ( (temp___result_264 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_264 file) )) = (0 : int)) ) ) ) }
 
 axiom is_readable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_readable.is_readable file)].
   ( (let result = (Spark__text_io__is_readable.is_readable file) in (
    (Spark__text_io__is_readable.is_readable__function_guard result file)))
    -> ( ((Spark__text_io__is_readable.is_readable file) = True) <-> ( ((epsilon temp___result_265 : bool.
    ( (temp___result_265 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_265 file) )) = True) /\ ((epsilon temp___result_266 : int.
    ( (temp___result_266 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_266 file) )) = (0 : int)) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "as_init_standard_input" defined at as_io_wrapper.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_init_standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_init_standard_input 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:2601] ((epsilon temp___result_267 : bool.
   ( (temp___result_267 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_267 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:2607] ((epsilon temp___result_268 : int.
   ( (temp___result_268 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_268 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put__2" defined at as_io_wrapper.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_get__3" defined at as_io_wrapper.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_get__3 
   (item : int__ref) (prompt_try_again_when_not_integer : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( (Standard__integer___axiom.dynamic_invariant item.int__content True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output, item}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put_line" defined at as_io_wrapper.ads:83, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put_line 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "addangles" defined at angles.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Angles__addangles___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Angles__angle___axiom as Angles__angle___axiom

 val addangles 
   (x : int) (y : int) (u : int__ref) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:28998] ( ((x + y) = u.int__content) \/ (((x + y) - (360 : int)) = u.int__content) ) ) /\ (Angles__angle___axiom.dynamic_invariant u.int__content True True True True) ) }
  writes {u}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put_line__3" defined at as_io_wrapper.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put_line__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put_line__3 
   (item : int) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "addangles2" defined at angles.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Angles__addangles2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Angles__addangles2 as Angles__addangles2
 use        Angles__angle___axiom as Angles__angle___axiom

 val addangles2 
   (x : int) (y : int) : int
  requires {  true }
  ensures {  ( ( (result = (Angles__addangles2.addangles2 x y)) /\ (Angles__addangles2.addangles2__function_guard result x y) )/\( (Angles__angle___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:29028] ( ((x + y) = result) \/ (((x + y) - (360 : int)) = result) ) ) ) ) }
 
 axiom addangles2__post_axiom :
  (forall x   y   : int [(Angles__addangles2.addangles2 x y)].
   ( ( (Angles__angle___axiom.dynamic_invariant x True True True True) /\ (Angles__angle___axiom.dynamic_invariant y True True True True) ) -> (let result = (Angles__addangles2.addangles2 x y) in (
    (if ((Angles__addangles2.addangles2__function_guard result x y)) then (
     ( ( ( [@GP_Pretty_Ada:29028] ( ((x + y) = result) \/ (((x + y) - (360 : int)) = result) ) ) /\ (Angles__angle___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "as_put__3" defined at as_io_wrapper.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put__3 
   (item : int) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_get_line" defined at as_io_wrapper.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val as_get_line 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item, last}

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__x as Main__x
 use        Main__y as Main__y
 use        Main__u as Main__u
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__user_input as Main__user_input
 use        Main__xtemp as Main__xtemp
 use        Main__ytemp as Main__ytemp
 use        Main__last as Main__last
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        Angles__addangles___axiom as Angles__addangles___axiom
 use        As_io_wrapper__as_put_line__3___axiom as As_io_wrapper__as_put_line__3___axiom
 use        Angles__addangles2___axiom as Angles__addangles2___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        As_io_wrapper__as_get_line___axiom as As_io_wrapper__as_get_line___axiom
 use        Angles__angle as Angles__angle
 use        Angles__angle___axiom as Angles__angle___axiom
 use        Main__TTuser_inputSP1 as Main__TTuser_inputSP1
 use        Main__Tuser_inputS___axiom as Main__Tuser_inputS___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Main__L_1 as Main__L_1
 use        Main__L_2 as Main__L_2
 use        Main__L_3 as Main__L_3
 use        Main__L_4 as Main__L_4
 use        Main__L_1__T12b as Main__L_1__T12b
 use        Temp___String_Literal_274 as Temp___String_Literal_274
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_275 as Temp___String_Literal_275
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_276 as Temp___String_Literal_276
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_280 as Temp___String_Literal_280
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_281 as Temp___String_Literal_281
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_282 as Temp___String_Literal_282
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_286 as Temp___String_Literal_286
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_287 as Temp___String_Literal_287
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_288 as Temp___String_Literal_288
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_289 as Temp___String_Literal_289
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_291 as Temp___String_Literal_291
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_298 as Temp___String_Literal_298
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__x___axiom as Main__x___axiom
 use        Main__y___axiom as Main__y___axiom
 use        Main__u___axiom as Main__u___axiom
 use        Main__user_input___axiom as Main__user_input___axiom
 use        Main__xtemp___axiom as Main__xtemp___axiom
 use        Main__ytemp___axiom as Main__ytemp___axiom
 use        Main__last___axiom as Main__last___axiom
 use        Main__L_1___axiom as Main__L_1___axiom
 use        Main__L_2___axiom as Main__L_2___axiom
 use        Main__L_3___axiom as Main__L_3___axiom
 use        Main__L_4___axiom as Main__L_4___axiom
 use        As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
 use        As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_get_line___axiom as As_io_wrapper__as_get_line___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        As_io_wrapper__as_put_line__3___axiom as As_io_wrapper__as_put_line__3___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Angles__angle___axiom as Angles__angle___axiom
 use        Angles__addangles___axiom as Angles__addangles___axiom
 use        Angles__addangles2___axiom as Angles__addangles2___axiom
 use        Main__Tuser_inputS___axiom as Main__Tuser_inputS___axiom
 use        Main__TTuser_inputSP1___axiom as Main__TTuser_inputSP1___axiom
 use        Main__L_1__T12b___axiom as Main__L_1__T12b___axiom

 let def [#"main.ads" 3 0 0][@GP_Subp:main.ads:3] 
   (__void_param : unit)
  requires { [#"main.ads" 3 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:3 *)
  ;
  [#"main.ads" 3 0 0] assume { [#"main.ads" 3 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False False True True) };
  [#"main.ads" 3 0 0] assume { [#"main.ads" 3 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:3 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:3 *)
  ;
  [#"main.ads" 3 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.ads:3 *)
  ;
  [#"main.ads" 3 0 0] try
   ( ();
   ([#"main.adb" 13 0 0] ( [#"main.adb" 13 0 0] assume { [#"main.adb" 13 0 0] (Angles__angle___axiom.default_initial_assumption Main__x.x.int__content False) };
   [#"main.adb" 13 0 0] assume { [#"main.adb" 13 0 0] (Angles__angle___axiom.dynamic_invariant Main__x.x.int__content False False True True) } ));
   ([#"main.adb" 13 0 0] ( [#"main.adb" 13 0 0] assume { [#"main.adb" 13 0 0] (Angles__angle___axiom.default_initial_assumption Main__y.y.int__content False) };
   [#"main.adb" 13 0 0] assume { [#"main.adb" 13 0 0] (Angles__angle___axiom.dynamic_invariant Main__y.y.int__content False False True True) } ));
   ([#"main.adb" 15 0 0] ( [#"main.adb" 15 0 0] assume { [#"main.adb" 15 0 0] (Angles__angle___axiom.default_initial_assumption Main__u.u.int__content False) };
   [#"main.adb" 15 0 0] assume { [#"main.adb" 15 0 0] (Angles__angle___axiom.dynamic_invariant Main__u.u.int__content False False True True) } ));
   ([#"main.adb" 16 0 0] ());
   ([#"main.adb" 16 0 0] ( [#"main.adb" 16 0 0] assume { [#"main.adb" 16 0 0] (Main__Tuser_inputS___axiom.default_initial_assumption Main__user_input.user_input.Array__Int__Standard__character.map__content False) };
   [#"main.adb" 16 0 0] assume { [#"main.adb" 16 0 0] (Main__Tuser_inputS___axiom.dynamic_invariant Main__user_input.user_input.Array__Int__Standard__character.map__content False False True True) } ));
   ([#"main.adb" 19 0 0] ( [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Standard__integer___axiom.default_initial_assumption Main__xtemp.xtemp.int__content False) };
   [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Standard__integer___axiom.dynamic_invariant Main__xtemp.xtemp.int__content False False True True) } ));
   ([#"main.adb" 19 0 0] ( [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Standard__integer___axiom.default_initial_assumption Main__ytemp.ytemp.int__content False) };
   [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Standard__integer___axiom.dynamic_invariant Main__ytemp.ytemp.int__content False False True True) } ));
   ([#"main.adb" 19 0 0] ( [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Standard__integer___axiom.default_initial_assumption Main__last.last.int__content False) };
   [#"main.adb" 19 0 0] assume { [#"main.adb" 19 0 0] (Standard__integer___axiom.dynamic_invariant Main__last.last.int__content False False True True) } ));
   ([#"main.adb" 24 0 0] ());
   ([#"main.adb" 27 0 0] ());
   ([#"main.adb" 38 0 0] ());
   ([#"main.adb" 56 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:22:4] ([#"main.adb" 22 0 0] ()) );
   ( [@GP_Sloc:main.adb:22:4] ([#"main.adb" 22 0 0] ( (As_io_wrapper__as_init_standard_output___axiom.as_init_standard_output(())) )) );
   ( [@GP_Sloc:main.adb:23:4] ([#"main.adb" 23 0 0] ()) );
   ( [@GP_Sloc:main.adb:23:4] ([#"main.adb" 23 0 0] ( (As_io_wrapper__as_init_standard_input___axiom.as_init_standard_input(())) )) );
   ( [@GP_Sloc:main.adb:24:4] ([#"main.adb" 24 0 0] ( () (* Translation of an Ada loop from main.adb:24 *)
   ;
   (if (True) then (
    [#"main.adb" 24 0 0] try
     ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__y.y.int__content in (
      ()))
      in () end ;
     (let temp___311 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : int
     ensures {[#"main.adb" 24 0 0] (result = Main__y.y.int__content)} 
     in _f) in (
      ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
       ()))
       in () end ;
      (let temp___310 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : Spark__text_io__file_type.file_type
      ensures {[#"main.adb" 24 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
      in _f) in (
       ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__last.last.int__content in (
        ()))
        in () end ;
       (let temp___309 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : int
       ensures {[#"main.adb" 24 0 0] (result = Main__last.last.int__content)} 
       in _f) in (
        ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__x.x.int__content in (
         ()))
         in () end ;
        (let temp___308 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : int
        ensures {[#"main.adb" 24 0 0] (result = Main__x.x.int__content)} 
        in _f) in (
         ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
          ()))
          in () end ;
         (let temp___307 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : Spark__text_io__file_type.file_type
         ensures {[#"main.adb" 24 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
         in _f) in (
          ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__ytemp.ytemp.int__content in (
           ()))
           in () end ;
          (let temp___306 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : int
          ensures {[#"main.adb" 24 0 0] (result = Main__ytemp.ytemp.int__content)} 
          in _f) in (
           ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__xtemp.xtemp.int__content in (
            ()))
            in () end ;
           (let temp___305 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : int
           ensures {[#"main.adb" 24 0 0] (result = Main__xtemp.xtemp.int__content)} 
           in _f) in (
            ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__user_input.user_input.Array__Int__Standard__character.map__content in (
             ()))
             in () end ;
            (let temp___304 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : Array__Int__Standard__character.map
            ensures {[#"main.adb" 24 0 0] (result = Main__user_input.user_input.Array__Int__Standard__character.map__content)} 
            in _f) in (
             ( [#"main.adb" 24 0 0] begin ensures {true} let _ = (let _ = Main__u.u.int__content in (
              ()))
              in () end ;
             (let temp___303 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 24 0 0] (val _f : int
             ensures {[#"main.adb" 24 0 0] (result = Main__u.u.int__content)} 
             in _f) in (
              ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:24 *)
              ;
              () (* While loop translating the Ada loop from main.adb:24 *)
              ;
              [#"main.adb" 24 0 0] while True do
               ( () (* Assume implicit invariants from the loop main.adb:24 *)
               ;
               [#"main.adb" 24 0 0] assume { [#"main.adb" 24 0 0] ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Angles__angle___axiom.dynamic_invariant Main__u.u.int__content False True True True) )/\true ) /\ (Main__Tuser_inputS___axiom.dynamic_invariant Main__user_input.user_input.Array__Int__Standard__character.map__content False True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__xtemp.xtemp.int__content False True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__ytemp.ytemp.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False True True True) )/\true ) /\ (Angles__angle___axiom.dynamic_invariant Main__x.x.int__content False True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__last.last.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False True True True) )/\true ) /\ (Angles__angle___axiom.dynamic_invariant Main__y.y.int__content False True True True) )/\true ) };
               () (* Check for absence of RTE in the invariant of loop main.adb:24 *)
               ;
               () (* Loop statements appearing after the loop invariant of loop main.adb:24 *)
               ;
               ();
               ( [@GP_Sloc:main.adb:27:7] ([#"main.adb" 27 0 0] ( () (* Translation of an Ada loop from main.adb:27 *)
               ;
               (if (True) then (
                [#"main.adb" 27 0 0] try
                 ( [#"main.adb" 27 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
                  ()))
                  in () end ;
                 (let temp___279 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 27 0 0] (val _f : Spark__text_io__file_type.file_type
                 ensures {[#"main.adb" 27 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
                 in _f) in (
                  ( [#"main.adb" 27 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
                   ()))
                   in () end ;
                  (let temp___278 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 27 0 0] (val _f : Spark__text_io__file_type.file_type
                  ensures {[#"main.adb" 27 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
                  in _f) in (
                   ( [#"main.adb" 27 0 0] begin ensures {true} let _ = (let _ = Main__xtemp.xtemp.int__content in (
                    ()))
                    in () end ;
                   (let temp___277 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 27 0 0] (val _f : int
                   ensures {[#"main.adb" 27 0 0] (result = Main__xtemp.xtemp.int__content)} 
                   in _f) in (
                    ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:27 *)
                    ;
                    () (* While loop translating the Ada loop from main.adb:27 *)
                    ;
                    [#"main.adb" 27 0 0] while True do
                     ( () (* Assume implicit invariants from the loop main.adb:27 *)
                     ;
                     [#"main.adb" 27 0 0] assume { [#"main.adb" 27 0 0] ( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__xtemp.xtemp.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False True True True) )/\true ) };
                     () (* Check for absence of RTE in the invariant of loop main.adb:27 *)
                     ;
                     () (* Loop statements appearing after the loop invariant of loop main.adb:27 *)
                     ;
                     ();
                     ( [@GP_Sloc:main.adb:28:10] ([#"main.adb" 28 0 0] ()) );
                     ( [@GP_Sloc:main.adb:28:10] ([#"main.adb" 28 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_274.temp___String_Literal_274(()))) ((1 : int)) ((30 : int))))) )) );
                     ( [@GP_Sloc:main.adb:29:17] ([#"main.adb" 29 0 0] ()) );
                     ( [@GP_Sloc:main.adb:29:10] ([#"main.adb" 29 0 0] ()) );
                     ( [@GP_Sloc:main.adb:29:10] ([#"main.adb" 29 0 0] ( (As_io_wrapper__as_get__3___axiom.as_get__3(Main__xtemp.xtemp) ((Standard__string.of_array((Temp___String_Literal_275.temp___String_Literal_275(()))) ((1 : int)) ((43 : int))))) )) );
                     ( [@GP_Sloc:main.adb:31:20] ([#"main.adb" 31 0 0] ()) );
                     ( [@GP_Sloc:main.adb:31:10] ([#"main.adb" 31 0 0] (if ((Boolean.andb(((0 : int) <= Main__xtemp.xtemp.int__content)) ((Main__xtemp.xtemp.int__content <= (359 : int))))) then (
                      [#"main.adb" 31 0 0] raise Main__L_2.L_2))) );
                     ( [@GP_Sloc:main.adb:32:10] ([#"main.adb" 32 0 0] ()) );
                     ( [@GP_Sloc:main.adb:32:10] ([#"main.adb" 32 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_276.temp___String_Literal_276(()))) ((1 : int)) ((39 : int))))) )) );
                     () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:27 *)
                     ;
                     (if (False) then (
                       raise Main__L_2.L_2)) )
                    done )))
                    )))
                   )))
                  )
                with
                 Main__L_2.L_2 -> ()
                end)) )) );
               ( [@GP_Sloc:main.adb:36:7] ([#"main.adb" 36 0 0] ()) );
               ( [@GP_Sloc:main.adb:36:12] ([#"main.adb" 36 0 0] ()) );
               ( [@GP_Sloc:main.adb:36:9] ([#"main.adb" 36 0 0] [#"main.adb" 36 0 0] (Main__x.x.int__content <- ( ([#"main.adb" 36 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:36:12] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:0] [@GP_Shape:L_1_loop__x_assign] [@comment:      X := Xtemp;            ^ main.adb:36:12:VC_RANGE_CHECK] (Angles__angle.range_check_(Main__xtemp.xtemp.int__content)) )) ))) );
               ( [@GP_Sloc:main.adb:38:7] ([#"main.adb" 38 0 0] ( () (* Translation of an Ada loop from main.adb:38 *)
               ;
               (if (True) then (
                [#"main.adb" 38 0 0] try
                 ( [#"main.adb" 38 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
                  ()))
                  in () end ;
                 (let temp___285 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 38 0 0] (val _f : Spark__text_io__file_type.file_type
                 ensures {[#"main.adb" 38 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
                 in _f) in (
                  ( [#"main.adb" 38 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
                   ()))
                   in () end ;
                  (let temp___284 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 38 0 0] (val _f : Spark__text_io__file_type.file_type
                  ensures {[#"main.adb" 38 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
                  in _f) in (
                   ( [#"main.adb" 38 0 0] begin ensures {true} let _ = (let _ = Main__ytemp.ytemp.int__content in (
                    ()))
                    in () end ;
                   (let temp___283 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 38 0 0] (val _f : int
                   ensures {[#"main.adb" 38 0 0] (result = Main__ytemp.ytemp.int__content)} 
                   in _f) in (
                    ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:38 *)
                    ;
                    () (* While loop translating the Ada loop from main.adb:38 *)
                    ;
                    [#"main.adb" 38 0 0] while True do
                     ( () (* Assume implicit invariants from the loop main.adb:38 *)
                     ;
                     [#"main.adb" 38 0 0] assume { [#"main.adb" 38 0 0] ( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__ytemp.ytemp.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False True True True) )/\true ) };
                     () (* Check for absence of RTE in the invariant of loop main.adb:38 *)
                     ;
                     () (* Loop statements appearing after the loop invariant of loop main.adb:38 *)
                     ;
                     ();
                     ( [@GP_Sloc:main.adb:39:10] ([#"main.adb" 39 0 0] ()) );
                     ( [@GP_Sloc:main.adb:39:10] ([#"main.adb" 39 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_280.temp___String_Literal_280(()))) ((1 : int)) ((35 : int))))) )) );
                     ( [@GP_Sloc:main.adb:40:17] ([#"main.adb" 40 0 0] ()) );
                     ( [@GP_Sloc:main.adb:40:10] ([#"main.adb" 40 0 0] ()) );
                     ( [@GP_Sloc:main.adb:40:10] ([#"main.adb" 40 0 0] ( (As_io_wrapper__as_get__3___axiom.as_get__3(Main__ytemp.ytemp) ((Standard__string.of_array((Temp___String_Literal_281.temp___String_Literal_281(()))) ((1 : int)) ((43 : int))))) )) );
                     ( [@GP_Sloc:main.adb:42:20] ([#"main.adb" 42 0 0] ()) );
                     ( [@GP_Sloc:main.adb:42:10] ([#"main.adb" 42 0 0] (if ((Boolean.andb(((0 : int) <= Main__ytemp.ytemp.int__content)) ((Main__ytemp.ytemp.int__content <= (359 : int))))) then (
                      [#"main.adb" 42 0 0] raise Main__L_3.L_3))) );
                     ( [@GP_Sloc:main.adb:43:10] ([#"main.adb" 43 0 0] ()) );
                     ( [@GP_Sloc:main.adb:43:10] ([#"main.adb" 43 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_282.temp___String_Literal_282(()))) ((1 : int)) ((39 : int))))) )) );
                     () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:38 *)
                     ;
                     (if (False) then (
                       raise Main__L_3.L_3)) )
                    done )))
                    )))
                   )))
                  )
                with
                 Main__L_3.L_3 -> ()
                end)) )) );
               ( [@GP_Sloc:main.adb:47:7] ([#"main.adb" 47 0 0] ()) );
               ( [@GP_Sloc:main.adb:47:12] ([#"main.adb" 47 0 0] ()) );
               ( [@GP_Sloc:main.adb:47:9] ([#"main.adb" 47 0 0] [#"main.adb" 47 0 0] (Main__y.y.int__content <- ( ([#"main.adb" 47 0 0] ( [@comment:      Y := Ytemp;            ^ main.adb:47:12:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:L_1_loop__y_assign] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] [@GP_Sloc:main.adb:47:12] (Angles__angle.range_check_(Main__ytemp.ytemp.int__content)) )) ))) );
               ( [@GP_Sloc:main.adb:49:37] ([#"main.adb" 49 0 0] ()) );
               ( [@GP_Sloc:main.adb:49:7] ([#"main.adb" 49 0 0] ()) );
               ( [@GP_Sloc:main.adb:49:7] ([#"main.adb" 49 0 0] ( (Angles__addangles___axiom.addangles(Main__x.x.int__content) (Main__y.y.int__content) (Main__u.u)) )) );
               ( [@GP_Sloc:main.adb:50:7] ([#"main.adb" 50 0 0] ()) );
               ( [@GP_Sloc:main.adb:50:7] ([#"main.adb" 50 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_286.temp___String_Literal_286(()))) ((1 : int)) ((22 : int))))) )) );
               ( [@GP_Sloc:main.adb:51:19] ([#"main.adb" 51 0 0] ()) );
               ( [@GP_Sloc:main.adb:51:7] ([#"main.adb" 51 0 0] ()) );
               ( [@GP_Sloc:main.adb:51:7] ([#"main.adb" 51 0 0] ( (As_io_wrapper__as_put_line__3___axiom.as_put_line__3(Main__u.u.int__content)) )) );
               ( [@GP_Sloc:main.adb:52:7] ([#"main.adb" 52 0 0] ()) );
               ( [@GP_Sloc:main.adb:52:7] ([#"main.adb" 52 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_287.temp___String_Literal_287(()))) ((1 : int)) ((44 : int))))) )) );
               ( [@GP_Sloc:main.adb:54:22] ([#"main.adb" 54 0 0] ()) );
               ( [@GP_Sloc:main.adb:54:7] ([#"main.adb" 54 0 0] ()) );
               ( [@GP_Sloc:main.adb:54:7] ([#"main.adb" 54 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Angles__addangles2___axiom.addangles2(Main__x.x.int__content) (Main__y.y.int__content)))) )) );
               ( [@GP_Sloc:main.adb:56:7] ([#"main.adb" 56 0 0] ( () (* Translation of an Ada loop from main.adb:56 *)
               ;
               (if (True) then (
                [#"main.adb" 56 0 0] try
                 ( [#"main.adb" 56 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
                  ()))
                  in () end ;
                 (let temp___295 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 56 0 0] (val _f : Spark__text_io__file_type.file_type
                 ensures {[#"main.adb" 56 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
                 in _f) in (
                  ( [#"main.adb" 56 0 0] begin ensures {true} let _ = (let _ = Main__last.last.int__content in (
                   ()))
                   in () end ;
                  (let temp___294 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 56 0 0] (val _f : int
                  ensures {[#"main.adb" 56 0 0] (result = Main__last.last.int__content)} 
                  in _f) in (
                   ( [#"main.adb" 56 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
                    ()))
                    in () end ;
                   (let temp___293 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 56 0 0] (val _f : Spark__text_io__file_type.file_type
                   ensures {[#"main.adb" 56 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
                   in _f) in (
                    ( [#"main.adb" 56 0 0] begin ensures {true} let _ = (let _ = Main__user_input.user_input.Array__Int__Standard__character.map__content in (
                     ()))
                     in () end ;
                    (let temp___292 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 56 0 0] (val _f : Array__Int__Standard__character.map
                    ensures {[#"main.adb" 56 0 0] (result = Main__user_input.user_input.Array__Int__Standard__character.map__content)} 
                    in _f) in (
                     ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:56 *)
                     ;
                     () (* While loop translating the Ada loop from main.adb:56 *)
                     ;
                     [#"main.adb" 56 0 0] while True do
                      ( () (* Assume implicit invariants from the loop main.adb:56 *)
                      ;
                      [#"main.adb" 56 0 0] assume { [#"main.adb" 56 0 0] ( ( ( ( ( ( ( ( true /\ (Main__Tuser_inputS___axiom.dynamic_invariant Main__user_input.user_input.Array__Int__Standard__character.map__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Main__last.last.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False True True True) )/\true ) };
                      () (* Check for absence of RTE in the invariant of loop main.adb:56 *)
                      ;
                      () (* Loop statements appearing after the loop invariant of loop main.adb:56 *)
                      ;
                      ();
                      ( [@GP_Sloc:main.adb:57:9] ([#"main.adb" 57 0 0] ()) );
                      ( [@GP_Sloc:main.adb:57:9] ([#"main.adb" 57 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_288.temp___String_Literal_288(()))) ((1 : int)) ((0 : int))))) )) );
                      ( [@GP_Sloc:main.adb:58:9] ([#"main.adb" 58 0 0] ()) );
                      ( [@GP_Sloc:main.adb:58:9] ([#"main.adb" 58 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_289.temp___String_Literal_289(()))) ((1 : int)) ((32 : int))))) )) );
                      ( [@GP_Sloc:main.adb:59:21] ([#"main.adb" 59 0 0] ()) );
                      ( [@GP_Sloc:main.adb:59:33] ([#"main.adb" 59 0 0] ()) );
                      ( [@GP_Sloc:main.adb:59:9] ([#"main.adb" 59 0 0] ()) );
                      ( [@GP_Sloc:main.adb:59:9] ([#"main.adb" 59 0 0] (let as_io_wrapper__as_get_line__item__compl = Main__user_input.user_input.Array__Int__Standard__character.map__content in (
                       [#"main.adb" 59 0 0] let as_io_wrapper__as_get_line__last = { int__content = Main__last.last.int__content } in 
                       [#"main.adb" 59 0 0] let as_io_wrapper__as_get_line__item = { Array__Int__Standard__character.map__content = as_io_wrapper__as_get_line__item__compl } in 
                        ( (As_io_wrapper__as_get_line___axiom.as_get_line(as_io_wrapper__as_get_line__item) ((Standard__integer__rep.of_rep(Main__TTuser_inputSP1.first))) ((Standard__integer__rep.of_rep(Main__TTuser_inputSP1.last))) (as_io_wrapper__as_get_line__last));
                        [#"main.adb" 59 0 0] (Main__user_input.user_input.Array__Int__Standard__character.map__content <- ( (let temp___290 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(as_io_wrapper__as_get_line__item.Array__Int__Standard__character.map__content) (Main__TTuser_inputSP1.first) (Main__TTuser_inputSP1.last)) in (
                         (Array__Int__Standard__character.slide (Standard__string.to_array temp___290) (Standard__string.first temp___290) Main__TTuser_inputSP1.first)))
                         ));
                        [#"main.adb" 59 0 0] (Main__last.last.int__content <- ( as_io_wrapper__as_get_line__last.int__content )) )))
                      ) );
                      ( [@GP_Sloc:main.adb:60:19] ([#"main.adb" 60 0 0] ()) );
                      ( [@GP_Sloc:main.adb:60:9] ([#"main.adb" 60 0 0] (if ((Main__last.last.int__content = (1 : int))) then (
                       [#"main.adb" 60 0 0] raise Main__L_4.L_4))) );
                      ( [@GP_Sloc:main.adb:61:9] ([#"main.adb" 61 0 0] ()) );
                      ( [@GP_Sloc:main.adb:61:9] ([#"main.adb" 61 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_291.temp___String_Literal_291(()))) ((1 : int)) ((31 : int))))) )) );
                      () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:56 *)
                      ;
                      (if (False) then (
                        raise Main__L_4.L_4)) )
                     done )))
                     )))
                    )))
                   )))
                  )
                with
                 Main__L_4.L_4 -> ()
                end)) )) );
               ( [@GP_Sloc:main.adb:63:16] ([#"main.adb" 63 0 0] ()) );
               ( [@GP_Sloc:main.adb:63:6] ([#"main.adb" 63 0 0] (if ((let temp___302 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_298.temp___String_Literal_298(())) in (
               (let temp___301 [@mlw:proxy_symbol] [@introduced] = (let temp___297 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
               (let temp___296 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
                ( [#"main.adb" 63 0 0] assert { [#"main.adb" 63 0 0] ([#"main.adb" 63 0 0] ( [@GP_Shape:L_1_loop__exit__cmp__slice] [@vc:annotation] [@GP_Sloc:main.adb:63:16] [@GP_Reason:VC_RANGE_CHECK] [@comment:     exit when User_Input(1 .. 1) = "n";                ^ main.adb:63:16:VC_RANGE_CHECK] [@GP_Id:2] ( (temp___296 <= temp___297) -> ( ( (Main__TTuser_inputSP1.first <= temp___296) /\ (temp___296 <= Main__TTuser_inputSP1.last) ) /\ ( (Main__TTuser_inputSP1.first <= temp___297) /\ (temp___297 <= Main__TTuser_inputSP1.last) ) ) ) )) };
                Main__user_input.user_input.Array__Int__Standard__character.map__content )))
               ))
                in (
                (Array__Int__Standard__character.bool_eq(temp___301) (Main__L_1__T12b.first) (Main__L_1__T12b.last) (temp___302) ((1 : int)) ((1 : int)))))
               ))
               ) then (
                 raise Main__L_1.L_1))) );
               () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:24 *)
               ;
               (if (False) then (
                 raise Main__L_1.L_1)) )
              done )))
              )))
             )))
            )))
           )))
          )))
         )))
        )))
       )))
      )
    with
     Main__L_1.L_1 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
