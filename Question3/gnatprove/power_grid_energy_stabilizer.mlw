(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "text_io_file_type" defined at spark.ads:61, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io_file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type text_io_file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : text_io_file_type) (b : text_io_file_type) : bool
 
 val constant dummy 
   : text_io_file_type

 
 type text_io_file_type__ref =
  { mutable text_io_file_type__content : text_io_file_type }
 
 function text_io_file_type__ref_text_io_file_type__content__projection 
   (a : text_io_file_type__ref) : text_io_file_type =
  a.text_io_file_type__content
 
 meta "model_projection" function text_io_file_type__ref_text_io_file_type__content__projection
 
 meta "inline:no" function text_io_file_type__ref_text_io_file_type__content__projection
 
 val text_io_file_type__havoc 
   (x : text_io_file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : file_type) (b : file_type) : bool
 
 val constant dummy 
   : file_type

 
 type file_type__ref =
  { mutable file_type__content : file_type }
 
 function file_type__ref_file_type__content__projection 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref_file_type__content__projection
 
 meta "inline:no" function file_type__ref_file_type__content__projection
 
 val file_type__havoc 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "file" defined at spark-text_io.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_readable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 180 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_readable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_open__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 162 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_open__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_open
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_open 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_open__function_guard 
   (temp___result_154 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode__rep
 use        Ada__text_io__file_mode as Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__file_mode.file_mode, 
 predicate in_range = Ada__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_modeB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_modeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_modeB__ref =
  { mutable file_modeB__content : file_modeB }
 
 function file_modeB__ref_file_modeB__content__projection 
   (a : file_modeB__ref) : file_modeB =
  a.file_modeB__content
 
 meta "model_projection" function file_modeB__ref_file_modeB__content__projection
 
 meta "inline:no" function file_modeB__ref_file_modeB__content__projection
 
 val file_modeB__havoc 
   (x : file_modeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB__rep
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_modeB.file_modeB, 
 predicate in_range = Spark__text_io__file_modeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__2__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__2__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__2__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode__rep
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_mode.file_mode, 
 predicate in_range = Spark__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "file" defined at spark-text_io.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__mode__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 165 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__mode__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__mode__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function mode__2 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate mode__2__function_guard 
   (temp___result_155 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_readable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_readable__function_guard 
   (temp___result_156 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_writable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 184 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:184, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_writable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_writable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_writable__function_guard 
   (temp___result_157 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__projection
 
 meta "inline:no" function file_status__ref_file_status__content__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status__rep
 use        Spark__file_status as Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__file_status.file_status, 
 predicate in_range = Spark__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_statusB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_statusB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_statusB__ref =
  { mutable file_statusB__content : file_statusB }
 
 function file_statusB__ref_file_statusB__content__projection 
   (a : file_statusB__ref) : file_statusB =
  a.file_statusB__content
 
 meta "model_projection" function file_statusB__ref_file_statusB__content__projection
 
 meta "inline:no" function file_statusB__ref_file_statusB__content__projection
 
 val file_statusB__havoc 
   (x : file_statusB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB__rep
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_statusB.file_statusB, 
 predicate in_range = Spark__text_io__file_statusB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__2__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__2__projection
 
 meta "inline:no" function file_status__ref_file_status__content__2__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status__rep
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_status.file_status, 
 predicate in_range = Spark__text_io__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "file" defined at spark-text_io.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__status__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 133 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:133, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__status__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function status 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate status__function_guard 
   (temp___result_158 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "electricity_range" defined at global_variables.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type electricity_range =
  < range 0 10000000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10000000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = electricity_range, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type electricity_range__ref =
  { mutable electricity_range__content : electricity_range }
 
 function electricity_range__ref_electricity_range__content__projection 
   (a : electricity_range__ref) : electricity_range =
  a.electricity_range__content
 
 meta "model_projection" function electricity_range__ref_electricity_range__content__projection
 
 meta "inline:no" function electricity_range__ref_electricity_range__content__projection
 
 val electricity_range__havoc 
   (x : electricity_range__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "electricity_range" defined at global_variables.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__electricity_range__rep
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Global_variables__electricity_range.electricity_range) : int =
  (Global_variables__electricity_range.electricity_range'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Global_variables__electricity_range.electricity_range, 
 predicate in_range = Global_variables__electricity_range.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reserve_electricity_range" defined at global_variables.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__reserve_electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reserve_electricity_range =
  < range 0 1000000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reserve_electricity_range, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reserve_electricity_range__ref =
  { mutable reserve_electricity_range__content : reserve_electricity_range }
 
 function reserve_electricity_range__ref_reserve_electricity_range__content__projection 
   (a : reserve_electricity_range__ref) : reserve_electricity_range =
  a.reserve_electricity_range__content
 
 meta "model_projection" function reserve_electricity_range__ref_reserve_electricity_range__content__projection
 
 meta "inline:no" function reserve_electricity_range__ref_reserve_electricity_range__content__projection
 
 val reserve_electricity_range__havoc 
   (x : reserve_electricity_range__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reserve_electricity_range" defined at global_variables.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__reserve_electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Global_variables__reserve_electricity_range.reserve_electricity_range) : int =
  (Global_variables__reserve_electricity_range.reserve_electricity_range'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Global_variables__reserve_electricity_range.reserve_electricity_range, 
 predicate in_range = Global_variables__reserve_electricity_range.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "status_reserved_electricity_type" defined at global_variables.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__status_reserved_electricity_type
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type status_reserved_electricity_type 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = status_reserved_electricity_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type status_reserved_electricity_type__ref =
  { mutable status_reserved_electricity_type__content : status_reserved_electricity_type }
 
 function status_reserved_electricity_type__ref_status_reserved_electricity_type__content__projection 
   (a : status_reserved_electricity_type__ref) : status_reserved_electricity_type =
  a.status_reserved_electricity_type__content
 
 meta "model_projection" function status_reserved_electricity_type__ref_status_reserved_electricity_type__content__projection
 
 meta "inline:no" function status_reserved_electricity_type__ref_status_reserved_electricity_type__content__projection
 
 val status_reserved_electricity_type__havoc 
   (x : status_reserved_electricity_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "status_reserved_electricity_type" defined at global_variables.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__status_reserved_electricity_type__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Global_variables__status_reserved_electricity_type.status_reserved_electricity_type, 
 predicate in_range = Global_variables__status_reserved_electricity_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "status_system_type" defined at global_variables.ads:20, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Global_variables__status_system_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep

 type __split_fields =
  { rec__global_variables__status_system_type__consumption_measured [@model_trace:.18713] [@name:Consumption_Measured] : Global_variables__electricity_range.electricity_range; rec__global_variables__status_system_type__supplied_measured [@model_trace:.18723] [@name:Supplied_Measured] : Global_variables__electricity_range.electricity_range; rec__global_variables__status_system_type__reserved_measured [@name:Reserved_Measured] [@model_trace:.18733] : Global_variables__reserve_electricity_range.reserve_electricity_range; rec__global_variables__status_system_type__status_reserved_electricity [@name:Status_Reserved_Electricity] [@model_trace:.18743] : Global_variables__status_reserved_electricity_type.status_reserved_electricity_type }
 
 function __split_fields_rec__global_variables__status_system_type__consumption_measured__projection [@model_trace:.18713] [@name:Consumption_Measured] 
   (a : __split_fields) : Global_variables__electricity_range.electricity_range =
  a.rec__global_variables__status_system_type__consumption_measured
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__consumption_measured__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__consumption_measured__projection
 
 function __split_fields_rec__global_variables__status_system_type__supplied_measured__projection [@model_trace:.18723] [@name:Supplied_Measured] 
   (a : __split_fields) : Global_variables__electricity_range.electricity_range =
  a.rec__global_variables__status_system_type__supplied_measured
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__supplied_measured__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__supplied_measured__projection
 
 function __split_fields_rec__global_variables__status_system_type__reserved_measured__projection [@name:Reserved_Measured] [@model_trace:.18733] 
   (a : __split_fields) : Global_variables__reserve_electricity_range.reserve_electricity_range =
  a.rec__global_variables__status_system_type__reserved_measured
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__reserved_measured__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__reserved_measured__projection
 
 function __split_fields_rec__global_variables__status_system_type__status_reserved_electricity__projection [@name:Status_Reserved_Electricity] [@model_trace:.18743] 
   (a : __split_fields) : Global_variables__status_reserved_electricity_type.status_reserved_electricity_type =
  a.rec__global_variables__status_system_type__status_reserved_electricity
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__status_reserved_electricity__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__status_reserved_electricity__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate global_variables__status_system_type__consumption_measured__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__consumption_measured__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__consumption_measured__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__consumption_measured_ 
   (a : __rep) : Global_variables__electricity_range.electricity_range
  requires {  (global_variables__status_system_type__consumption_measured__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__consumption_measured) }
 
 predicate global_variables__status_system_type__supplied_measured__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__supplied_measured__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__supplied_measured__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__supplied_measured_ 
   (a : __rep) : Global_variables__electricity_range.electricity_range
  requires {  (global_variables__status_system_type__supplied_measured__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__supplied_measured) }
 
 predicate global_variables__status_system_type__reserved_measured__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__reserved_measured__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__reserved_measured__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__reserved_measured_ 
   (a : __rep) : Global_variables__reserve_electricity_range.reserve_electricity_range
  requires {  (global_variables__status_system_type__reserved_measured__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__reserved_measured) }
 
 predicate global_variables__status_system_type__status_reserved_electricity__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__status_reserved_electricity__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__status_reserved_electricity__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__status_reserved_electricity_ 
   (a : __rep) : Global_variables__status_reserved_electricity_type.status_reserved_electricity_type
  requires {  (global_variables__status_system_type__status_reserved_electricity__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__status_reserved_electricity) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Global_variables__electricity_range__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__consumption_measured) = (Global_variables__electricity_range__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__consumption_measured)) /\ ((Global_variables__electricity_range__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__supplied_measured) = (Global_variables__electricity_range__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__supplied_measured)) )/\( ((Global_variables__reserve_electricity_range__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__reserved_measured) = (Global_variables__reserve_electricity_range__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__reserved_measured))/\((Global_variables__status_reserved_electricity_type__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__status_reserved_electricity) = (Global_variables__status_reserved_electricity_type__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__status_reserved_electricity)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "status_system_type" defined at global_variables.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__status_system_type
 use export Global_variables__status_system_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type status_system_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant global_variables__status_system_type__consumption_measured__first__bit 
   : int

 
 val constant global_variables__status_system_type__consumption_measured__last__bit 
   : int

 
 val constant global_variables__status_system_type__consumption_measured__position 
   : int

 
 axiom global_variables__status_system_type__consumption_measured__first__bit_axiom :
  ((global_variables__status_system_type__consumption_measured__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__consumption_measured__last__bit_axiom :
  ((global_variables__status_system_type__consumption_measured__last__bit ) > (global_variables__status_system_type__consumption_measured__first__bit ))
 
 axiom global_variables__status_system_type__consumption_measured__position_axiom :
  ((global_variables__status_system_type__consumption_measured__position ) >= (0 : int))
 
 val constant global_variables__status_system_type__supplied_measured__first__bit 
   : int

 
 val constant global_variables__status_system_type__supplied_measured__last__bit 
   : int

 
 val constant global_variables__status_system_type__supplied_measured__position 
   : int

 
 axiom global_variables__status_system_type__supplied_measured__first__bit_axiom :
  ((global_variables__status_system_type__supplied_measured__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__supplied_measured__last__bit_axiom :
  ((global_variables__status_system_type__supplied_measured__last__bit ) > (global_variables__status_system_type__supplied_measured__first__bit ))
 
 axiom global_variables__status_system_type__supplied_measured__position_axiom :
  ((global_variables__status_system_type__supplied_measured__position ) >= (0 : int))
 
 val constant global_variables__status_system_type__reserved_measured__first__bit 
   : int

 
 val constant global_variables__status_system_type__reserved_measured__last__bit 
   : int

 
 val constant global_variables__status_system_type__reserved_measured__position 
   : int

 
 axiom global_variables__status_system_type__reserved_measured__first__bit_axiom :
  ((global_variables__status_system_type__reserved_measured__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__reserved_measured__last__bit_axiom :
  ((global_variables__status_system_type__reserved_measured__last__bit ) > (global_variables__status_system_type__reserved_measured__first__bit ))
 
 axiom global_variables__status_system_type__reserved_measured__position_axiom :
  ((global_variables__status_system_type__reserved_measured__position ) >= (0 : int))
 
 val constant global_variables__status_system_type__status_reserved_electricity__first__bit 
   : int

 
 val constant global_variables__status_system_type__status_reserved_electricity__last__bit 
   : int

 
 val constant global_variables__status_system_type__status_reserved_electricity__position 
   : int

 
 axiom global_variables__status_system_type__status_reserved_electricity__first__bit_axiom :
  ((global_variables__status_system_type__status_reserved_electricity__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__status_reserved_electricity__last__bit_axiom :
  ((global_variables__status_system_type__status_reserved_electricity__last__bit ) > (global_variables__status_system_type__status_reserved_electricity__first__bit ))
 
 axiom global_variables__status_system_type__status_reserved_electricity__position_axiom :
  ((global_variables__status_system_type__status_reserved_electricity__position ) >= (0 : int))
 
 val function user_eq 
   (a : status_system_type) (b : status_system_type) : bool
 
 val constant dummy 
   : status_system_type

 
 type status_system_type__ref =
  { mutable status_system_type__content : status_system_type }
 
 function status_system_type__ref_status_system_type__content__projection 
   (a : status_system_type__ref) : status_system_type =
  a.status_system_type__content
 
 meta "model_projection" function status_system_type__ref_status_system_type__content__projection
 
 meta "inline:no" function status_system_type__ref_status_system_type__content__projection
 
 val status_system_type__havoc 
   (x : status_system_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "maximum_reserved_electricity_possible" defined at global_variables.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Global_variables__maximum_reserved_electricity_possible
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant maximum_reserved_electricity_possible [#"global_variables.ads" 11 0 0][@name:Maximum_Reserved_Electricity_Possible] [@model_trace:18631] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T1b" defined at power_grid_energy_stabilizer.adb:20, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_welcome__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (45 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put_line__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"as_io_wrapper.ads" 83 0 0][@name:Item] [@model_projected] [@model_trace:19066] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put_line__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T2b" defined at power_grid_energy_stabilizer.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_welcome__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at power_grid_energy_stabilizer.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_welcome__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (44 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T4b" defined at power_grid_energy_stabilizer.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_welcome__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5b" defined at power_grid_energy_stabilizer.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_welcome__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (45 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at power_grid_energy_stabilizer.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_welcome__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "critical_reserve_level" defined at global_variables.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Global_variables__critical_reserve_level
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant critical_reserve_level [#"global_variables.ads" 12 0 0][@name:Critical_Reserve_level] [@model_trace:18641] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T9b" defined at power_grid_energy_stabilizer.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (79 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10b" defined at power_grid_energy_stabilizer.adb:42, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "prompt_try_again_when_not_integer" defined at as_io_wrapper.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_get__3__prompt_try_again_when_not_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant prompt_try_again_when_not_integer [#"as_io_wrapper.ads" 106 0 0][@model_projected] [@name:Prompt_Try_Again_When_Not_Integer] [@model_trace:19132] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "prompt_try_again_when_not_integer" defined at as_io_wrapper.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__3__prompt_try_again_when_not_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T11b" defined at power_grid_energy_stabilizer.adb:44, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"as_io_wrapper.ads" 59 0 0][@name:Item] [@model_projected] [@model_trace:18983] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "maximum_electricity_possible" defined at global_variables.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Global_variables__maximum_electricity_possible
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant maximum_electricity_possible [#"global_variables.ads" 10 0 0][@name:Maximum_Electricity_Possible] [@model_trace:18621] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"as_io_wrapper.ads" 114 0 0][@name:Item] [@model_trace:19176] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T12b" defined at power_grid_energy_stabilizer.adb:46, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13b" defined at power_grid_energy_stabilizer.adb:54, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (76 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T14b" defined at power_grid_energy_stabilizer.adb:57, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__L_2__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T15b" defined at power_grid_energy_stabilizer.adb:59, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__L_2__T15b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at power_grid_energy_stabilizer.adb:61, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__L_2__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at power_grid_energy_stabilizer.adb:77, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18b" defined at power_grid_energy_stabilizer.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T19b" defined at power_grid_energy_stabilizer.adb:79, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at power_grid_energy_stabilizer.adb:80, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T21b" defined at power_grid_energy_stabilizer.adb:81, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (52 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T22b" defined at power_grid_energy_stabilizer.adb:82, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T23b" defined at power_grid_energy_stabilizer.adb:85, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (53 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at power_grid_energy_stabilizer.adb:94, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T25b" defined at power_grid_energy_stabilizer.adb:95, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T26b" defined at power_grid_energy_stabilizer.adb:96, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T27b" defined at power_grid_energy_stabilizer.adb:98, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T27b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28b" defined at power_grid_energy_stabilizer.adb:99, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (18 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at power_grid_energy_stabilizer.adb:101, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T30b" defined at power_grid_energy_stabilizer.adb:103, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T30b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (28 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31b" defined at power_grid_energy_stabilizer.adb:105, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32b" defined at power_grid_energy_stabilizer.adb:107, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T32b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T33b" defined at power_grid_energy_stabilizer.adb:108, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (35 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T34b" defined at power_grid_energy_stabilizer.adb:110, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T34b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T35b" defined at power_grid_energy_stabilizer.adb:111, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T36b" defined at power_grid_energy_stabilizer.adb:115, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T37b" defined at power_grid_energy_stabilizer.adb:116, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T38b" defined at power_grid_energy_stabilizer.adb:119, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T39b" defined at power_grid_energy_stabilizer.adb:120, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T41b" defined at power_grid_energy_stabilizer.adb:126, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T41b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (9 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T43b" defined at power_grid_energy_stabilizer.adb:127, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T43b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (13 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TTuser_inputSP1" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTuser_inputSP1 =
  < range 1 20 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTuser_inputSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTuser_inputSP1__ref =
  { mutable tTuser_inputSP1__content : tTuser_inputSP1 }
 
 function tTuser_inputSP1__ref_tTuser_inputSP1__content__projection 
   (a : tTuser_inputSP1__ref) : tTuser_inputSP1 =
  a.tTuser_inputSP1__content
 
 meta "model_projection" function tTuser_inputSP1__ref_tTuser_inputSP1__content__projection
 
 meta "inline:no" function tTuser_inputSP1__ref_tTuser_inputSP1__content__projection
 
 val tTuser_inputSP1__havoc 
   (x : tTuser_inputSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTuser_inputSP1" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1__rep
 use        Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1 as Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.tTuser_inputSP1) : int =
  (Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.tTuser_inputSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.tTuser_inputSP1, 
 predicate in_range = Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tuser_inputS" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T44b" defined at power_grid_energy_stabilizer.adb:155, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T44b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (43 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T45b" defined at power_grid_energy_stabilizer.adb:156, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T45b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (112 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T46b" defined at power_grid_energy_stabilizer.adb:157, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T46b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T47b" defined at power_grid_energy_stabilizer.adb:158, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T47b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (50 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48b" defined at power_grid_energy_stabilizer.adb:160, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T48b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T49b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t49b =
  < range 1 1 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t49b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t49b__ref =
  { mutable t49b__content : t49b }
 
 function t49b__ref_t49b__content__projection 
   (a : t49b__ref) : t49b =
  a.t49b__content
 
 meta "model_projection" function t49b__ref_t49b__content__projection
 
 meta "inline:no" function t49b__ref_t49b__content__projection
 
 val t49b__havoc 
   (x : t49b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T49b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T49b__rep
 use        Power_grid_energy_stabilizer__refill_reserve__T49b as Power_grid_energy_stabilizer__refill_reserve__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Power_grid_energy_stabilizer__refill_reserve__T49b.t49b) : int =
  (Power_grid_energy_stabilizer__refill_reserve__T49b.t49b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Power_grid_energy_stabilizer__refill_reserve__T49b.t49b, 
 predicate in_range = Power_grid_energy_stabilizer__refill_reserve__T49b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T50b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T50b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T51b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__refill_reserve__T51b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T52b" defined at power_grid_energy_stabilizer.adb:175, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T52b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T53b" defined at power_grid_energy_stabilizer.adb:176, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T53b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T54b" defined at power_grid_energy_stabilizer.adb:177, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T55b" defined at power_grid_energy_stabilizer.adb:178, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T56b" defined at power_grid_energy_stabilizer.adb:180, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T56b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T57b" defined at power_grid_energy_stabilizer.adb:181, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T57b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T58b" defined at power_grid_energy_stabilizer.adb:182, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_reserve_levels__T58b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_input [#"spark-text_io.ads" 102 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_output [#"spark-text_io.ads" 103 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_error" defined at spark-text_io.ads:104, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_error
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_error [#"spark-text_io.ads" 104 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_error" defined at spark-text_io.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "status_system" defined at global_variables.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Global_variables__status_system
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 val status_system__split_fields [#"global_variables.ads" 29 0 0][@name:Status_System] [@model_projected] [@model_trace:18764]  : Global_variables__status_system_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "status_system" defined at global_variables.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Global_variables__status_system___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "electricity" defined at power_grid_energy_stabilizer.adb:37, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__read_consumption__electricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val electricity [#"power_grid_energy_stabilizer.adb" 37 0 0][@model_projected] [@name:Electricity] [@model_trace:2417]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "electricity" defined at power_grid_energy_stabilizer.adb:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_consumption__electricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at as_io_wrapper.ads:106, created in Gnat2Why.Decls.Translate_Variable *)
module As_io_wrapper__as_get__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val item [#"as_io_wrapper.ads" 106 0 0][@name:Item] [@model_trace:19123] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "electricity" defined at power_grid_energy_stabilizer.adb:52, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__read_supply__electricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val electricity [#"power_grid_energy_stabilizer.adb" 52 0 0][@model_projected] [@name:Electricity] [@model_trace:2483]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "electricity" defined at power_grid_energy_stabilizer.adb:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_supply__electricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "electricity_required" defined at power_grid_energy_stabilizer.adb:67, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required
 use        "_gnatprove_standard".Main
 use        "int".Int

 val electricity_required [#"power_grid_energy_stabilizer.adb" 67 0 0][@name:Electricity_Required] [@model_projected] [@model_trace:2549]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "electricity_required" defined at power_grid_energy_stabilizer.adb:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "remaining_supply" defined at power_grid_energy_stabilizer.adb:133, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__refill_reserve__remaining_supply
 use        "_gnatprove_standard".Main
 use        "int".Int

 val remaining_supply [#"power_grid_energy_stabilizer.adb" 133 0 0][@model_projected] [@name:Remaining_Supply] [@model_trace:2800]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "remaining_supply" defined at power_grid_energy_stabilizer.adb:133, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__refill_reserve__remaining_supply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "reserve_total" defined at power_grid_energy_stabilizer.adb:134, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__refill_reserve__reserve_total
 use        "_gnatprove_standard".Main
 use        "int".Int

 val reserve_total [#"power_grid_energy_stabilizer.adb" 134 0 0][@model_trace:2809] [@model_projected] [@name:Reserve_Total]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "reserve_total" defined at power_grid_energy_stabilizer.adb:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__refill_reserve__reserve_total___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "user_input" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__refill_reserve__user_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val user_input [#"power_grid_energy_stabilizer.adb" 135 0 0][@model_projected] [@name:User_Input] [@model_trace:2818]  : Array__Int__Standard__character.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "user_input" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__refill_reserve__user_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at as_io_wrapper.ads:53, created in Gnat2Why.Decls.Translate_Variable *)
module As_io_wrapper__as_get__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"as_io_wrapper.ads" 53 0 0][@name:Item] [@model_trace:18948] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"as_io_wrapper.ads" 53 0 0][@name:Item] [@model_projected] [@model_trace:18948'First] 
   : Standard__integer.integer

 
 val constant item__last [#"as_io_wrapper.ads" 53 0 0][@name:Item] [@model_trace:18948'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "init" defined at power_grid_energy_stabilizer.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print_welcome" defined at power_grid_energy_stabilizer.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__print_welcome
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_critical" defined at power_grid_energy_stabilizer.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__is_critical
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 val function is_critical 
   (global_variables__status_system__fields : Global_variables__status_system_type.__split_fields) : bool
 
 val predicate is_critical__function_guard 
   (temp___result_159 : bool) (global_variables__status_system__fields : Global_variables__status_system_type.__split_fields)

end

(* Module for possibly declaring a logic function for "read_consumption" defined at power_grid_energy_stabilizer.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__read_consumption
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "read_supply" defined at power_grid_energy_stabilizer.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__read_supply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "energy_stabilizerg_system" defined at power_grid_energy_stabilizer.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print_status" defined at power_grid_energy_stabilizer.ads:64, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__print_status
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "status_electricity_system_to_string" defined at power_grid_energy_stabilizer.ads:69, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Global_variables__status_system_type as Global_variables__status_system_type

 val function status_electricity_system_to_string 
   (global_variables__status_system__fields : Global_variables__status_system_type.__split_fields) : Standard__string.string
 
 val predicate status_electricity_system_to_string__function_guard 
   (temp___result_160 : Standard__string.string) (global_variables__status_system__fields : Global_variables__status_system_type.__split_fields)

end

(* Module for possibly declaring a logic function for "refill_reserve" defined at power_grid_energy_stabilizer.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__refill_reserve
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print_reserve_levels" defined at power_grid_energy_stabilizer.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__print_reserve_levels
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_init_standard_input" defined at as_io_wrapper.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_init_standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_init_standard_output" defined at as_io_wrapper.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_init_standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put_line" defined at as_io_wrapper.ads:83, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at power_grid_energy_stabilizer.adb:40, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Power_grid_energy_stabilizer__read_consumption__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at power_grid_energy_stabilizer.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_consumption__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_get__3" defined at as_io_wrapper.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_get__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put__2" defined at as_io_wrapper.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put__3" defined at as_io_wrapper.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at power_grid_energy_stabilizer.adb:55, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Power_grid_energy_stabilizer__read_supply__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at power_grid_energy_stabilizer.adb:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_supply__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_get__2" defined at as_io_wrapper.ads:53, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_get__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io_file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io_file_type as Spark__text_io_file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_165 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_165 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_165 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_166 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_167 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_166 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_167 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_166 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_167 : bool) }

end

(* Module giving axioms for type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_172 : Spark__text_io__file_type.file_type) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_172 : Spark__text_io__file_type.file_type) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_172 : Spark__text_io__file_type.file_type) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_173 : Spark__text_io__file_type.file_type) (temp___skip_top_level_174 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_173 : Spark__text_io__file_type.file_type) (temp___skip_top_level_174 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_173 : Spark__text_io__file_type.file_type) (temp___skip_top_level_174 : bool) }

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__file_mode as Ada__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) =
  (if (( temp___is_init_175 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_179)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_180 : int) (temp___skip_top_level_181 : bool) }

end

(* Module giving axioms for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_modeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  (if (( temp___is_init_182 \/ (Spark__text_io__file_modeB.first <= Spark__text_io__file_modeB.last) )) then (
   (Spark__text_io__file_modeB.dynamic_property Spark__text_io__file_modeB.first Spark__text_io__file_modeB.last temp___expr_186)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_187 : int) (temp___skip_top_level_188 : bool) }

end

(* Module giving axioms for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_mode as Spark__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  (if (( temp___is_init_189 \/ (Spark__text_io__file_mode.first <= Spark__text_io__file_mode.last) )) then (
   (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last temp___expr_193)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : int) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__file_status as Spark__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) =
  (if (( temp___is_init_207 \/ (Spark__file_status.first <= Spark__file_status.last) )) then (
   (Spark__file_status.dynamic_property Spark__file_status.first Spark__file_status.last temp___expr_211)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_212 : int) (temp___skip_top_level_213 : bool) }

end

(* Module giving axioms for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_statusB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB

 predicate dynamic_invariant [@inline] 
   (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) =
  (if (( temp___is_init_214 \/ (Spark__text_io__file_statusB.first <= Spark__text_io__file_statusB.last) )) then (
   (Spark__text_io__file_statusB.dynamic_property Spark__text_io__file_statusB.first Spark__text_io__file_statusB.last temp___expr_218)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_219 : int) (temp___skip_top_level_220 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_219 : int) (temp___skip_top_level_220 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_219 : int) (temp___skip_top_level_220 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_status as Spark__text_io__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) =
  (if (( temp___is_init_221 \/ (Spark__text_io__file_status.first <= Spark__text_io__file_status.last) )) then (
   (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last temp___expr_225)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_226 : int) (temp___skip_top_level_227 : bool) }

end

(* Module giving axioms for type "electricity_range" defined at global_variables.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__electricity_range___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__electricity_range as Global_variables__electricity_range

 predicate dynamic_invariant [@inline] 
   (temp___expr_238 : int) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool) =
  (if (( temp___is_init_234 \/ (Global_variables__electricity_range.first <= Global_variables__electricity_range.last) )) then (
   (Global_variables__electricity_range.dynamic_property Global_variables__electricity_range.first Global_variables__electricity_range.last temp___expr_238)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_238 : int) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_238 : int) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_239 : int) (temp___skip_top_level_240 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_239 : int) (temp___skip_top_level_240 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_239 : int) (temp___skip_top_level_240 : bool) }

end

(* Module giving axioms for type "reserve_electricity_range" defined at global_variables.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__reserve_electricity_range___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range

 predicate dynamic_invariant [@inline] 
   (temp___expr_245 : int) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool) =
  (if (( temp___is_init_241 \/ (Global_variables__reserve_electricity_range.first <= Global_variables__reserve_electricity_range.last) )) then (
   (Global_variables__reserve_electricity_range.dynamic_property Global_variables__reserve_electricity_range.first Global_variables__reserve_electricity_range.last temp___expr_245)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_245 : int) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_245 : int) (temp___is_init_241 : bool) (temp___skip_constant_242 : bool) (temp___do_toplevel_243 : bool) (temp___do_typ_inv_244 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_246 : int) (temp___skip_top_level_247 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_246 : int) (temp___skip_top_level_247 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_246 : int) (temp___skip_top_level_247 : bool) }

end

(* Module giving axioms for type "status_reserved_electricity_type" defined at global_variables.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__status_reserved_electricity_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_252 : int) (temp___is_init_248 : bool) (temp___skip_constant_249 : bool) (temp___do_toplevel_250 : bool) (temp___do_typ_inv_251 : bool) =
  (if (( temp___is_init_248 \/ (Global_variables__status_reserved_electricity_type.first <= Global_variables__status_reserved_electricity_type.last) )) then (
   (Global_variables__status_reserved_electricity_type.dynamic_property Global_variables__status_reserved_electricity_type.first Global_variables__status_reserved_electricity_type.last temp___expr_252)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_252 : int) (temp___is_init_248 : bool) (temp___skip_constant_249 : bool) (temp___do_toplevel_250 : bool) (temp___do_typ_inv_251 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_252 : int) (temp___is_init_248 : bool) (temp___skip_constant_249 : bool) (temp___do_toplevel_250 : bool) (temp___do_typ_inv_251 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_253 : int) (temp___skip_top_level_254 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_253 : int) (temp___skip_top_level_254 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_253 : int) (temp___skip_top_level_254 : bool) }

end

(* Module giving axioms for type "status_system_type" defined at global_variables.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__status_system_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_259 : Global_variables__status_system_type.status_system_type) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_259 : Global_variables__status_system_type.status_system_type) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_259 : Global_variables__status_system_type.status_system_type) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool) (temp___do_typ_inv_258 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_260 : Global_variables__status_system_type.status_system_type) (temp___skip_top_level_261 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_260 : Global_variables__status_system_type.status_system_type) (temp___skip_top_level_261 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_260 : Global_variables__status_system_type.status_system_type) (temp___skip_top_level_261 : bool) }

end

(* Module giving axioms for type "T1b" defined at power_grid_energy_stabilizer.adb:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_welcome__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at power_grid_energy_stabilizer.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_welcome__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at power_grid_energy_stabilizer.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_welcome__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at power_grid_energy_stabilizer.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_welcome__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at power_grid_energy_stabilizer.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_welcome__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at power_grid_energy_stabilizer.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_welcome__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T9b" defined at power_grid_energy_stabilizer.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at power_grid_energy_stabilizer.adb:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at power_grid_energy_stabilizer.adb:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at power_grid_energy_stabilizer.adb:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at power_grid_energy_stabilizer.adb:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at power_grid_energy_stabilizer.adb:57, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__L_2__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15b" defined at power_grid_energy_stabilizer.adb:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__L_2__T15b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at power_grid_energy_stabilizer.adb:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__L_2__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at power_grid_energy_stabilizer.adb:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at power_grid_energy_stabilizer.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19b" defined at power_grid_energy_stabilizer.adb:79, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at power_grid_energy_stabilizer.adb:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T21b" defined at power_grid_energy_stabilizer.adb:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at power_grid_energy_stabilizer.adb:82, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23b" defined at power_grid_energy_stabilizer.adb:85, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at power_grid_energy_stabilizer.adb:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at power_grid_energy_stabilizer.adb:95, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at power_grid_energy_stabilizer.adb:96, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T27b" defined at power_grid_energy_stabilizer.adb:98, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T27b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at power_grid_energy_stabilizer.adb:99, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at power_grid_energy_stabilizer.adb:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T30b" defined at power_grid_energy_stabilizer.adb:103, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T30b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31b" defined at power_grid_energy_stabilizer.adb:105, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T32b" defined at power_grid_energy_stabilizer.adb:107, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T32b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at power_grid_energy_stabilizer.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T34b" defined at power_grid_energy_stabilizer.adb:110, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T34b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at power_grid_energy_stabilizer.adb:111, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at power_grid_energy_stabilizer.adb:115, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at power_grid_energy_stabilizer.adb:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at power_grid_energy_stabilizer.adb:119, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39b" defined at power_grid_energy_stabilizer.adb:120, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T41b" defined at power_grid_energy_stabilizer.adb:126, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T41b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T43b" defined at power_grid_energy_stabilizer.adb:127, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T43b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTuser_inputSP1" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tuser_inputS" defined at power_grid_energy_stabilizer.adb:135, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_273 : Array__Int__Standard__character.map) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_273 : Array__Int__Standard__character.map) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_273 : Array__Int__Standard__character.map) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_275 : Array__Int__Standard__character.map) (temp___skip_top_level_276 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_275 : Array__Int__Standard__character.map) (temp___skip_top_level_276 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_275 : Array__Int__Standard__character.map) (temp___skip_top_level_276 : bool) }

end

(* Module giving axioms for type "T44b" defined at power_grid_energy_stabilizer.adb:155, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T45b" defined at power_grid_energy_stabilizer.adb:156, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T45b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T46b" defined at power_grid_energy_stabilizer.adb:157, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T46b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47b" defined at power_grid_energy_stabilizer.adb:158, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T47b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T48b" defined at power_grid_energy_stabilizer.adb:160, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T48b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T49b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T50b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T51b" defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__refill_reserve__T51b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T52b" defined at power_grid_energy_stabilizer.adb:175, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T52b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T53b" defined at power_grid_energy_stabilizer.adb:176, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T53b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T54b" defined at power_grid_energy_stabilizer.adb:177, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T54b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at power_grid_energy_stabilizer.adb:178, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T56b" defined at power_grid_energy_stabilizer.adb:180, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T56b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T57b" defined at power_grid_energy_stabilizer.adb:181, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T57b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T58b" defined at power_grid_energy_stabilizer.adb:182, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels__T58b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:20, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_282
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_282 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_282__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_282 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (1 : int))) = (61 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (2 : int))) = (61 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (3 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (4 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (5 : int))) = (61 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (6 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (7 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (8 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (9 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (10 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (11 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (12 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (13 : int))) = (61 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (14 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (15 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (16 : int))) = (61 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (17 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (18 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (19 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (20 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (21 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (22 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (23 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (24 : int))) = (61 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (25 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (26 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (27 : int))) = (61 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (28 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (29 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (30 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (31 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (32 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (33 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (34 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (35 : int))) = (61 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (36 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (37 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (38 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (39 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (40 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (41 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (42 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (43 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (44 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_282 __void_param) (45 : int))) = (61 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:21, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_283
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_283 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_283__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_283 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:22, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_284
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_284 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_284__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_284 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (2 : int))) = (80 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (4 : int))) = (119 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (8 : int))) = (71 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (9 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (10 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (11 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (13 : int))) = (69 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (14 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (15 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (16 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (17 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (18 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (20 : int))) = (83 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (21 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (22 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (23 : int))) = (98 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (24 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (25 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (26 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (27 : int))) = (122 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (28 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (29 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (30 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (31 : int))) = (83 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (32 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (34 : int))) = (122 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (35 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (36 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (37 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (39 : int))) = (83 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (40 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (41 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (42 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (43 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_284 __void_param) (44 : int))) = (109 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:23, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_285
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_285 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_285__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_285 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:24, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_286
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_286 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_286__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_286 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (1 : int))) = (61 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (2 : int))) = (61 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (3 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (4 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (5 : int))) = (61 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (6 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (7 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (8 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (9 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (10 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (11 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (12 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (13 : int))) = (61 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (14 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (15 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (16 : int))) = (61 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (17 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (18 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (19 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (20 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (21 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (22 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (23 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (24 : int))) = (61 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (25 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (26 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (27 : int))) = (61 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (28 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (29 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (30 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (31 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (32 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (33 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (34 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (35 : int))) = (61 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (36 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (37 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (38 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (39 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (40 : int))) = (61 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (41 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (42 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (43 : int))) = (61 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (44 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_286 __void_param) (45 : int))) = (61 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:25, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_287
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_287 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_287__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_287 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:39, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_288
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_288 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_288__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_288 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (9 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (10 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (14 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (16 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (17 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (18 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (19 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (20 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (21 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (22 : int))) = (116 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (24 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (25 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (26 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (27 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (28 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (29 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (30 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (31 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (32 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (34 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (36 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (38 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (39 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (40 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (41 : int))) = (109 : int)) ) ) ) ) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (42 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (43 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (44 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (45 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (46 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (47 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (48 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (49 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (50 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (51 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (52 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (53 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (54 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (55 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (56 : int))) = (98 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (57 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (58 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (59 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (60 : int))) = (104 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (61 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (62 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (63 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (64 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (65 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (66 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (67 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (68 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (69 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (70 : int))) = (40 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (71 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (72 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (73 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (74 : int))) = (87 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (75 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (76 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (77 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (78 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (79 : int))) = (41 : int)) ) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:42, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_289
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_289 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_289__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_289 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (5 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (10 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (11 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (14 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (16 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (17 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (20 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (21 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (23 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (25 : int))) = (114 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_290
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_290 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_290__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_290 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (9 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (11 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (14 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (18 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (19 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (20 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (21 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (23 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (24 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (25 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (26 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (27 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (28 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (29 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (30 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (31 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (32 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (34 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (35 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (36 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (37 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:46, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_291
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_291 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_291__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_291 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:54, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_298
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_298 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_298__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_298 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (9 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (10 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (14 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (16 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (17 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (18 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (19 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (21 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (24 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (25 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (26 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (27 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (28 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (29 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (30 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (31 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (32 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (33 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (34 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (35 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (36 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (37 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (38 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (39 : int))) = (112 : int)) ) ) ) ) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (40 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (41 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (42 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (43 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (44 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (45 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (46 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (47 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (48 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (49 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (50 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (51 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (52 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (53 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (54 : int))) = (121 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (55 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (56 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (57 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (58 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (59 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (60 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (61 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (62 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (63 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (64 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (65 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (66 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (67 : int))) = (40 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (68 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (69 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (70 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (71 : int))) = (87 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (72 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (73 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (74 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (75 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_298 __void_param) (76 : int))) = (41 : int)) ) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:57, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_299
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_299 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_299__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_299 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (5 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (8 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (9 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (11 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (12 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (14 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (15 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (17 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (18 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (19 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (21 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (22 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (23 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (24 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (25 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (26 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_299 __void_param) (27 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:59, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_300
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_300 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_300__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_300 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (9 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (11 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (14 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (18 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (19 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (20 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (21 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (23 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (24 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (25 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (26 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (27 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (28 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (29 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (30 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (31 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (32 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (34 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (35 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (36 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_300 __void_param) (37 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:61, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_301
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_301 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_301__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_301 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:77, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_312
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_312 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_312__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_312 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (1 : int))) = (126 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (2 : int))) = (126 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (3 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (4 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (5 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (6 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (7 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (8 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (9 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (10 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (11 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (12 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (13 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (14 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (15 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (16 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (17 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (18 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (19 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (20 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (21 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (22 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (23 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (24 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (25 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (26 : int))) = (126 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (27 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (28 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (29 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (30 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (31 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (32 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (33 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (34 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (35 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (36 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (37 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (38 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (39 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (40 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (41 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (42 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (43 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (44 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (45 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (46 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (47 : int))) = (126 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (48 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_312 __void_param) (49 : int))) = (126 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:78, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_313
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_313 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_313__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_313 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:79, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_314
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_314 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_314__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_314 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (2 : int))) = (33 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (3 : int))) = (33 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_314 __void_param) (4 : int))) = (33 : int)) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:80, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_315
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_315 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_315__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_315 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (1 : int))) = (83 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (5 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (6 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (8 : int))) = (67 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (9 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (11 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (12 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (13 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (14 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_315 __void_param) (15 : int))) = (108 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:81, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_316
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_316 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_316__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_316 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (4 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (8 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (9 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (10 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (11 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (12 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (13 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (15 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (17 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (18 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (19 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (20 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (21 : int))) = (103 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (22 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (23 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (24 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (25 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (26 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (27 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (28 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (29 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (30 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (31 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (32 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (33 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (34 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (35 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (36 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (37 : int))) = (121 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (39 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (40 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (41 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (42 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (43 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (44 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (45 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (46 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (47 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (48 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (49 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (50 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (51 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_316 __void_param) (52 : int))) = (100 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:82, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_317
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_317 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_317__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_317 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (2 : int))) = (117 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (5 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (6 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (7 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (8 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (9 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (10 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (11 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (12 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (13 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (14 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (15 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (16 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (17 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (20 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (21 : int))) = (102 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (23 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (24 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (25 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (26 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (27 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (28 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (29 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (30 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (31 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (32 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (33 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (34 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (35 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (36 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (37 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (38 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (39 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (40 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (41 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (42 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (43 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (44 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (45 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (46 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (47 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (48 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (49 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (50 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (51 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (52 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (53 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (54 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (55 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (56 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (57 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (58 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (59 : int))) = (112 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (60 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (61 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_317 __void_param) (62 : int))) = (121 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:85, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_322
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_322 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_322__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_322 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (1 : int))) = (83 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (2 : int))) = (117 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (4 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (5 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (6 : int))) = (121 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (8 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (9 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (10 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (11 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (12 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (14 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (15 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (16 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (17 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (19 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (20 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (21 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (22 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (23 : int))) = (83 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (24 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (25 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (26 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (27 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (28 : int))) = (115 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (29 : int))) = (95 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (30 : int))) = (83 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (31 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (32 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (34 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (35 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (36 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (37 : int))) = (83 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (38 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (39 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (40 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (41 : int))) = (108 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (42 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (43 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (44 : int))) = (100 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (45 : int))) = (95 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (46 : int))) = (77 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (47 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (48 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (49 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (50 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (51 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (52 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_322 __void_param) (53 : int))) = (100 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:94, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_325
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_325 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_325__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_325 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:95, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_326
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_326 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_326__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_326 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (1 : int))) = (126 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (2 : int))) = (126 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (3 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (4 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (5 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (6 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (7 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (8 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (9 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (10 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (11 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (12 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (13 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (14 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (15 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (16 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (17 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (18 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (19 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (20 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (21 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (22 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (23 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (24 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (25 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (26 : int))) = (126 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (27 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (28 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (29 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (30 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (31 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (32 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (33 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (34 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (35 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (36 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (37 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (38 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (39 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (40 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (41 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (42 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (43 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (44 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (45 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (46 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (47 : int))) = (126 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (48 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_326 __void_param) (49 : int))) = (126 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:96, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_327
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_327 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_327__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_327 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (7 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (8 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (10 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (11 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (13 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (14 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (15 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (17 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (18 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (19 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (21 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (22 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_327 __void_param) (23 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:98, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_328
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_328 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_328__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_328 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_328 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_328 __void_param) (2 : int))) = (119 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_328 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_328 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_328 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_328 __void_param) (6 : int))) = (115 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:99, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_329
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_329 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_329__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_329 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (4 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (6 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (7 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (8 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (10 : int))) = (115 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (11 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (12 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (13 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (14 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (15 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (16 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (17 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_329 __void_param) (18 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:101, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_330
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_330 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_330__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_330 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (2 : int))) = (119 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (6 : int))) = (115 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:103, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_331
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_331 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_331__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_331 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (6 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (9 : int))) = (76 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (11 : int))) = (118 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (12 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (13 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (14 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (15 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (17 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (19 : int))) = (67 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (20 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (21 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (22 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (23 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (24 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (25 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (26 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (27 : int))) = (33 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_331 __void_param) (28 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:105, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_332
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_332 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_332__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_332 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (6 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (9 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (11 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (12 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (13 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (14 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (16 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_332 __void_param) (17 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:107, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_333
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_333 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_333__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_333 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:108, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_334
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_334 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_334__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_334 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (7 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (8 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (10 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (11 : int))) = (121 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (13 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (15 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (17 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (18 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (19 : int))) = (105 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (21 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (23 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (24 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (26 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (27 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (28 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (29 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (30 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (31 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (32 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (33 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (34 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (35 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:110, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_335
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_335 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_335__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_335 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (2 : int))) = (119 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_335 __void_param) (6 : int))) = (115 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:111, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_336
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_336 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_336__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_336 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (5 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (7 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (8 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (9 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (11 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (13 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (14 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (15 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (16 : int))) = (121 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (18 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (19 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (20 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (21 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (23 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (24 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (25 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (26 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (27 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (28 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (29 : int))) = (97 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (30 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (31 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (32 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (33 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (34 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (36 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_336 __void_param) (37 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:115, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_337
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_337 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_337__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_337 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (2 : int))) = (119 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (6 : int))) = (115 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:116, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_338
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_338 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_338__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_338 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (1 : int))) = (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (2 : int))) = (32 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (3 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (6 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_338 __void_param) (7 : int))) = (115 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:119, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_339
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_339 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_339__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_339 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (1 : int))) = (126 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (2 : int))) = (126 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (3 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (4 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (5 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (6 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (7 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (8 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (9 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (10 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (11 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (12 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (13 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (14 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (15 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (16 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (17 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (18 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (19 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (20 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (21 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (22 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (23 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (24 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (25 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (26 : int))) = (126 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (27 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (28 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (29 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (30 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (31 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (32 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (33 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (34 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (35 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (36 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (37 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (38 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (39 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (40 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (41 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (42 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (43 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (44 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (45 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (46 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (47 : int))) = (126 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (48 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_339 __void_param) (49 : int))) = (126 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:120, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_340
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_340 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_340__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_340 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:126, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_341
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_341 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_341__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_341 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (2 : int))) = (99 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (4 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (5 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (6 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (7 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (8 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_341 __void_param) (9 : int))) = (100 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:127, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_342
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_342 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_342__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_342 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (4 : int))) = (95 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (5 : int))) = (65 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (6 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (7 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (8 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (9 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (10 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (11 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_342 __void_param) (13 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:155, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_348
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_348 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_348__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_348 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (5 : int))) = (98 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (6 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (7 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (9 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (10 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (11 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (13 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (15 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (16 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (18 : int))) = (118 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (19 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (20 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (21 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (22 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (23 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (24 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (25 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (26 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (27 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (28 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (29 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (30 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (31 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (32 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (33 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (34 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (35 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (36 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (37 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (38 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (39 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (40 : int))) = (118 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (41 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (42 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_348 __void_param) (43 : int))) = (115 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:156, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_349
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_349 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_349__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_349 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (4 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (5 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (8 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (9 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (10 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (11 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (12 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (13 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (16 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (17 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (18 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (19 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (20 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (21 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (22 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (23 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (24 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (25 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (26 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (27 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (28 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (29 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (30 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (31 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (32 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (33 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (34 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (35 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (36 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (37 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (38 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (39 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (40 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (41 : int))) = (103 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (42 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (43 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (44 : int))) = (102 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (45 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (46 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (47 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (48 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (49 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (50 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (51 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (52 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (53 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (54 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (55 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (56 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (57 : int))) = (99 : int)) ) ) ) ) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (58 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (59 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (60 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (61 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (62 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (63 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (64 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (65 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (66 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (67 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (68 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (69 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (70 : int))) = (102 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (71 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (72 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (73 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (74 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (75 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (76 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (77 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (78 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (79 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (80 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (81 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (82 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (83 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (84 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (85 : int))) = (121 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (86 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (87 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (88 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (89 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (90 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (91 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (92 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (93 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (94 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (95 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (96 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (97 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (98 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (99 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (100 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (101 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (102 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (103 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (104 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (105 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (106 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (107 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (108 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (109 : int))) = (99 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (110 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (111 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_349 __void_param) (112 : int))) = (63 : int)) ) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:157, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_350
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_350 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_350__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_350 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:158, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_351
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_351 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_351__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_351 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (5 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (10 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (11 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (13 : int))) = (40 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (14 : int))) = (121 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (15 : int))) = (47 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (16 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (17 : int))) = (41 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (18 : int))) = (63 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (19 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (20 : int))) = (80 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (21 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (23 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (24 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (25 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (26 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (27 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (28 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (29 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (30 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (31 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (32 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (33 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (34 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (35 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (36 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (37 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (38 : int))) = (45 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (39 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (40 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (41 : int))) = (112 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (42 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (43 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (44 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (45 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (46 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (47 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (48 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (49 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_351 __void_param) (50 : int))) = (103 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:160, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_353
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_353 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_353__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_353 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:161, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_358
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_358 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_358__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_358 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_358 __void_param) (1 : int))) = (121 : int)))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:175, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_363
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_363 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_363__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_363 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (1 : int))) = (126 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (2 : int))) = (126 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (3 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (4 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (5 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (6 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (7 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (8 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (9 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (10 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (11 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (12 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (13 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (14 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (15 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (16 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (17 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (18 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (19 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (20 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (21 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (22 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (23 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (24 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (25 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (26 : int))) = (126 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (27 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (28 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (29 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (30 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (31 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (32 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (33 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (34 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (35 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (36 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (37 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (38 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (39 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (40 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (41 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (42 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (43 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (44 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (45 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (46 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (47 : int))) = (126 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (48 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_363 __void_param) (49 : int))) = (126 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:176, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_364
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_364 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_364__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_364 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (2 : int))) = (45 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (4 : int))) = (65 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (5 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (6 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (8 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (9 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (10 : int))) = (82 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (11 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (12 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (13 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (14 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (15 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (16 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (17 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (18 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (20 : int))) = (82 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (21 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (22 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (23 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (24 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (25 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (26 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (27 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (29 : int))) = (45 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (30 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:177, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_365
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_365 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_365__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_365 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:178, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_366
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_366 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_366__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_366 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (7 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (8 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (10 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (11 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (13 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (15 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (16 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (17 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (18 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (19 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (21 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (22 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (23 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_366 __void_param) (24 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:180, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_367
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_367 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_367__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_367 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_367 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_367 __void_param) (2 : int))) = (119 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_367 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_367 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_367 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_367 __void_param) (6 : int))) = (115 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:181, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_368
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_368 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_368__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_368 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (1 : int))) = (126 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (2 : int))) = (126 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (3 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (4 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (5 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (6 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (7 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (8 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (9 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (10 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (11 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (12 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (13 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (14 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (15 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (16 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (17 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (18 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (19 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (20 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (21 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (22 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (23 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (24 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (25 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (26 : int))) = (126 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (27 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (28 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (29 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (30 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (31 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (32 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (33 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (34 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (35 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (36 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (37 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (38 : int))) = (126 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (39 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (40 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (41 : int))) = (126 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (42 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (43 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (44 : int))) = (126 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (45 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (46 : int))) = (126 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (47 : int))) = (126 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (48 : int))) = (126 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_368 __void_param) (49 : int))) = (126 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:182, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_369
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_369 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_369__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_369 __void_param)].
   true)

end
(* Module for defining the value of constant "maximum_reserved_electricity_possible" defined at global_variables.ads:11, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Global_variables__maximum_reserved_electricity_possible___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__maximum_reserved_electricity_possible as Global_variables__maximum_reserved_electricity_possible

 axiom maximum_reserved_electricity_possible__def_axiom :
  ((Global_variables__maximum_reserved_electricity_possible.maximum_reserved_electricity_possible ) = (1000000 : int))

end

(* Module for defining the value of constant "critical_reserve_level" defined at global_variables.ads:12, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Global_variables__critical_reserve_level___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__critical_reserve_level as Global_variables__critical_reserve_level

 axiom critical_reserve_level__def_axiom :
  ((Global_variables__critical_reserve_level.critical_reserve_level ) = (5000 : int))

end

(* Module for defining the value of constant "maximum_electricity_possible" defined at global_variables.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Global_variables__maximum_electricity_possible___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__maximum_electricity_possible as Global_variables__maximum_electricity_possible

 axiom maximum_electricity_possible__def_axiom :
  ((Global_variables__maximum_electricity_possible.maximum_electricity_possible ) = (10000000 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_open___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open

 val is_open 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__mode__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom

 val mode__2 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  ( [@GP_Pretty_Ada:25112] ((epsilon temp___result_196 : bool.
   ( (temp___result_196 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_196 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard result file) )/\(Spark__text_io__file_mode___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mode__2__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__mode__2.mode__2 file)].
   (let result = (Spark__text_io__mode__2.mode__2 file) in (
    (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last result)))
  )

end

(* Module giving a program function and a defining axiom for the expression function "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_readable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_readable as Spark__text_io__is_readable

 val is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_197 : bool.
   ( (temp___result_197 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_197 file) )) = True) /\ ((epsilon temp___result_198 : int.
   ( (temp___result_198 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_198 file) )) = (0 : int)) ) ) ) }
 
 axiom is_readable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_readable.is_readable file)].
   ( (let result = (Spark__text_io__is_readable.is_readable file) in (
    (Spark__text_io__is_readable.is_readable__function_guard result file)))
    -> ( ((Spark__text_io__is_readable.is_readable file) = True) <-> ( ((epsilon temp___result_199 : bool.
    ( (temp___result_199 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_199 file) )) = True) /\ ((epsilon temp___result_200 : int.
    ( (temp___result_200 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_200 file) )) = (0 : int)) ) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_writable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable

 val is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_writable.is_writable file)) /\ (Spark__text_io__is_writable.is_writable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_201 : bool.
   ( (temp___result_201 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_201 file) )) = True) /\ ( ((epsilon temp___result_202 : int.
   ( (temp___result_202 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_202 file) )) = (1 : int)) \/ ((epsilon temp___result_203 : int.
   ( (temp___result_203 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_203 file) )) = (2 : int)) ) ) ) ) }
 
 axiom is_writable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_writable.is_writable file)].
   ( (let result = (Spark__text_io__is_writable.is_writable file) in (
    (Spark__text_io__is_writable.is_writable__function_guard result file)))
    -> ( ((Spark__text_io__is_writable.is_writable file) = True) <-> ( ((epsilon temp___result_204 : bool.
    ( (temp___result_204 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_204 file) )) = True) /\ ( ((epsilon temp___result_205 : int.
    ( (temp___result_205 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_205 file) )) = (1 : int)) \/ ((epsilon temp___result_206 : int.
    ( (temp___result_206 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_206 file) )) = (2 : int)) ) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom

 val status 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__status.status file)) /\ (Spark__text_io__status.status__function_guard result file) )/\(Spark__text_io__file_status___axiom.dynamic_invariant result True False True True) ) }
 
 axiom status__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__status.status file)].
   (let result = (Spark__text_io__status.status file) in (
    (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at power_grid_energy_stabilizer.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val init 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "print_welcome" defined at power_grid_energy_stabilizer.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__print_welcome___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val print_welcome 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "is_critical" defined at power_grid_energy_stabilizer.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__is_critical___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Power_grid_energy_stabilizer__is_critical as Power_grid_energy_stabilizer__is_critical
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 val is_critical 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Power_grid_energy_stabilizer__is_critical.is_critical Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content)) /\ (Power_grid_energy_stabilizer__is_critical.is_critical__function_guard result Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content) )/\true ) }
  reads {Global_variables__status_system.status_system__split_fields}
 
 axiom is_critical__post_axiom :
  (forall global_variables__status_system__fields   : Global_variables__status_system_type.__split_fields [(Power_grid_energy_stabilizer__is_critical.is_critical global_variables__status_system__fields)].
   ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = global_variables__status_system__fields } True True True True) -> (let result = (Power_grid_energy_stabilizer__is_critical.is_critical global_variables__status_system__fields) in (
    (if ((Power_grid_energy_stabilizer__is_critical.is_critical__function_guard result global_variables__status_system__fields)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "read_consumption" defined at power_grid_energy_stabilizer.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__read_consumption___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val read_consumption 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}
  writes {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "read_supply" defined at power_grid_energy_stabilizer.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__read_supply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val read_supply 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}
  writes {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "energy_stabilizerg_system" defined at power_grid_energy_stabilizer.ads:56, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val energy_stabilizerg_system 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_output.standard_output}
  writes {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "print_status" defined at power_grid_energy_stabilizer.ads:64, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__print_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val print_status 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "status_electricity_system_to_string" defined at power_grid_energy_stabilizer.ads:69, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Power_grid_energy_stabilizer__status_electricity_system_to_string as Power_grid_energy_stabilizer__status_electricity_system_to_string
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 val status_electricity_system_to_string 
   (__void_param : unit) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content)) /\ (Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string__function_guard result Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
  reads {Global_variables__status_system.status_system__split_fields}
 
 axiom status_electricity_system_to_string__post_axiom :
  (forall global_variables__status_system__fields   : Global_variables__status_system_type.__split_fields [(Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string global_variables__status_system__fields)].
   ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = global_variables__status_system__fields } True True True True) -> (let result = (Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string global_variables__status_system__fields) in (
    (if ((Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string__function_guard result global_variables__status_system__fields)) then (
     ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "refill_reserve" defined at power_grid_energy_stabilizer.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__refill_reserve___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val refill_reserve 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}
  writes {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "print_reserve_levels" defined at power_grid_energy_stabilizer.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__print_reserve_levels___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val print_reserve_levels 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Global_variables__status_system.status_system__split_fields, Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_init_standard_input" defined at as_io_wrapper.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_init_standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_init_standard_input 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:18831] ((epsilon temp___result_230 : bool.
   ( (temp___result_230 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_230 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:18837] ((epsilon temp___result_231 : int.
   ( (temp___result_231 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_231 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "as_init_standard_output" defined at as_io_wrapper.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_init_standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_init_standard_output 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:18865] ((epsilon temp___result_232 : bool.
   ( (temp___result_232 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_232 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:18871] ((epsilon temp___result_233 : int.
   ( (temp___result_233 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_233 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put_line" defined at as_io_wrapper.ads:83, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put_line 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_get__3" defined at as_io_wrapper.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_get__3 
   (item : int__ref) (prompt_try_again_when_not_integer : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( (Standard__integer___axiom.dynamic_invariant item.int__content True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_input.standard_input, Spark__text_io__standard_output.standard_output, item}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put__2" defined at as_io_wrapper.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put__3" defined at as_io_wrapper.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put__3 
   (item : int) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_get__2" defined at as_io_wrapper.ads:53, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val as_get__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires {  true }
  ensures {  ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_input.standard_input, item}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "power_grid_energy_stabilizer" defined at power_grid_energy_stabilizer.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Power_grid_energy_stabilizer__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int

 let def [#"power_grid_energy_stabilizer.ads" 13 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:13] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 13 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"power_grid_energy_stabilizer.ads" 32 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 34 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 33 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 36 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 38 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 37 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 40 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 41 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 44 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 46 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 45 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 50 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 52 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 51 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 56 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 58 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 57 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 64 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 67 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 65 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 69 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 72 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 74 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 73 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 79 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 82 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 80 0 0] ());
  ();
  ([#"power_grid_energy_stabilizer.adb" 8 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 18 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 28 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 36 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 51 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 66 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 91 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 123 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 132 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 173 0 0] ());
  ();
  ( [@GP_Sloc:power_grid_energy_stabilizer.adb:187:1] ([#"power_grid_energy_stabilizer.adb" 187 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at power_grid_energy_stabilizer.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__init__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
 use        As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
 use        As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom

 let def [#"power_grid_energy_stabilizer.ads" 32 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:32] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 32 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 32 0 0] assume { [#"power_grid_energy_stabilizer.ads" 32 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False False True True) };
  [#"power_grid_energy_stabilizer.ads" 32 0 0] assume { [#"power_grid_energy_stabilizer.ads" 32 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False False True True) };
  [#"power_grid_energy_stabilizer.ads" 32 0 0] assume { [#"power_grid_energy_stabilizer.ads" 32 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 32 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 32 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:10:7] ([#"power_grid_energy_stabilizer.adb" 10 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:10:7] ([#"power_grid_energy_stabilizer.adb" 10 0 0] ( (As_io_wrapper__as_init_standard_input___axiom.as_init_standard_input(())) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:11:7] ([#"power_grid_energy_stabilizer.adb" 11 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:11:7] ([#"power_grid_energy_stabilizer.adb" 11 0 0] ( (As_io_wrapper__as_init_standard_output___axiom.as_init_standard_output(())) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:12:7] ([#"power_grid_energy_stabilizer.adb" 12 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:12:21] ([#"power_grid_energy_stabilizer.adb" 12 0 0] (let temp___281 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = { Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured = ( 0 : Global_variables__electricity_range.electricity_range ); Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured = ( 0 : Global_variables__electricity_range.electricity_range ); Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = ( 1000000 : Global_variables__reserve_electricity_range.reserve_electricity_range ); Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity = (Global_variables__status_reserved_electricity_type__rep.of_rep((1 : int))) } } in (
    [#"power_grid_energy_stabilizer.adb" 12 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___281.Global_variables__status_system_type.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "print_welcome" defined at power_grid_energy_stabilizer.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__print_welcome__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Temp___String_Literal_282 as Temp___String_Literal_282
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_283 as Temp___String_Literal_283
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_284 as Temp___String_Literal_284
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_285 as Temp___String_Literal_285
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_286 as Temp___String_Literal_286
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_287 as Temp___String_Literal_287
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom

 let def [#"power_grid_energy_stabilizer.ads" 36 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:36] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 36 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:36 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 36 0 0] assume { [#"power_grid_energy_stabilizer.ads" 36 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:36 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:36 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 36 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:36 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 36 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:20:7] ([#"power_grid_energy_stabilizer.adb" 20 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:20:7] ([#"power_grid_energy_stabilizer.adb" 20 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_282.temp___String_Literal_282(()))) ((1 : int)) ((45 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:21:7] ([#"power_grid_energy_stabilizer.adb" 21 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:21:7] ([#"power_grid_energy_stabilizer.adb" 21 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_283.temp___String_Literal_283(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:22:7] ([#"power_grid_energy_stabilizer.adb" 22 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:22:7] ([#"power_grid_energy_stabilizer.adb" 22 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_284.temp___String_Literal_284(()))) ((1 : int)) ((44 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:23:7] ([#"power_grid_energy_stabilizer.adb" 23 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:23:7] ([#"power_grid_energy_stabilizer.adb" 23 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_285.temp___String_Literal_285(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:24:7] ([#"power_grid_energy_stabilizer.adb" 24 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:24:7] ([#"power_grid_energy_stabilizer.adb" 24 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_286.temp___String_Literal_286(()))) ((1 : int)) ((45 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:25:7] ([#"power_grid_energy_stabilizer.adb" 25 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:25:7] ([#"power_grid_energy_stabilizer.adb" 25 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_287.temp___String_Literal_287(()))) ((1 : int)) ((0 : int))))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_critical" defined at power_grid_energy_stabilizer.ads:40, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__is_critical__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom

 val power_grid_energy_stabilizer__is_critical__result [@model_trace:3077@result] [@model_projected] [@name:Is_Critical]  : bool__ref 
 
 let def [#"power_grid_energy_stabilizer.ads" 40 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:40] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 40 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:40 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 40 0 0] assume { [#"power_grid_energy_stabilizer.ads" 40 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:40 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:40 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 40 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:40 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 40 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:30:21] ([#"power_grid_energy_stabilizer.adb" 30 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:30:10] ([#"power_grid_energy_stabilizer.adb" 30 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 30 0 0] [#"power_grid_energy_stabilizer.adb" 30 0 0] (([@branch_id=2385] Main.spark__branch).bool__content <- ( ((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) <= (5000 : int)) )));
   ( [@branch_id=2385] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:31:27] ([#"power_grid_energy_stabilizer.adb" 31 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:31:20] ([#"power_grid_energy_stabilizer.adb" 31 0 0] ( [#"power_grid_energy_stabilizer.adb" 31 0 0] (power_grid_energy_stabilizer__is_critical__result.bool__content <- ( ((Global_variables__status_reserved_electricity_type__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity)) = (0 : int)) ));
    [#"power_grid_energy_stabilizer.adb" 31 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:32:27] ([#"power_grid_energy_stabilizer.adb" 32 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:32:20] ([#"power_grid_energy_stabilizer.adb" 32 0 0] ( [#"power_grid_energy_stabilizer.adb" 32 0 0] (power_grid_energy_stabilizer__is_critical__result.bool__content <- ( ((Global_variables__status_reserved_electricity_type__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity)) = (1 : int)) ));
    [#"power_grid_energy_stabilizer.adb" 32 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  power_grid_energy_stabilizer__is_critical__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "read_consumption" defined at power_grid_energy_stabilizer.ads:44, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__read_consumption__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        Power_grid_energy_stabilizer__read_consumption__electricity as Power_grid_energy_stabilizer__read_consumption__electricity
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Power_grid_energy_stabilizer__read_consumption__L_1 as Power_grid_energy_stabilizer__read_consumption__L_1
 use        Temp___String_Literal_288 as Temp___String_Literal_288
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_289 as Temp___String_Literal_289
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_290 as Temp___String_Literal_290
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_291 as Temp___String_Literal_291
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__read_consumption__electricity___axiom as Power_grid_energy_stabilizer__read_consumption__electricity___axiom
 use        Power_grid_energy_stabilizer__read_consumption__L_1___axiom as Power_grid_energy_stabilizer__read_consumption__L_1___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 44 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:44] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 44 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 44 0 0] assume { [#"power_grid_energy_stabilizer.ads" 44 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 44 0 0] assume { [#"power_grid_energy_stabilizer.ads" 44 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 44 0 0] assume { [#"power_grid_energy_stabilizer.ads" 44 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 44 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 44 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 37 0 0] ( [#"power_grid_energy_stabilizer.adb" 37 0 0] (Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content <- ( (0 : int) ));
   [#"power_grid_energy_stabilizer.adb" 37 0 0] assume { [#"power_grid_energy_stabilizer.adb" 37 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content True False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 40 0 0] ());
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:39:7] ([#"power_grid_energy_stabilizer.adb" 39 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:39:7] ([#"power_grid_energy_stabilizer.adb" 39 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_288.temp___String_Literal_288(()))) ((1 : int)) ((79 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:40:7] ([#"power_grid_energy_stabilizer.adb" 40 0 0] ( () (* Translation of an Ada loop from power_grid_energy_stabilizer.adb:40 *)
   ;
   (if (True) then (
    [#"power_grid_energy_stabilizer.adb" 40 0 0] try
     ( [#"power_grid_energy_stabilizer.adb" 40 0 0] begin ensures {true} let _ = (let _ = Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content in (
      ()))
      in () end ;
     (let temp___294 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 40 0 0] (val _f : int
     ensures {[#"power_grid_energy_stabilizer.adb" 40 0 0] (result = Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content)} 
     in _f) in (
      ( [#"power_grid_energy_stabilizer.adb" 40 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
       ()))
       in () end ;
      (let temp___293 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 40 0 0] (val _f : Spark__text_io__file_type.file_type
      ensures {[#"power_grid_energy_stabilizer.adb" 40 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
      in _f) in (
       ( [#"power_grid_energy_stabilizer.adb" 40 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
        ()))
        in () end ;
       (let temp___292 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 40 0 0] (val _f : Spark__text_io__file_type.file_type
       ensures {[#"power_grid_energy_stabilizer.adb" 40 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:40 *)
        ;
        () (* While loop translating the Ada loop from power_grid_energy_stabilizer.adb:40 *)
        ;
        (let temp___inv_295 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content)) ((Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content <= (1000000 : int)))) in (
         [#"power_grid_energy_stabilizer.adb" 40 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"power_grid_energy_stabilizer.adb" 40 0 0] while True do
         invariant { 
          ([#"power_grid_energy_stabilizer.adb" 41 0 0] ( [@comment:         pragma Loop_Invariant (Electricity in 0 .. Maximum_Reserved_Electricity_Possible);                                 ^ power_grid_energy_stabilizer.adb:41:33:VC_LOOP_INVARIANT] [@GP_Sloc:power_grid_energy_stabilizer.adb:41:33] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Shape:L_1_loop__pragargs__in] [@vc:annotation] [@GP_Id:0] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:41:33] [@GP_Pretty_Ada:2438] ( ((0 : int) <= Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content) /\ (Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content <= (1000000 : int)) ) ) ))
          }
         ( () (* Assume implicit invariants from the loop power_grid_energy_stabilizer.adb:40 *)
         ;
          assume {  ( ( ( ( ( ( true /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content True True True True) )/\true ) };
         () (* Check for absence of RTE in the invariant of loop power_grid_energy_stabilizer.adb:40 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop power_grid_energy_stabilizer.adb:40 *)
         ;
         ();
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:42:17] ([#"power_grid_energy_stabilizer.adb" 42 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:42:10] ([#"power_grid_energy_stabilizer.adb" 42 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:42:10] ([#"power_grid_energy_stabilizer.adb" 42 0 0] ( (As_io_wrapper__as_get__3___axiom.as_get__3(Power_grid_energy_stabilizer__read_consumption__electricity.electricity) ((Standard__string.of_array((Temp___String_Literal_289.temp___String_Literal_289(()))) ((1 : int)) ((25 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:43:21] ([#"power_grid_energy_stabilizer.adb" 43 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:43:43] ([#"power_grid_energy_stabilizer.adb" 43 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:43:10] ([#"power_grid_energy_stabilizer.adb" 43 0 0] (if ((Boolean.andb((Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content >= (0 : int))) ((Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content <= (1000000 : int))))) then (
          [#"power_grid_energy_stabilizer.adb" 43 0 0] raise Power_grid_energy_stabilizer__read_consumption__L_1.L_1))) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:44:10] ([#"power_grid_energy_stabilizer.adb" 44 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:44:10] ([#"power_grid_energy_stabilizer.adb" 44 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_290.temp___String_Literal_290(()))) ((1 : int)) ((37 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:45:10] ([#"power_grid_energy_stabilizer.adb" 45 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:45:10] ([#"power_grid_energy_stabilizer.adb" 45 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((10000000 : int))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:46:10] ([#"power_grid_energy_stabilizer.adb" 46 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:46:10] ([#"power_grid_energy_stabilizer.adb" 46 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_291.temp___String_Literal_291(()))) ((1 : int)) ((0 : int))))) )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:40 *)
         ;
         (if (False) then (
           raise Power_grid_energy_stabilizer__read_consumption__L_1.L_1));
         (let temp___inv_295 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content)) ((Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content <= (1000000 : int)))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )))
       )))
      )
    with
     Power_grid_energy_stabilizer__read_consumption__L_1.L_1 -> ()
    end)) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:48:7] ([#"power_grid_energy_stabilizer.adb" 48 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:48:63] ([#"power_grid_energy_stabilizer.adb" 48 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:48:42] ([#"power_grid_energy_stabilizer.adb" 48 0 0] (let temp___297 [@mlw:proxy_symbol] [@introduced] = (let temp___296 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
    ( [#"power_grid_energy_stabilizer.adb" 48 0 0] begin ensures {true} let _ = (let _ = temp___296.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured in (
     ()))
     in () end ;
    { ( temp___296 ) with Global_variables__status_system_type.__split_fields = { ( temp___296.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured = (Global_variables__electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 48 0 0] ( [@GP_Shape:status_system_assign__typeconv] [@vc:annotation] [@comment:      Status_System.Consumption_Measured := Electricity_Range(Electricity);                                                               ^ power_grid_energy_stabilizer.adb:48:63:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] [@GP_Sloc:power_grid_energy_stabilizer.adb:48:63] (Global_variables__electricity_range.range_check_(Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content)) )))) } } )))
    in (
     (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___297.Global_variables__status_system_type.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "read_supply" defined at power_grid_energy_stabilizer.ads:50, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__read_supply__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Power_grid_energy_stabilizer__read_supply__electricity as Power_grid_energy_stabilizer__read_supply__electricity
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Power_grid_energy_stabilizer__read_supply__L_2 as Power_grid_energy_stabilizer__read_supply__L_2
 use        Temp___String_Literal_298 as Temp___String_Literal_298
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_299 as Temp___String_Literal_299
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_300 as Temp___String_Literal_300
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_301 as Temp___String_Literal_301
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__read_supply__electricity___axiom as Power_grid_energy_stabilizer__read_supply__electricity___axiom
 use        Power_grid_energy_stabilizer__read_supply__L_2___axiom as Power_grid_energy_stabilizer__read_supply__L_2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 50 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:50] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 50 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 50 0 0] assume { [#"power_grid_energy_stabilizer.ads" 50 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 50 0 0] assume { [#"power_grid_energy_stabilizer.ads" 50 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 50 0 0] assume { [#"power_grid_energy_stabilizer.ads" 50 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 50 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 50 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 52 0 0] ( [#"power_grid_energy_stabilizer.adb" 52 0 0] (Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content <- ( (0 : int) ));
   [#"power_grid_energy_stabilizer.adb" 52 0 0] assume { [#"power_grid_energy_stabilizer.adb" 52 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content True False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 55 0 0] ());
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:54:7] ([#"power_grid_energy_stabilizer.adb" 54 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:54:7] ([#"power_grid_energy_stabilizer.adb" 54 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_298.temp___String_Literal_298(()))) ((1 : int)) ((76 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:55:7] ([#"power_grid_energy_stabilizer.adb" 55 0 0] ( () (* Translation of an Ada loop from power_grid_energy_stabilizer.adb:55 *)
   ;
   (if (True) then (
    [#"power_grid_energy_stabilizer.adb" 55 0 0] try
     ( [#"power_grid_energy_stabilizer.adb" 55 0 0] begin ensures {true} let _ = (let _ = Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content in (
      ()))
      in () end ;
     (let temp___304 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 55 0 0] (val _f : int
     ensures {[#"power_grid_energy_stabilizer.adb" 55 0 0] (result = Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content)} 
     in _f) in (
      ( [#"power_grid_energy_stabilizer.adb" 55 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
       ()))
       in () end ;
      (let temp___303 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 55 0 0] (val _f : Spark__text_io__file_type.file_type
      ensures {[#"power_grid_energy_stabilizer.adb" 55 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
      in _f) in (
       ( [#"power_grid_energy_stabilizer.adb" 55 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
        ()))
        in () end ;
       (let temp___302 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 55 0 0] (val _f : Spark__text_io__file_type.file_type
       ensures {[#"power_grid_energy_stabilizer.adb" 55 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:55 *)
        ;
        () (* While loop translating the Ada loop from power_grid_energy_stabilizer.adb:55 *)
        ;
        (let temp___inv_305 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content)) ((Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content <= (1000000 : int)))) in (
         [#"power_grid_energy_stabilizer.adb" 55 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"power_grid_energy_stabilizer.adb" 55 0 0] while True do
         invariant { 
          ([#"power_grid_energy_stabilizer.adb" 56 0 0] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:56:33] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_2_loop__pragargs__in] [@comment:         pragma Loop_Invariant (Electricity in 0 .. Maximum_Reserved_Electricity_Possible);                                 ^ power_grid_energy_stabilizer.adb:56:33:VC_LOOP_INVARIANT] [@GP_Id:2] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:56:33] [@GP_Pretty_Ada:2504] ( ((0 : int) <= Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content) /\ (Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content <= (1000000 : int)) ) ) ))
          }
         ( () (* Assume implicit invariants from the loop power_grid_energy_stabilizer.adb:55 *)
         ;
          assume {  ( ( ( ( ( ( true /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content True True True True) )/\true ) };
         () (* Check for absence of RTE in the invariant of loop power_grid_energy_stabilizer.adb:55 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop power_grid_energy_stabilizer.adb:55 *)
         ;
         ();
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:57:17] ([#"power_grid_energy_stabilizer.adb" 57 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:57:10] ([#"power_grid_energy_stabilizer.adb" 57 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:57:10] ([#"power_grid_energy_stabilizer.adb" 57 0 0] ( (As_io_wrapper__as_get__3___axiom.as_get__3(Power_grid_energy_stabilizer__read_supply__electricity.electricity) ((Standard__string.of_array((Temp___String_Literal_299.temp___String_Literal_299(()))) ((1 : int)) ((27 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:58:21] ([#"power_grid_energy_stabilizer.adb" 58 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:58:43] ([#"power_grid_energy_stabilizer.adb" 58 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:58:10] ([#"power_grid_energy_stabilizer.adb" 58 0 0] (if ((Boolean.andb((Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content >= (0 : int))) ((Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content <= (1000000 : int))))) then (
          [#"power_grid_energy_stabilizer.adb" 58 0 0] raise Power_grid_energy_stabilizer__read_supply__L_2.L_2))) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:59:10] ([#"power_grid_energy_stabilizer.adb" 59 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:59:10] ([#"power_grid_energy_stabilizer.adb" 59 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_300.temp___String_Literal_300(()))) ((1 : int)) ((37 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:60:10] ([#"power_grid_energy_stabilizer.adb" 60 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:60:10] ([#"power_grid_energy_stabilizer.adb" 60 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((10000000 : int))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:61:10] ([#"power_grid_energy_stabilizer.adb" 61 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:61:10] ([#"power_grid_energy_stabilizer.adb" 61 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_301.temp___String_Literal_301(()))) ((1 : int)) ((0 : int))))) )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:55 *)
         ;
         (if (False) then (
           raise Power_grid_energy_stabilizer__read_supply__L_2.L_2));
         (let temp___inv_305 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb(((0 : int) <= Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content)) ((Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content <= (1000000 : int)))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )))
       )))
      )
    with
     Power_grid_energy_stabilizer__read_supply__L_2.L_2 -> ()
    end)) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:63:7] ([#"power_grid_energy_stabilizer.adb" 63 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:63:60] ([#"power_grid_energy_stabilizer.adb" 63 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:63:39] ([#"power_grid_energy_stabilizer.adb" 63 0 0] (let temp___307 [@mlw:proxy_symbol] [@introduced] = (let temp___306 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
    ( [#"power_grid_energy_stabilizer.adb" 63 0 0] begin ensures {true} let _ = (let _ = temp___306.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured in (
     ()))
     in () end ;
    { ( temp___306 ) with Global_variables__status_system_type.__split_fields = { ( temp___306.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured = (Global_variables__electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 63 0 0] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:63:60] [@GP_Shape:status_system_assign__typeconv] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:3] [@comment:      Status_System.Supplied_Measured := Electricity_Range(Electricity);                                                            ^ power_grid_energy_stabilizer.adb:63:60:VC_RANGE_CHECK] (Global_variables__electricity_range.range_check_(Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content)) )))) } } )))
    in (
     (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___307.Global_variables__status_system_type.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "energy_stabilizerg_system" defined at power_grid_energy_stabilizer.ads:56, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required as Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep
 use        Temp___String_Literal_312 as Temp___String_Literal_312
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_313 as Temp___String_Literal_313
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_314 as Temp___String_Literal_314
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_315 as Temp___String_Literal_315
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_316 as Temp___String_Literal_316
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_317 as Temp___String_Literal_317
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_322 as Temp___String_Literal_322
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required___axiom as Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom

 let def [#"power_grid_energy_stabilizer.ads" 56 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:56] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 56 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:56 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 56 0 0] assume { [#"power_grid_energy_stabilizer.ads" 56 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 56 0 0] assume { [#"power_grid_energy_stabilizer.ads" 56 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:56 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:56 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 56 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:56 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 56 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 67 0 0] ( [#"power_grid_energy_stabilizer.adb" 67 0 0] assume { [#"power_grid_energy_stabilizer.adb" 67 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required.electricity_required.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 67 0 0] assume { [#"power_grid_energy_stabilizer.adb" 67 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required.electricity_required.int__content False False True True) } ));
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:69:18] ([#"power_grid_energy_stabilizer.adb" 69 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:69:64] ([#"power_grid_energy_stabilizer.adb" 69 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:69:7] ([#"power_grid_energy_stabilizer.adb" 69 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 69 0 0] [#"power_grid_energy_stabilizer.adb" 69 0 0] (([@branch_id=2559] Main.spark__branch).bool__content <- ( ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)) > (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured))) )));
   ( [@branch_id=2559] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:71:10] ([#"power_grid_energy_stabilizer.adb" 71 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:71:42] ([#"power_grid_energy_stabilizer.adb" 71 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:71:88] ([#"power_grid_energy_stabilizer.adb" 71 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:71:31] ([#"power_grid_energy_stabilizer.adb" 71 0 0] [#"power_grid_energy_stabilizer.adb" 71 0 0] (Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required.electricity_required.int__content <- ( ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)) - (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured))) ))) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:72:13] ([#"power_grid_energy_stabilizer.adb" 72 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:72:37] ([#"power_grid_energy_stabilizer.adb" 72 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:72:73] ([#"power_grid_energy_stabilizer.adb" 72 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:72:10] ([#"power_grid_energy_stabilizer.adb" 72 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 72 0 0] [#"power_grid_energy_stabilizer.adb" 72 0 0] (([@branch_id=2584] Main.spark__branch).bool__content <- ( (Boolean.andb((Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required.electricity_required.int__content <= (Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)))) (((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) > (0 : int)))) )));
    ( [@branch_id=2584] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:74:13] ([#"power_grid_energy_stabilizer.adb" 74 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:74:55] ([#"power_grid_energy_stabilizer.adb" 74 0 0] (let temp___309 [@mlw:proxy_symbol] [@introduced] = (let temp___308 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 74 0 0] begin ensures {true} let _ = (let _ = temp___308.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity in (
       ()))
       in () end ;
      { ( temp___308 ) with Global_variables__status_system_type.__split_fields = { ( temp___308.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity = (Global_variables__status_reserved_electricity_type__rep.of_rep((0 : int))) } } )))
      in (
      [#"power_grid_energy_stabilizer.adb" 74 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___309.Global_variables__status_system_type.__split_fields ))))
     ) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:75:13] ([#"power_grid_energy_stabilizer.adb" 75 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:75:48] ([#"power_grid_energy_stabilizer.adb" 75 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:75:82] ([#"power_grid_energy_stabilizer.adb" 75 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:75:45] ([#"power_grid_energy_stabilizer.adb" 75 0 0] (let temp___311 [@mlw:proxy_symbol] [@introduced] = (let temp___310 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 75 0 0] begin ensures {true} let _ = (let _ = temp___310.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured in (
       ()))
       in () end ;
      { ( temp___310 ) with Global_variables__status_system_type.__split_fields = { ( temp___310.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = (Global_variables__reserve_electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 75 0 0] ( [@GP_Shape:if__if__status_system_assign__sub] [@GP_Sloc:power_grid_energy_stabilizer.adb:75:80] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:            Status_System.Reserved_Measured := Status_System.Reserved_Measured - Electricity_Required;                                                                                ^ power_grid_energy_stabilizer.adb:75:80:VC_RANGE_CHECK] [@GP_Id:5] (Global_variables__reserve_electricity_range.range_check_(([#"power_grid_energy_stabilizer.adb" 75 0 0] ( [@GP_Shape:if__if__status_system_assign__sub] [@GP_Sloc:power_grid_energy_stabilizer.adb:75:80] [@vc:annotation] [@comment:            Status_System.Reserved_Measured := Status_System.Reserved_Measured - Electricity_Required;                                                                                ^ power_grid_energy_stabilizer.adb:75:80:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:4] (Standard__integer.range_check_(((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) - Power_grid_energy_stabilizer__energy_stabilizerg_system__electricity_required.electricity_required.int__content))) )))) )))) } } )))
      in (
       (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___311.Global_variables__status_system_type.__split_fields ))))
     ) ) )) else (
     ( ();
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:77:13] ([#"power_grid_energy_stabilizer.adb" 77 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:77:13] ([#"power_grid_energy_stabilizer.adb" 77 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_312.temp___String_Literal_312(()))) ((1 : int)) ((49 : int))))) )) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:78:13] ([#"power_grid_energy_stabilizer.adb" 78 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:78:13] ([#"power_grid_energy_stabilizer.adb" 78 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_313.temp___String_Literal_313(()))) ((1 : int)) ((0 : int))))) )) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:79:13] ([#"power_grid_energy_stabilizer.adb" 79 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:79:13] ([#"power_grid_energy_stabilizer.adb" 79 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_314.temp___String_Literal_314(()))) ((1 : int)) ((4 : int))))) )) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:80:13] ([#"power_grid_energy_stabilizer.adb" 80 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:80:13] ([#"power_grid_energy_stabilizer.adb" 80 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_315.temp___String_Literal_315(()))) ((1 : int)) ((15 : int))))) )) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:81:13] ([#"power_grid_energy_stabilizer.adb" 81 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:81:13] ([#"power_grid_energy_stabilizer.adb" 81 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_316.temp___String_Literal_316(()))) ((1 : int)) ((52 : int))))) )) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:82:13] ([#"power_grid_energy_stabilizer.adb" 82 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:82:13] ([#"power_grid_energy_stabilizer.adb" 82 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_317.temp___String_Literal_317(()))) ((1 : int)) ((62 : int))))) )) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:83:13] ([#"power_grid_energy_stabilizer.adb" 83 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:83:45] ([#"power_grid_energy_stabilizer.adb" 83 0 0] (let temp___319 [@mlw:proxy_symbol] [@introduced] = (let temp___318 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 83 0 0] begin ensures {true} let _ = (let _ = temp___318.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured in (
       ()))
       in () end ;
      { ( temp___318 ) with Global_variables__status_system_type.__split_fields = { ( temp___318.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = ( 0 : Global_variables__reserve_electricity_range.reserve_electricity_range ) } } )))
      in (
      [#"power_grid_energy_stabilizer.adb" 83 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___319.Global_variables__status_system_type.__split_fields ))))
     ) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:84:13] ([#"power_grid_energy_stabilizer.adb" 84 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:84:48] ([#"power_grid_energy_stabilizer.adb" 84 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:84:45] ([#"power_grid_energy_stabilizer.adb" 84 0 0] (let temp___321 [@mlw:proxy_symbol] [@introduced] = (let temp___320 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 84 0 0] begin ensures {true} let _ = (let _ = temp___320.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured in (
       ()))
       in () end ;
      { ( temp___320 ) with Global_variables__status_system_type.__split_fields = { ( temp___320.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured = (Global_variables__electricity_range__rep.of_rep((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)))) } } )))
      in (
      [#"power_grid_energy_stabilizer.adb" 84 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___321.Global_variables__status_system_type.__split_fields ))))
     ) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:85:13] ([#"power_grid_energy_stabilizer.adb" 85 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:85:13] ([#"power_grid_energy_stabilizer.adb" 85 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_322.temp___String_Literal_322(()))) ((1 : int)) ((53 : int))))) )) ) )))) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:87:12] ([#"power_grid_energy_stabilizer.adb" 87 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:87:54] ([#"power_grid_energy_stabilizer.adb" 87 0 0] (let temp___324 [@mlw:proxy_symbol] [@introduced] = (let temp___323 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
     ( [#"power_grid_energy_stabilizer.adb" 87 0 0] begin ensures {true} let _ = (let _ = temp___323.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity in (
      ()))
      in () end ;
     { ( temp___323 ) with Global_variables__status_system_type.__split_fields = { ( temp___323.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity = (Global_variables__status_reserved_electricity_type__rep.of_rep((1 : int))) } } )))
     in (
     [#"power_grid_energy_stabilizer.adb" 87 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___324.Global_variables__status_system_type.__split_fields ))))
    ) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "print_status" defined at power_grid_energy_stabilizer.ads:64, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__print_status__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom as Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Temp___String_Literal_325 as Temp___String_Literal_325
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_326 as Temp___String_Literal_326
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_327 as Temp___String_Literal_327
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_328 as Temp___String_Literal_328
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_329 as Temp___String_Literal_329
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_330 as Temp___String_Literal_330
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_331 as Temp___String_Literal_331
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_332 as Temp___String_Literal_332
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_333 as Temp___String_Literal_333
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_334 as Temp___String_Literal_334
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_335 as Temp___String_Literal_335
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_336 as Temp___String_Literal_336
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_337 as Temp___String_Literal_337
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_338 as Temp___String_Literal_338
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_339 as Temp___String_Literal_339
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_340 as Temp___String_Literal_340
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom as Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 64 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:64] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 64 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:64 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 64 0 0] assume { [#"power_grid_energy_stabilizer.ads" 64 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 64 0 0] assume { [#"power_grid_energy_stabilizer.ads" 64 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:64 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:64 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 64 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:64 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 64 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:94:7] ([#"power_grid_energy_stabilizer.adb" 94 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:94:7] ([#"power_grid_energy_stabilizer.adb" 94 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_325.temp___String_Literal_325(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:95:7] ([#"power_grid_energy_stabilizer.adb" 95 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:95:7] ([#"power_grid_energy_stabilizer.adb" 95 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_326.temp___String_Literal_326(()))) ((1 : int)) ((49 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:96:7] ([#"power_grid_energy_stabilizer.adb" 96 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:96:7] ([#"power_grid_energy_stabilizer.adb" 96 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_327.temp___String_Literal_327(()))) ((1 : int)) ((23 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:97:7] ([#"power_grid_energy_stabilizer.adb" 97 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:97:7] ([#"power_grid_energy_stabilizer.adb" 97 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:98:7] ([#"power_grid_energy_stabilizer.adb" 98 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:98:7] ([#"power_grid_energy_stabilizer.adb" 98 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_328.temp___String_Literal_328(()))) ((1 : int)) ((6 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:99:7] ([#"power_grid_energy_stabilizer.adb" 99 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:99:7] ([#"power_grid_energy_stabilizer.adb" 99 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_329.temp___String_Literal_329(()))) ((1 : int)) ((18 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:100:7] ([#"power_grid_energy_stabilizer.adb" 100 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:100:7] ([#"power_grid_energy_stabilizer.adb" 100 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:101:7] ([#"power_grid_energy_stabilizer.adb" 101 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:101:7] ([#"power_grid_energy_stabilizer.adb" 101 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_330.temp___String_Literal_330(()))) ((1 : int)) ((6 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:102:19] ([#"power_grid_energy_stabilizer.adb" 102 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:102:7] ([#"power_grid_energy_stabilizer.adb" 102 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 102 0 0] [#"power_grid_energy_stabilizer.adb" 102 0 0] (([@branch_id=2688] Main.spark__branch).bool__content <- ( ((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) < (5000 : int)) )));
   ( [@branch_id=2688] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:103:15] ([#"power_grid_energy_stabilizer.adb" 103 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:103:15] ([#"power_grid_energy_stabilizer.adb" 103 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_331.temp___String_Literal_331(()))) ((1 : int)) ((28 : int))))) )) ) )) else (
    ()))) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:105:7] ([#"power_grid_energy_stabilizer.adb" 105 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:105:7] ([#"power_grid_energy_stabilizer.adb" 105 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_332.temp___String_Literal_332(()))) ((1 : int)) ((17 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:14] ([#"power_grid_energy_stabilizer.adb" 106 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:7] ([#"power_grid_energy_stabilizer.adb" 106 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:7] ([#"power_grid_energy_stabilizer.adb" 106 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom.status_electricity_system_to_string(())))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:107:7] ([#"power_grid_energy_stabilizer.adb" 107 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:107:7] ([#"power_grid_energy_stabilizer.adb" 107 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_333.temp___String_Literal_333(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:108:7] ([#"power_grid_energy_stabilizer.adb" 108 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:108:7] ([#"power_grid_energy_stabilizer.adb" 108 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_334.temp___String_Literal_334(()))) ((1 : int)) ((35 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:109:7] ([#"power_grid_energy_stabilizer.adb" 109 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:109:7] ([#"power_grid_energy_stabilizer.adb" 109 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:110:7] ([#"power_grid_energy_stabilizer.adb" 110 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:110:7] ([#"power_grid_energy_stabilizer.adb" 110 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_335.temp___String_Literal_335(()))) ((1 : int)) ((6 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:111:7] ([#"power_grid_energy_stabilizer.adb" 111 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:111:7] ([#"power_grid_energy_stabilizer.adb" 111 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_336.temp___String_Literal_336(()))) ((1 : int)) ((37 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:112:20] ([#"power_grid_energy_stabilizer.adb" 112 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:112:63] ([#"power_grid_energy_stabilizer.adb" 112 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:112:7] ([#"power_grid_energy_stabilizer.adb" 112 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 112 0 0] [#"power_grid_energy_stabilizer.adb" 112 0 0] (([@branch_id=2722] Main.spark__branch).bool__content <- ( (((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)) - (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured))) > (0 : int)) )));
   ( [@branch_id=2722] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:114:10] ([#"power_grid_energy_stabilizer.adb" 114 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:114:10] ([#"power_grid_energy_stabilizer.adb" 114 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3(((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)) - (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured))))) )) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:115:10] ([#"power_grid_energy_stabilizer.adb" 115 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:115:10] ([#"power_grid_energy_stabilizer.adb" 115 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_337.temp___String_Literal_337(()))) ((1 : int)) ((6 : int))))) )) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:116:15] ([#"power_grid_energy_stabilizer.adb" 116 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:116:15] ([#"power_grid_energy_stabilizer.adb" 116 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_338.temp___String_Literal_338(()))) ((1 : int)) ((7 : int))))) )) ) )))) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:119:7] ([#"power_grid_energy_stabilizer.adb" 119 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:119:7] ([#"power_grid_energy_stabilizer.adb" 119 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_339.temp___String_Literal_339(()))) ((1 : int)) ((49 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:120:7] ([#"power_grid_energy_stabilizer.adb" 120 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:120:7] ([#"power_grid_energy_stabilizer.adb" 120 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_340.temp___String_Literal_340(()))) ((1 : int)) ((0 : int))))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "status_electricity_system_to_string" defined at power_grid_energy_stabilizer.ads:69, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep
 use        Temp___String_Literal_341 as Temp___String_Literal_341
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_342 as Temp___String_Literal_342
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom

 val power_grid_energy_stabilizer__status_electricity_system_to_string__result [@model_trace:3225@result] [@model_projected] [@name:Status_Electricity_System_To_String]  : Standard__string.string__ref 
 
 let def [#"power_grid_energy_stabilizer.ads" 69 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:69] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 69 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:69 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 69 0 0] assume { [#"power_grid_energy_stabilizer.ads" 69 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:69 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:69 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 69 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:69 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 69 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:125:15] ([#"power_grid_energy_stabilizer.adb" 125 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:125:10] ([#"power_grid_energy_stabilizer.adb" 125 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 126 0 0] [#"power_grid_energy_stabilizer.adb" 126 0 0] (([@branch_id=2780] Main.spark__branch).bool__content <- ( ((Boolean.to_int(((Global_variables__status_reserved_electricity_type__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity)) = (0 : int)))) = (1 : int)) )));
   ( [@branch_id=2780] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:126:26] ([#"power_grid_energy_stabilizer.adb" 126 0 0] ( [#"power_grid_energy_stabilizer.adb" 126 0 0] (power_grid_energy_stabilizer__status_electricity_system_to_string__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_341.temp___String_Literal_341(()))) ((1 : int)) ((9 : int))) ));
    [#"power_grid_energy_stabilizer.adb" 126 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:127:27] ([#"power_grid_energy_stabilizer.adb" 127 0 0] ( [#"power_grid_energy_stabilizer.adb" 127 0 0] (power_grid_energy_stabilizer__status_electricity_system_to_string__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_342.temp___String_Literal_342(()))) ((1 : int)) ((13 : int))) ));
    [#"power_grid_energy_stabilizer.adb" 127 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  power_grid_energy_stabilizer__status_electricity_system_to_string__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "refill_reserve" defined at power_grid_energy_stabilizer.ads:72, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__refill_reserve__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__print_reserve_levels___axiom as Power_grid_energy_stabilizer__print_reserve_levels___axiom
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__remaining_supply as Power_grid_energy_stabilizer__refill_reserve__remaining_supply
 use        Power_grid_energy_stabilizer__refill_reserve__reserve_total as Power_grid_energy_stabilizer__refill_reserve__reserve_total
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Power_grid_energy_stabilizer__refill_reserve__user_input as Power_grid_energy_stabilizer__refill_reserve__user_input
 use        As_io_wrapper__as_get__2___axiom as As_io_wrapper__as_get__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1 as Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1
 use        Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom as Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__T49b as Power_grid_energy_stabilizer__refill_reserve__T49b
 use        Temp___String_Literal_348 as Temp___String_Literal_348
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_349 as Temp___String_Literal_349
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_350 as Temp___String_Literal_350
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_351 as Temp___String_Literal_351
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_353 as Temp___String_Literal_353
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_358 as Temp___String_Literal_358
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__remaining_supply___axiom as Power_grid_energy_stabilizer__refill_reserve__remaining_supply___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__reserve_total___axiom as Power_grid_energy_stabilizer__refill_reserve__reserve_total___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__user_input___axiom as Power_grid_energy_stabilizer__refill_reserve__user_input___axiom
 use        Power_grid_energy_stabilizer__print_reserve_levels___axiom as Power_grid_energy_stabilizer__print_reserve_levels___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_get__2___axiom as As_io_wrapper__as_get__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom as Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1___axiom as Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__T49b___axiom as Power_grid_energy_stabilizer__refill_reserve__T49b___axiom

 let def [#"power_grid_energy_stabilizer.ads" 72 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:72] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 72 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:72 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 72 0 0] assume { [#"power_grid_energy_stabilizer.ads" 72 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 72 0 0] assume { [#"power_grid_energy_stabilizer.ads" 72 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 72 0 0] assume { [#"power_grid_energy_stabilizer.ads" 72 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:72 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:72 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 72 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:72 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 72 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 133 0 0] ( [#"power_grid_energy_stabilizer.adb" 133 0 0] assume { [#"power_grid_energy_stabilizer.adb" 133 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 133 0 0] assume { [#"power_grid_energy_stabilizer.adb" 133 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content False False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 134 0 0] ( [#"power_grid_energy_stabilizer.adb" 134 0 0] assume { [#"power_grid_energy_stabilizer.adb" 134 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 134 0 0] assume { [#"power_grid_energy_stabilizer.adb" 134 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content False False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 135 0 0] ());
   ([#"power_grid_energy_stabilizer.adb" 135 0 0] ( [#"power_grid_energy_stabilizer.adb" 135 0 0] assume { [#"power_grid_energy_stabilizer.adb" 135 0 0] (Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom.default_initial_assumption Power_grid_energy_stabilizer__refill_reserve__user_input.user_input.Array__Int__Standard__character.map__content False) };
   [#"power_grid_energy_stabilizer.adb" 135 0 0] assume { [#"power_grid_energy_stabilizer.adb" 135 0 0] (Power_grid_energy_stabilizer__refill_reserve__Tuser_inputS___axiom.dynamic_invariant Power_grid_energy_stabilizer__refill_reserve__user_input.user_input.Array__Int__Standard__character.map__content False False True True) } ));
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:137:7] ([#"power_grid_energy_stabilizer.adb" 137 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:137:35] ([#"power_grid_energy_stabilizer.adb" 137 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:137:78] ([#"power_grid_energy_stabilizer.adb" 137 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:137:24] ([#"power_grid_energy_stabilizer.adb" 137 0 0] [#"power_grid_energy_stabilizer.adb" 137 0 0] (Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content <- ( ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)) - (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured))) ))) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:139:10] ([#"power_grid_energy_stabilizer.adb" 139 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:139:43] ([#"power_grid_energy_stabilizer.adb" 139 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:139:7] ([#"power_grid_energy_stabilizer.adb" 139 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 139 0 0] [#"power_grid_energy_stabilizer.adb" 139 0 0] (([@branch_id=2846] Main.spark__branch).bool__content <- ( (Boolean.andb((Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content > (0 : int))) (((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) < (1000000 : int)))) )));
   ( [@branch_id=2846] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:143:14] ([#"power_grid_energy_stabilizer.adb" 143 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:143:41] ([#"power_grid_energy_stabilizer.adb" 143 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:143:10] ([#"power_grid_energy_stabilizer.adb" 143 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 143 0 0] [#"power_grid_energy_stabilizer.adb" 143 0 0] (([@branch_id=2858] Main.spark__branch).bool__content <- ( (([#"power_grid_energy_stabilizer.adb" 143 0 0] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:143:31] [@GP_Shape:if__if__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         if (Remaining_Supply + Integer(Status_System.Reserved_Measured)) > Maximum_Reserved_Electricity_Possible                               ^ power_grid_energy_stabilizer.adb:143:31:VC_OVERFLOW_CHECK] [@GP_Id:8] (Standard__integer.range_check_((Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content + (Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured))))) )) > (1000000 : int)) )));
    ( [@branch_id=2858] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:145:13] ([#"power_grid_energy_stabilizer.adb" 145 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:145:45] ([#"power_grid_energy_stabilizer.adb" 145 0 0] (let temp___345 [@mlw:proxy_symbol] [@introduced] = (let temp___344 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 145 0 0] begin ensures {true} let _ = (let _ = temp___344.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured in (
       ()))
       in () end ;
      { ( temp___344 ) with Global_variables__status_system_type.__split_fields = { ( temp___344.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = ( 1000000 : Global_variables__reserve_electricity_range.reserve_electricity_range ) } } )))
      in (
      [#"power_grid_energy_stabilizer.adb" 145 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___345.Global_variables__status_system_type.__split_fields ))))
     ) ) )) else (
     ( ();
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:147:13] ([#"power_grid_energy_stabilizer.adb" 147 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:147:30] ([#"power_grid_energy_stabilizer.adb" 147 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:147:57] ([#"power_grid_energy_stabilizer.adb" 147 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:147:27] ([#"power_grid_energy_stabilizer.adb" 147 0 0] [#"power_grid_energy_stabilizer.adb" 147 0 0] (Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content <- ( ([#"power_grid_energy_stabilizer.adb" 147 0 0] ( [@vc:annotation] [@comment:            Reserve_Total := Remaining_Supply + Integer(Status_System.Reserved_Measured);                                               ^ power_grid_energy_stabilizer.adb:147:47:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:power_grid_energy_stabilizer.adb:147:47] [@GP_Id:6] [@GP_Shape:if__if__reserve_total_assign__add] (Standard__integer.range_check_((Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content + (Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured))))) )) ))) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:148:13] ([#"power_grid_energy_stabilizer.adb" 148 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:148:74] ([#"power_grid_energy_stabilizer.adb" 148 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:148:45] ([#"power_grid_energy_stabilizer.adb" 148 0 0] (let temp___347 [@mlw:proxy_symbol] [@introduced] = (let temp___346 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 148 0 0] begin ensures {true} let _ = (let _ = temp___346.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured in (
       ()))
       in () end ;
      { ( temp___346 ) with Global_variables__status_system_type.__split_fields = { ( temp___346.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = (Global_variables__reserve_electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 148 0 0] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:148:74] [@GP_Shape:if__if__status_system_assign__typeconv] [@comment:            Status_System.Reserved_Measured := Reserve_Electricity_Range(Reserve_Total);                                                                          ^ power_grid_energy_stabilizer.adb:148:74:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:7] (Global_variables__reserve_electricity_range.range_check_(Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content)) )))) } } )))
      in (
       (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___347.Global_variables__status_system_type.__split_fields ))))
     ) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:149:13] ([#"power_grid_energy_stabilizer.adb" 149 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:149:13] ([#"power_grid_energy_stabilizer.adb" 149 0 0] ( (Power_grid_energy_stabilizer__print_reserve_levels___axiom.print_reserve_levels(())) )) ) )))) ) )) else (
    ()))) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:153:10] ([#"power_grid_energy_stabilizer.adb" 153 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:153:7] ([#"power_grid_energy_stabilizer.adb" 153 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 153 0 0] [#"power_grid_energy_stabilizer.adb" 153 0 0] (([@branch_id=2891] Main.spark__branch).bool__content <- ( ((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) < (5000 : int)) )));
   ( [@branch_id=2891] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:155:13] ([#"power_grid_energy_stabilizer.adb" 155 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:155:13] ([#"power_grid_energy_stabilizer.adb" 155 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_348.temp___String_Literal_348(()))) ((1 : int)) ((43 : int))))) )) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:156:13] ([#"power_grid_energy_stabilizer.adb" 156 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:156:13] ([#"power_grid_energy_stabilizer.adb" 156 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_349.temp___String_Literal_349(()))) ((1 : int)) ((112 : int))))) )) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:157:13] ([#"power_grid_energy_stabilizer.adb" 157 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:157:13] ([#"power_grid_energy_stabilizer.adb" 157 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_350.temp___String_Literal_350(()))) ((1 : int)) ((0 : int))))) )) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:158:13] ([#"power_grid_energy_stabilizer.adb" 158 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:158:13] ([#"power_grid_energy_stabilizer.adb" 158 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_351.temp___String_Literal_351(()))) ((1 : int)) ((50 : int))))) )) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:159:20] ([#"power_grid_energy_stabilizer.adb" 159 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:159:13] ([#"power_grid_energy_stabilizer.adb" 159 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:159:13] ([#"power_grid_energy_stabilizer.adb" 159 0 0] (let as_io_wrapper__as_get__2__item__compl = Power_grid_energy_stabilizer__refill_reserve__user_input.user_input.Array__Int__Standard__character.map__content in (
     [#"power_grid_energy_stabilizer.adb" 159 0 0] let as_io_wrapper__as_get__2__item = { Array__Int__Standard__character.map__content = as_io_wrapper__as_get__2__item__compl } in 
      ( (As_io_wrapper__as_get__2___axiom.as_get__2(as_io_wrapper__as_get__2__item) ((Standard__integer__rep.of_rep(Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.first))) ((Standard__integer__rep.of_rep(Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.last))));
      [#"power_grid_energy_stabilizer.adb" 159 0 0] (Power_grid_energy_stabilizer__refill_reserve__user_input.user_input.Array__Int__Standard__character.map__content <- ( (let temp___352 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(as_io_wrapper__as_get__2__item.Array__Int__Standard__character.map__content) (Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.first) (Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.last)) in (
       (Array__Int__Standard__character.slide (Standard__string.to_array temp___352) (Standard__string.first temp___352) Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.first)))
       )) )))
    ) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:160:13] ([#"power_grid_energy_stabilizer.adb" 160 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:160:13] ([#"power_grid_energy_stabilizer.adb" 160 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_353.temp___String_Literal_353(()))) ((1 : int)) ((0 : int))))) )) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:161:19] ([#"power_grid_energy_stabilizer.adb" 161 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:161:16] ([#"power_grid_energy_stabilizer.adb" 161 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 161 0 0] [#"power_grid_energy_stabilizer.adb" 161 0 0] (([@branch_id=2915] Main.spark__branch).bool__content <- ( (let temp___362 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_358.temp___String_Literal_358(())) in (
    (let temp___361 [@mlw:proxy_symbol] [@introduced] = (let temp___357 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
    (let temp___356 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
     ( [#"power_grid_energy_stabilizer.adb" 161 0 0] assert { [#"power_grid_energy_stabilizer.adb" 161 0 0] ([#"power_grid_energy_stabilizer.adb" 161 0 0] ( [@comment:               if User_Input(1 .. 1) = "y"                   ^ power_grid_energy_stabilizer.adb:161:19:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:power_grid_energy_stabilizer.adb:161:19] [@GP_Shape:if__if__cmp__slice] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:9] ( (temp___356 <= temp___357) -> ( ( (Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.first <= temp___356) /\ (temp___356 <= Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.last) ) /\ ( (Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.first <= temp___357) /\ (temp___357 <= Power_grid_energy_stabilizer__refill_reserve__TTuser_inputSP1.last) ) ) ) )) };
     Power_grid_energy_stabilizer__refill_reserve__user_input.user_input.Array__Int__Standard__character.map__content )))
    ))
     in (
     (Array__Int__Standard__character.bool_eq(temp___361) (Power_grid_energy_stabilizer__refill_reserve__T49b.first) (Power_grid_energy_stabilizer__refill_reserve__T49b.last) (temp___362) ((1 : int)) ((1 : int)))))
    ))
     )));
    ( [@branch_id=2915] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:164:17] ([#"power_grid_energy_stabilizer.adb" 164 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:164:49] ([#"power_grid_energy_stabilizer.adb" 164 0 0] (let temp___355 [@mlw:proxy_symbol] [@introduced] = (let temp___354 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
      ( [#"power_grid_energy_stabilizer.adb" 164 0 0] begin ensures {true} let _ = (let _ = temp___354.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured in (
       ()))
       in () end ;
      { ( temp___354 ) with Global_variables__status_system_type.__split_fields = { ( temp___354.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = ( 5000 : Global_variables__reserve_electricity_range.reserve_electricity_range ) } } )))
      in (
      [#"power_grid_energy_stabilizer.adb" 164 0 0] (Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___355.Global_variables__status_system_type.__split_fields ))))
     ) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:165:17] ([#"power_grid_energy_stabilizer.adb" 165 0 0] ()) );
     ( [@GP_Sloc:power_grid_energy_stabilizer.adb:165:17] ([#"power_grid_energy_stabilizer.adb" 165 0 0] ( (Power_grid_energy_stabilizer__print_reserve_levels___axiom.print_reserve_levels(())) )) ) )) else (
     ()))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "print_reserve_levels" defined at power_grid_energy_stabilizer.ads:79, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__print_reserve_levels__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Global_variables__status_system as Global_variables__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Temp___String_Literal_363 as Temp___String_Literal_363
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_364 as Temp___String_Literal_364
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_365 as Temp___String_Literal_365
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_366 as Temp___String_Literal_366
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_367 as Temp___String_Literal_367
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_368 as Temp___String_Literal_368
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_369 as Temp___String_Literal_369
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Global_variables__status_system___axiom as Global_variables__status_system___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 79 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:79] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 79 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:79 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 79 0 0] assume { [#"power_grid_energy_stabilizer.ads" 79 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 79 0 0] assume { [#"power_grid_energy_stabilizer.ads" 79 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:79 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:79 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 79 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:79 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 79 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:175:7] ([#"power_grid_energy_stabilizer.adb" 175 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:175:7] ([#"power_grid_energy_stabilizer.adb" 175 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_363.temp___String_Literal_363(()))) ((1 : int)) ((49 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:176:7] ([#"power_grid_energy_stabilizer.adb" 176 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:176:7] ([#"power_grid_energy_stabilizer.adb" 176 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_364.temp___String_Literal_364(()))) ((1 : int)) ((30 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:177:7] ([#"power_grid_energy_stabilizer.adb" 177 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:177:7] ([#"power_grid_energy_stabilizer.adb" 177 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_365.temp___String_Literal_365(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:178:7] ([#"power_grid_energy_stabilizer.adb" 178 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:178:7] ([#"power_grid_energy_stabilizer.adb" 178 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_366.temp___String_Literal_366(()))) ((1 : int)) ((24 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:179:7] ([#"power_grid_energy_stabilizer.adb" 179 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:179:7] ([#"power_grid_energy_stabilizer.adb" 179 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Global_variables__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:180:7] ([#"power_grid_energy_stabilizer.adb" 180 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:180:7] ([#"power_grid_energy_stabilizer.adb" 180 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_367.temp___String_Literal_367(()))) ((1 : int)) ((6 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:181:7] ([#"power_grid_energy_stabilizer.adb" 181 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:181:7] ([#"power_grid_energy_stabilizer.adb" 181 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_368.temp___String_Literal_368(()))) ((1 : int)) ((49 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:182:7] ([#"power_grid_energy_stabilizer.adb" 182 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:182:7] ([#"power_grid_energy_stabilizer.adb" 182 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_369.temp___String_Literal_369(()))) ((1 : int)) ((0 : int))))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
