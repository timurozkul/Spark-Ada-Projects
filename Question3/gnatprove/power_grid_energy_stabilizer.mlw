(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "text_io_file_type" defined at spark.ads:61, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io_file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type text_io_file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : text_io_file_type) (b : text_io_file_type) : bool
 
 val constant dummy 
   : text_io_file_type

 
 type text_io_file_type__ref =
  { mutable text_io_file_type__content : text_io_file_type }
 
 function text_io_file_type__ref_text_io_file_type__content__projection 
   (a : text_io_file_type__ref) : text_io_file_type =
  a.text_io_file_type__content
 
 meta "model_projection" function text_io_file_type__ref_text_io_file_type__content__projection
 
 meta "inline:no" function text_io_file_type__ref_text_io_file_type__content__projection
 
 val text_io_file_type__havoc 
   (x : text_io_file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_type
 use export Spark__text_io_file_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : file_type) (b : file_type) : bool
 
 val constant dummy 
   : file_type

 
 type file_type__ref =
  { mutable file_type__content : file_type }
 
 function file_type__ref_file_type__content__projection 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref_file_type__content__projection
 
 meta "inline:no" function file_type__ref_file_type__content__projection
 
 val file_type__havoc 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "file" defined at spark-text_io.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_readable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 180 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_readable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "file" defined at spark-text_io.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_open__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 162 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_open__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_open
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_open 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_open__function_guard 
   (temp___result_154 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode__rep
 use        Ada__text_io__file_mode as Ada__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__file_mode.file_mode, 
 predicate in_range = Ada__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_modeB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_modeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_modeB__ref =
  { mutable file_modeB__content : file_modeB }
 
 function file_modeB__ref_file_modeB__content__projection 
   (a : file_modeB__ref) : file_modeB =
  a.file_modeB__content
 
 meta "model_projection" function file_modeB__ref_file_modeB__content__projection
 
 meta "inline:no" function file_modeB__ref_file_modeB__content__projection
 
 val file_modeB__havoc 
   (x : file_modeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_modeB__rep
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_modeB.file_modeB, 
 predicate in_range = Spark__text_io__file_modeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_mode 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref =
  { mutable file_mode__content : file_mode }
 
 function file_mode__ref_file_mode__content__2__projection 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_file_mode__content__2__projection
 
 meta "inline:no" function file_mode__ref_file_mode__content__2__projection
 
 val file_mode__havoc 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_mode__rep
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_mode.file_mode, 
 predicate in_range = Spark__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "file" defined at spark-text_io.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__mode__2__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 165 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__mode__2__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__mode__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function mode__2 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate mode__2__function_guard 
   (temp___result_155 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for possibly declaring a logic function for "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_readable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_readable__function_guard 
   (temp___result_156 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for defining the constant "file" defined at spark-text_io.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__is_writable__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 184 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:184, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__is_writable__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__is_writable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
 
 val predicate is_writable__function_guard 
   (temp___result_157 : bool) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__projection
 
 meta "inline:no" function file_status__ref_file_status__content__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Spark__file_status__rep
 use        Spark__file_status as Spark__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__file_status.file_status, 
 predicate in_range = Spark__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_statusB 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_statusB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_statusB__ref =
  { mutable file_statusB__content : file_statusB }
 
 function file_statusB__ref_file_statusB__content__projection 
   (a : file_statusB__ref) : file_statusB =
  a.file_statusB__content
 
 meta "model_projection" function file_statusB__ref_file_statusB__content__projection
 
 meta "inline:no" function file_statusB__ref_file_statusB__content__projection
 
 val file_statusB__havoc 
   (x : file_statusB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_statusB__rep
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_statusB.file_statusB, 
 predicate in_range = Spark__text_io__file_statusB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type file_status 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = file_status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_status__ref =
  { mutable file_status__content : file_status }
 
 function file_status__ref_file_status__content__2__projection 
   (a : file_status__ref) : file_status =
  a.file_status__content
 
 meta "model_projection" function file_status__ref_file_status__content__2__projection
 
 meta "inline:no" function file_status__ref_file_status__content__2__projection
 
 val file_status__havoc 
   (x : file_status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Translate_Type *)
module Spark__text_io__file_status__rep
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Spark__text_io__file_status.file_status, 
 predicate in_range = Spark__text_io__file_status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "file" defined at spark-text_io.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module Spark__text_io__status__file
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val constant file [#"spark-text_io.ads" 133 0 0]
   : Spark__text_io__file_type.file_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "file" defined at spark-text_io.ads:133, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__status__file___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spark__text_io__status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val function status 
   (file : Spark__text_io__file_type.file_type) : int
 
 val predicate status__function_guard 
   (temp___result_158 : int) (file : Spark__text_io__file_type.file_type)

end

(* Module for axiomatizing type "electricity_range" defined at global_variables.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type electricity_range =
  < range 0 10000000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10000000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = electricity_range, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type electricity_range__ref =
  { mutable electricity_range__content : electricity_range }
 
 function electricity_range__ref_electricity_range__content__projection 
   (a : electricity_range__ref) : electricity_range =
  a.electricity_range__content
 
 meta "model_projection" function electricity_range__ref_electricity_range__content__projection
 
 meta "inline:no" function electricity_range__ref_electricity_range__content__projection
 
 val electricity_range__havoc 
   (x : electricity_range__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "electricity_range" defined at global_variables.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__electricity_range__rep
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Global_variables__electricity_range.electricity_range) : int =
  (Global_variables__electricity_range.electricity_range'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Global_variables__electricity_range.electricity_range, 
 predicate in_range = Global_variables__electricity_range.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reserve_electricity_range" defined at global_variables.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__reserve_electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reserve_electricity_range =
  < range 0 1000000 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reserve_electricity_range, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reserve_electricity_range__ref =
  { mutable reserve_electricity_range__content : reserve_electricity_range }
 
 function reserve_electricity_range__ref_reserve_electricity_range__content__projection 
   (a : reserve_electricity_range__ref) : reserve_electricity_range =
  a.reserve_electricity_range__content
 
 meta "model_projection" function reserve_electricity_range__ref_reserve_electricity_range__content__projection
 
 meta "inline:no" function reserve_electricity_range__ref_reserve_electricity_range__content__projection
 
 val reserve_electricity_range__havoc 
   (x : reserve_electricity_range__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reserve_electricity_range" defined at global_variables.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__reserve_electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Global_variables__reserve_electricity_range.reserve_electricity_range) : int =
  (Global_variables__reserve_electricity_range.reserve_electricity_range'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Global_variables__reserve_electricity_range.reserve_electricity_range, 
 predicate in_range = Global_variables__reserve_electricity_range.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "status_reserved_electricity_type" defined at global_variables.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__status_reserved_electricity_type
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type status_reserved_electricity_type 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = status_reserved_electricity_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type status_reserved_electricity_type__ref =
  { mutable status_reserved_electricity_type__content : status_reserved_electricity_type }
 
 function status_reserved_electricity_type__ref_status_reserved_electricity_type__content__projection 
   (a : status_reserved_electricity_type__ref) : status_reserved_electricity_type =
  a.status_reserved_electricity_type__content
 
 meta "model_projection" function status_reserved_electricity_type__ref_status_reserved_electricity_type__content__projection
 
 meta "inline:no" function status_reserved_electricity_type__ref_status_reserved_electricity_type__content__projection
 
 val status_reserved_electricity_type__havoc 
   (x : status_reserved_electricity_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "status_reserved_electricity_type" defined at global_variables.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__status_reserved_electricity_type__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Global_variables__status_reserved_electricity_type.status_reserved_electricity_type, 
 predicate in_range = Global_variables__status_reserved_electricity_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "status_system_type" defined at global_variables.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Global_variables__status_system_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep

 type __split_fields =
  { rec__global_variables__status_system_type__consumption_measured [@model_trace:.18433] [@name:Consumption_Measured] : Global_variables__electricity_range.electricity_range; rec__global_variables__status_system_type__supplied_measured [@model_trace:.18443] [@name:Supplied_Measured] : Global_variables__electricity_range.electricity_range; rec__global_variables__status_system_type__reserved_measured [@name:Reserved_Measured] [@model_trace:.18453] : Global_variables__reserve_electricity_range.reserve_electricity_range; rec__global_variables__status_system_type__status_reserved_electricity [@name:Status_Reserved_Electricity] [@model_trace:.18463] : Global_variables__status_reserved_electricity_type.status_reserved_electricity_type }
 
 function __split_fields_rec__global_variables__status_system_type__consumption_measured__projection [@model_trace:.18433] [@name:Consumption_Measured] 
   (a : __split_fields) : Global_variables__electricity_range.electricity_range =
  a.rec__global_variables__status_system_type__consumption_measured
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__consumption_measured__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__consumption_measured__projection
 
 function __split_fields_rec__global_variables__status_system_type__supplied_measured__projection [@model_trace:.18443] [@name:Supplied_Measured] 
   (a : __split_fields) : Global_variables__electricity_range.electricity_range =
  a.rec__global_variables__status_system_type__supplied_measured
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__supplied_measured__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__supplied_measured__projection
 
 function __split_fields_rec__global_variables__status_system_type__reserved_measured__projection [@name:Reserved_Measured] [@model_trace:.18453] 
   (a : __split_fields) : Global_variables__reserve_electricity_range.reserve_electricity_range =
  a.rec__global_variables__status_system_type__reserved_measured
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__reserved_measured__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__reserved_measured__projection
 
 function __split_fields_rec__global_variables__status_system_type__status_reserved_electricity__projection [@name:Status_Reserved_Electricity] [@model_trace:.18463] 
   (a : __split_fields) : Global_variables__status_reserved_electricity_type.status_reserved_electricity_type =
  a.rec__global_variables__status_system_type__status_reserved_electricity
 
 meta "model_projection" function __split_fields_rec__global_variables__status_system_type__status_reserved_electricity__projection
 
 meta "inline:no" function __split_fields_rec__global_variables__status_system_type__status_reserved_electricity__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate global_variables__status_system_type__consumption_measured__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__consumption_measured__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__consumption_measured__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__consumption_measured_ 
   (a : __rep) : Global_variables__electricity_range.electricity_range
  requires {  (global_variables__status_system_type__consumption_measured__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__consumption_measured) }
 
 predicate global_variables__status_system_type__supplied_measured__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__supplied_measured__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__supplied_measured__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__supplied_measured_ 
   (a : __rep) : Global_variables__electricity_range.electricity_range
  requires {  (global_variables__status_system_type__supplied_measured__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__supplied_measured) }
 
 predicate global_variables__status_system_type__reserved_measured__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__reserved_measured__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__reserved_measured__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__reserved_measured_ 
   (a : __rep) : Global_variables__reserve_electricity_range.reserve_electricity_range
  requires {  (global_variables__status_system_type__reserved_measured__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__reserved_measured) }
 
 predicate global_variables__status_system_type__status_reserved_electricity__pred 
   (a : __rep) =
  true
 val global_variables__status_system_type__status_reserved_electricity__pred 
   (a : __rep) : bool
  ensures { result <-> global_variables__status_system_type__status_reserved_electricity__pred (a : __rep) }
 
 val rec__global_variables__status_system_type__status_reserved_electricity_ 
   (a : __rep) : Global_variables__status_reserved_electricity_type.status_reserved_electricity_type
  requires {  (global_variables__status_system_type__status_reserved_electricity__pred a) }
  ensures {  (result = a.__split_fields.rec__global_variables__status_system_type__status_reserved_electricity) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Global_variables__electricity_range__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__consumption_measured) = (Global_variables__electricity_range__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__consumption_measured)) /\ ((Global_variables__electricity_range__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__supplied_measured) = (Global_variables__electricity_range__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__supplied_measured)) )/\( ((Global_variables__reserve_electricity_range__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__reserved_measured) = (Global_variables__reserve_electricity_range__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__reserved_measured))/\((Global_variables__status_reserved_electricity_type__rep.to_rep a.__split_fields.rec__global_variables__status_system_type__status_reserved_electricity) = (Global_variables__status_reserved_electricity_type__rep.to_rep b.__split_fields.rec__global_variables__status_system_type__status_reserved_electricity)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "status_system_type" defined at global_variables.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Global_variables__status_system_type
 use export Global_variables__status_system_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type status_system_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant global_variables__status_system_type__consumption_measured__first__bit 
   : int

 
 val constant global_variables__status_system_type__consumption_measured__last__bit 
   : int

 
 val constant global_variables__status_system_type__consumption_measured__position 
   : int

 
 axiom global_variables__status_system_type__consumption_measured__first__bit_axiom :
  ((global_variables__status_system_type__consumption_measured__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__consumption_measured__last__bit_axiom :
  ((global_variables__status_system_type__consumption_measured__last__bit ) > (global_variables__status_system_type__consumption_measured__first__bit ))
 
 axiom global_variables__status_system_type__consumption_measured__position_axiom :
  ((global_variables__status_system_type__consumption_measured__position ) >= (0 : int))
 
 val constant global_variables__status_system_type__supplied_measured__first__bit 
   : int

 
 val constant global_variables__status_system_type__supplied_measured__last__bit 
   : int

 
 val constant global_variables__status_system_type__supplied_measured__position 
   : int

 
 axiom global_variables__status_system_type__supplied_measured__first__bit_axiom :
  ((global_variables__status_system_type__supplied_measured__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__supplied_measured__last__bit_axiom :
  ((global_variables__status_system_type__supplied_measured__last__bit ) > (global_variables__status_system_type__supplied_measured__first__bit ))
 
 axiom global_variables__status_system_type__supplied_measured__position_axiom :
  ((global_variables__status_system_type__supplied_measured__position ) >= (0 : int))
 
 val constant global_variables__status_system_type__reserved_measured__first__bit 
   : int

 
 val constant global_variables__status_system_type__reserved_measured__last__bit 
   : int

 
 val constant global_variables__status_system_type__reserved_measured__position 
   : int

 
 axiom global_variables__status_system_type__reserved_measured__first__bit_axiom :
  ((global_variables__status_system_type__reserved_measured__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__reserved_measured__last__bit_axiom :
  ((global_variables__status_system_type__reserved_measured__last__bit ) > (global_variables__status_system_type__reserved_measured__first__bit ))
 
 axiom global_variables__status_system_type__reserved_measured__position_axiom :
  ((global_variables__status_system_type__reserved_measured__position ) >= (0 : int))
 
 val constant global_variables__status_system_type__status_reserved_electricity__first__bit 
   : int

 
 val constant global_variables__status_system_type__status_reserved_electricity__last__bit 
   : int

 
 val constant global_variables__status_system_type__status_reserved_electricity__position 
   : int

 
 axiom global_variables__status_system_type__status_reserved_electricity__first__bit_axiom :
  ((global_variables__status_system_type__status_reserved_electricity__first__bit ) >= (0 : int))
 
 axiom global_variables__status_system_type__status_reserved_electricity__last__bit_axiom :
  ((global_variables__status_system_type__status_reserved_electricity__last__bit ) > (global_variables__status_system_type__status_reserved_electricity__first__bit ))
 
 axiom global_variables__status_system_type__status_reserved_electricity__position_axiom :
  ((global_variables__status_system_type__status_reserved_electricity__position ) >= (0 : int))
 
 val function user_eq 
   (a : status_system_type) (b : status_system_type) : bool
 
 val constant dummy 
   : status_system_type

 
 type status_system_type__ref =
  { mutable status_system_type__content : status_system_type }
 
 function status_system_type__ref_status_system_type__content__projection 
   (a : status_system_type__ref) : status_system_type =
  a.status_system_type__content
 
 meta "model_projection" function status_system_type__ref_status_system_type__content__projection
 
 meta "inline:no" function status_system_type__ref_status_system_type__content__projection
 
 val status_system_type__havoc 
   (x : status_system_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "status" defined at power_grid_energy_stabilizer.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Power_grid_energy_stabilizer__is_safe__status
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 val constant status [#"power_grid_energy_stabilizer.ads" 28 0 0][@model_projected] [@name:Status] [@model_trace:2840] 
   : Global_variables__status_system_type.status_system_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "status" defined at power_grid_energy_stabilizer.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__is_safe__status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_safe" defined at power_grid_energy_stabilizer.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__is_safe
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 val function is_safe 
   (status : Global_variables__status_system_type.status_system_type) : bool
 
 val predicate is_safe__function_guard 
   (temp___result_159 : bool) (status : Global_variables__status_system_type.status_system_type)

end

(* Module for defining the constant "status_reserved_electricity" defined at power_grid_energy_stabilizer.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant status_reserved_electricity [#"power_grid_energy_stabilizer.ads" 30 0 0][@name:Status_Reserved_Electricity] [@model_trace:2859] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "status_reserved_electricity" defined at power_grid_energy_stabilizer.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "status_electricity_system_to_string" defined at power_grid_energy_stabilizer.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function status_electricity_system_to_string 
   (status_reserved_electricity : int) : Standard__string.string
 
 val predicate status_electricity_system_to_string__function_guard 
   (temp___result_160 : Standard__string.string) (status_reserved_electricity : int)

end

(* Module for axiomatizing type "T1b" defined at power_grid_energy_stabilizer.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__init__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"as_io_wrapper.ads" 59 0 0][@name:Item] [@model_projected] [@model_trace:18685] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "maximum_reserved_electricity_possible" defined at global_variables.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Global_variables__maximum_reserved_electricity_possible
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant maximum_reserved_electricity_possible [#"global_variables.ads" 11 0 0][@name:Maximum_Reserved_Electricity_Possible] [@model_trace:18351] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "critical_reserve_level" defined at global_variables.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Global_variables__critical_reserve_level
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant critical_reserve_level [#"global_variables.ads" 12 0 0][@name:Critical_Reserve_level] [@model_trace:18361] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T4b" defined at power_grid_energy_stabilizer.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (64 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put_line__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"as_io_wrapper.ads" 83 0 0][@name:Item] [@model_projected] [@model_trace:18768] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put_line__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T5b" defined at power_grid_energy_stabilizer.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "prompt_try_again_when_not_integer" defined at as_io_wrapper.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_get__3__prompt_try_again_when_not_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant prompt_try_again_when_not_integer [#"as_io_wrapper.ads" 106 0 0][@model_projected] [@name:Prompt_Try_Again_When_Not_Integer] [@model_trace:18834] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "prompt_try_again_when_not_integer" defined at as_io_wrapper.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__3__prompt_try_again_when_not_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T6b" defined at power_grid_energy_stabilizer.adb:37, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "maximum_electricity_possible" defined at global_variables.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Global_variables__maximum_electricity_possible
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant maximum_electricity_possible [#"global_variables.ads" 10 0 0][@name:Maximum_Electricity_Possible] [@model_trace:18341] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "item" defined at as_io_wrapper.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module As_io_wrapper__as_put__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant item [#"as_io_wrapper.ads" 114 0 0][@name:Item] [@model_trace:18878] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_put__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7b" defined at power_grid_energy_stabilizer.adb:39, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at power_grid_energy_stabilizer.adb:47, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T9b" defined at power_grid_energy_stabilizer.adb:49, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__L_2__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (27 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10b" defined at power_grid_energy_stabilizer.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__L_2__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T11b" defined at power_grid_energy_stabilizer.adb:53, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__read_supply__L_2__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13b" defined at power_grid_energy_stabilizer.adb:61, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (9 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T15b" defined at power_grid_energy_stabilizer.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T15b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (13 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at power_grid_energy_stabilizer.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at power_grid_energy_stabilizer.adb:80, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18b" defined at power_grid_energy_stabilizer.adb:81, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (18 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T19b" defined at power_grid_energy_stabilizer.adb:83, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at power_grid_energy_stabilizer.adb:86, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (49 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T21b" defined at power_grid_energy_stabilizer.adb:89, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T21b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (28 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T22b" defined at power_grid_energy_stabilizer.adb:91, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T23b" defined at power_grid_energy_stabilizer.adb:93, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at power_grid_energy_stabilizer.adb:94, created in Gnat2Why.Types.Translate_Type *)
module Power_grid_energy_stabilizer__print_status__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (35 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_input [#"spark-text_io.ads" 102 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_input" defined at spark-text_io.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_output [#"spark-text_io.ads" 103 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_output" defined at spark-text_io.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "standard_error" defined at spark-text_io.ads:104, created in Gnat2Why.Decls.Translate_Variable *)
module Spark__text_io__standard_error
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 val standard_error [#"spark-text_io.ads" 104 0 0] : Spark__text_io__file_type.file_type__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "standard_error" defined at spark-text_io.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spark__text_io__standard_error___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "status_system" defined at power_grid_energy_stabilizer.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__status_system
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 val status_system__split_fields [#"power_grid_energy_stabilizer.ads" 21 0 0][@name:Status_System] [@model_trace:2786] [@model_projected]  : Global_variables__status_system_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "status_system" defined at power_grid_energy_stabilizer.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__status_system___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "electricity" defined at power_grid_energy_stabilizer.adb:31, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__read_consumption__electricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val electricity [#"power_grid_energy_stabilizer.adb" 31 0 0][@model_trace:2404] [@model_projected] [@name:Electricity]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "electricity" defined at power_grid_energy_stabilizer.adb:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_consumption__electricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at as_io_wrapper.ads:106, created in Gnat2Why.Decls.Translate_Variable *)
module As_io_wrapper__as_get__3__item
 use        "_gnatprove_standard".Main
 use        "int".Int

 val item [#"as_io_wrapper.ads" 106 0 0][@name:Item] [@model_trace:18825] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at as_io_wrapper.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module As_io_wrapper__as_get__3__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "electricity" defined at power_grid_energy_stabilizer.adb:45, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__read_supply__electricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val electricity [#"power_grid_energy_stabilizer.adb" 45 0 0][@model_projected] [@model_trace:2461] [@name:Electricity]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "electricity" defined at power_grid_energy_stabilizer.adb:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_supply__electricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "remaining_supply" defined at power_grid_energy_stabilizer.adb:99, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__refill_reserve__remaining_supply
 use        "_gnatprove_standard".Main
 use        "int".Int

 val remaining_supply [#"power_grid_energy_stabilizer.adb" 99 0 0][@model_trace:2671] [@model_projected] [@name:Remaining_Supply]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "remaining_supply" defined at power_grid_energy_stabilizer.adb:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__refill_reserve__remaining_supply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "reserve_total" defined at power_grid_energy_stabilizer.adb:100, created in Gnat2Why.Decls.Translate_Variable *)
module Power_grid_energy_stabilizer__refill_reserve__reserve_total
 use        "_gnatprove_standard".Main
 use        "int".Int

 val reserve_total [#"power_grid_energy_stabilizer.adb" 100 0 0][@model_projected] [@name:Reserve_Total] [@model_trace:2680]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "reserve_total" defined at power_grid_energy_stabilizer.adb:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__refill_reserve__reserve_total___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "init" defined at power_grid_energy_stabilizer.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "read_consumption" defined at power_grid_energy_stabilizer.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__read_consumption
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "read_supply" defined at power_grid_energy_stabilizer.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__read_supply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "energy_stabilizerg_system" defined at power_grid_energy_stabilizer.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print_status" defined at power_grid_energy_stabilizer.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__print_status
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "refill_reserve" defined at power_grid_energy_stabilizer.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Power_grid_energy_stabilizer__refill_reserve
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_init_standard_input" defined at as_io_wrapper.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_init_standard_input
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_init_standard_output" defined at as_io_wrapper.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_init_standard_output
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put__2" defined at as_io_wrapper.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put_line" defined at as_io_wrapper.ads:83, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at power_grid_energy_stabilizer.adb:34, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Power_grid_energy_stabilizer__read_consumption__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at power_grid_energy_stabilizer.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_consumption__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_get__3" defined at as_io_wrapper.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_get__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "as_put__3" defined at as_io_wrapper.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module As_io_wrapper__as_put__3
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at power_grid_energy_stabilizer.adb:48, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Power_grid_energy_stabilizer__read_supply__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at power_grid_energy_stabilizer.adb:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Power_grid_energy_stabilizer__read_supply__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "text_io_file_type" defined at spark.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io_file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io_file_type as Spark__text_io_file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_165 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_165 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_165 : Spark__text_io_file_type.text_io_file_type) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_166 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_167 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_166 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_167 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_166 : Spark__text_io_file_type.text_io_file_type) (temp___skip_top_level_167 : bool) }

end

(* Module giving axioms for type "file_type" defined at spark-text_io.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_172 : Spark__text_io__file_type.file_type) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_172 : Spark__text_io__file_type.file_type) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_172 : Spark__text_io__file_type.file_type) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_173 : Spark__text_io__file_type.file_type) (temp___skip_top_level_174 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_173 : Spark__text_io__file_type.file_type) (temp___skip_top_level_174 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_173 : Spark__text_io__file_type.file_type) (temp___skip_top_level_174 : bool) }

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__file_mode as Ada__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) =
  (if (( temp___is_init_175 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_179)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_180 : int) (temp___skip_top_level_181 : bool) }

end

(* Module giving axioms for type "file_modeB" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_modeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_modeB as Spark__text_io__file_modeB

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  (if (( temp___is_init_182 \/ (Spark__text_io__file_modeB.first <= Spark__text_io__file_modeB.last) )) then (
   (Spark__text_io__file_modeB.dynamic_property Spark__text_io__file_modeB.first Spark__text_io__file_modeB.last temp___expr_186)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_187 : int) (temp___skip_top_level_188 : bool) }

end

(* Module giving axioms for type "file_mode" defined at spark-text_io.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_mode___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_mode as Spark__text_io__file_mode

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  (if (( temp___is_init_189 \/ (Spark__text_io__file_mode.first <= Spark__text_io__file_mode.last) )) then (
   (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last temp___expr_193)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : int) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__file_status as Spark__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) =
  (if (( temp___is_init_207 \/ (Spark__file_status.first <= Spark__file_status.last) )) then (
   (Spark__file_status.dynamic_property Spark__file_status.first Spark__file_status.last temp___expr_211)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_212 : int) (temp___skip_top_level_213 : bool) }

end

(* Module giving axioms for type "file_statusB" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_statusB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_statusB as Spark__text_io__file_statusB

 predicate dynamic_invariant [@inline] 
   (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) =
  (if (( temp___is_init_214 \/ (Spark__text_io__file_statusB.first <= Spark__text_io__file_statusB.last) )) then (
   (Spark__text_io__file_statusB.dynamic_property Spark__text_io__file_statusB.first Spark__text_io__file_statusB.last temp___expr_218)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_218 : int) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_219 : int) (temp___skip_top_level_220 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_219 : int) (temp___skip_top_level_220 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_219 : int) (temp___skip_top_level_220 : bool) }

end

(* Module giving axioms for type "file_status" defined at spark-text_io.ads:59, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spark__text_io__file_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_status as Spark__text_io__file_status

 predicate dynamic_invariant [@inline] 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) =
  (if (( temp___is_init_221 \/ (Spark__text_io__file_status.first <= Spark__text_io__file_status.last) )) then (
   (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last temp___expr_225)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_226 : int) (temp___skip_top_level_227 : bool) }

end

(* Module giving axioms for type "electricity_range" defined at global_variables.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__electricity_range___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__electricity_range as Global_variables__electricity_range

 predicate dynamic_invariant [@inline] 
   (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool) =
  (if (( temp___is_init_228 \/ (Global_variables__electricity_range.first <= Global_variables__electricity_range.last) )) then (
   (Global_variables__electricity_range.dynamic_property Global_variables__electricity_range.first Global_variables__electricity_range.last temp___expr_232)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_233 : int) (temp___skip_top_level_234 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_233 : int) (temp___skip_top_level_234 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_233 : int) (temp___skip_top_level_234 : bool) }

end

(* Module giving axioms for type "reserve_electricity_range" defined at global_variables.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__reserve_electricity_range___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range

 predicate dynamic_invariant [@inline] 
   (temp___expr_239 : int) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool) =
  (if (( temp___is_init_235 \/ (Global_variables__reserve_electricity_range.first <= Global_variables__reserve_electricity_range.last) )) then (
   (Global_variables__reserve_electricity_range.dynamic_property Global_variables__reserve_electricity_range.first Global_variables__reserve_electricity_range.last temp___expr_239)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_239 : int) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_239 : int) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_240 : int) (temp___skip_top_level_241 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_240 : int) (temp___skip_top_level_241 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_240 : int) (temp___skip_top_level_241 : bool) }

end

(* Module giving axioms for type "status_reserved_electricity_type" defined at global_variables.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__status_reserved_electricity_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_246 : int) (temp___is_init_242 : bool) (temp___skip_constant_243 : bool) (temp___do_toplevel_244 : bool) (temp___do_typ_inv_245 : bool) =
  (if (( temp___is_init_242 \/ (Global_variables__status_reserved_electricity_type.first <= Global_variables__status_reserved_electricity_type.last) )) then (
   (Global_variables__status_reserved_electricity_type.dynamic_property Global_variables__status_reserved_electricity_type.first Global_variables__status_reserved_electricity_type.last temp___expr_246)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_246 : int) (temp___is_init_242 : bool) (temp___skip_constant_243 : bool) (temp___do_toplevel_244 : bool) (temp___do_typ_inv_245 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_246 : int) (temp___is_init_242 : bool) (temp___skip_constant_243 : bool) (temp___do_toplevel_244 : bool) (temp___do_typ_inv_245 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_247 : int) (temp___skip_top_level_248 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_247 : int) (temp___skip_top_level_248 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_247 : int) (temp___skip_top_level_248 : bool) }

end

(* Module giving axioms for type "status_system_type" defined at global_variables.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Global_variables__status_system_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_253 : Global_variables__status_system_type.status_system_type) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_253 : Global_variables__status_system_type.status_system_type) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_253 : Global_variables__status_system_type.status_system_type) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_254 : Global_variables__status_system_type.status_system_type) (temp___skip_top_level_255 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_254 : Global_variables__status_system_type.status_system_type) (temp___skip_top_level_255 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_254 : Global_variables__status_system_type.status_system_type) (temp___skip_top_level_255 : bool) }

end

(* Module giving axioms for type "T1b" defined at power_grid_energy_stabilizer.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__init__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at power_grid_energy_stabilizer.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at power_grid_energy_stabilizer.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at power_grid_energy_stabilizer.adb:37, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7b" defined at power_grid_energy_stabilizer.adb:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_consumption__L_1__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at power_grid_energy_stabilizer.adb:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T9b" defined at power_grid_energy_stabilizer.adb:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__L_2__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at power_grid_energy_stabilizer.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__L_2__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at power_grid_energy_stabilizer.adb:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__read_supply__L_2__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at power_grid_energy_stabilizer.adb:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15b" defined at power_grid_energy_stabilizer.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__T15b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at power_grid_energy_stabilizer.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at power_grid_energy_stabilizer.adb:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at power_grid_energy_stabilizer.adb:81, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19b" defined at power_grid_energy_stabilizer.adb:83, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at power_grid_energy_stabilizer.adb:86, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T21b" defined at power_grid_energy_stabilizer.adb:89, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T21b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at power_grid_energy_stabilizer.adb:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23b" defined at power_grid_energy_stabilizer.adb:93, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T24b" defined at power_grid_energy_stabilizer.adb:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module Power_grid_energy_stabilizer__print_status__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:12, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_273
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_273 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_273__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_273 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (7 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (8 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (10 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (11 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (13 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (14 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (15 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (17 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (18 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (19 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (21 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (22 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (23 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:61, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_276
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_276 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_276__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_276 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (2 : int))) = (99 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (4 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (5 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (6 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (7 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (8 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (9 : int))) = (100 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:62, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_277
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_277 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_277__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_277 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (4 : int))) = (95 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (5 : int))) = (65 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (6 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (7 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (8 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (9 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (10 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (11 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_277 __void_param) (13 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:33, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_279
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_279 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_279__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_279 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (5 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (8 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (10 : int))) = (112 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (12 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (16 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (17 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (18 : int))) = (114 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (19 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (20 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (21 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (22 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (24 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (25 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (26 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (27 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (28 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (29 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (30 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (31 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (32 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (33 : int))) = (116 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (34 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (35 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (36 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (37 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (38 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (39 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (40 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (41 : int))) = (109 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (42 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (43 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (44 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (45 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (46 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (47 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (48 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (49 : int))) = (115 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (50 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (51 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (52 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (53 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (54 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (55 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (56 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (57 : int))) = (121 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (58 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (59 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (60 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (61 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (62 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (63 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_279 __void_param) (64 : int))) = (114 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:35, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_280
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_280 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_280__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_280 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (5 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (10 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (11 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (14 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (16 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (17 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (20 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (21 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (23 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (25 : int))) = (114 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:37, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_281
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_281 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_281__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_281 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (9 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (11 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (14 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (18 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (19 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (20 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (21 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (23 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (24 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (25 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (26 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (27 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (28 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (29 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (30 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (31 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (32 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (34 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (35 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (36 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_281 __void_param) (37 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:39, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_282
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_282 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_282__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_282 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:47, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_288
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_288 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_288__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_288 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (5 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (8 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (9 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (10 : int))) = (112 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (12 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (16 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (17 : int))) = (117 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (18 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (19 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (21 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (23 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (25 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (26 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (27 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (28 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (29 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (30 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (31 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (32 : int))) = (105 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (33 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (34 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (36 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (37 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (38 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (39 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (40 : int))) = (108 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (41 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (42 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (43 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (44 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (45 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (46 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (47 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (48 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (49 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (50 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (51 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (52 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (53 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (54 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (55 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (56 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (57 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (58 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (59 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (60 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (61 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_288 __void_param) (62 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:49, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_289
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_289 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_289__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_289 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (4 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (5 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (6 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (7 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (8 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (9 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (11 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (12 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (14 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (15 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (17 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (18 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (19 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (21 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (22 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (23 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (24 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (25 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (26 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_289 __void_param) (27 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:51, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_290
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_290 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_290__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_290 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (9 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (11 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (13 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (14 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (18 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (19 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (20 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (21 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (23 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (24 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (25 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (26 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (27 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (28 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (29 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (30 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (31 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (32 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (34 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (35 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (36 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_290 __void_param) (37 : int))) = (32 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:53, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_291
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_291 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_291__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_291 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:78, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_302
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_302 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_302__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_302 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (7 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (8 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (10 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (11 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (13 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (14 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (15 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (16 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (17 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (18 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (19 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (20 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (21 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (22 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_302 __void_param) (23 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:80, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_303
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_303 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_303__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_303 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:81, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_304
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_304 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_304__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_304 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (4 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (6 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (7 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (8 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (10 : int))) = (115 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (11 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (12 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (13 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (14 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (15 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (16 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (17 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_304 __void_param) (18 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:83, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_305
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_305 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_305__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_305 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:86, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_306
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_306 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_306__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_306 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (1 : int))) = (83 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (2 : int))) = (121 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (6 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (7 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (8 : int))) = (67 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (9 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (10 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (11 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (12 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (13 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (14 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (15 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (16 : int))) = (33 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (17 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (18 : int))) = (78 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (19 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (20 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (22 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (23 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (24 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (25 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (26 : int))) = (103 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (27 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (28 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (29 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (30 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (31 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (32 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (33 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (34 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (35 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (36 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (37 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (38 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (39 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (40 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (41 : int))) = (112 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (42 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (43 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (44 : int))) = (121 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (45 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (46 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (47 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (48 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_306 __void_param) (49 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:89, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_307
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_307 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_307__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_307 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (6 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (9 : int))) = (76 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (11 : int))) = (118 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (12 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (13 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (14 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (15 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (17 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (19 : int))) = (67 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (20 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (21 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (22 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (23 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (24 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (25 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (26 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (27 : int))) = (33 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_307 __void_param) (28 : int))) = (32 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:91, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_308
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_308 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_308__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_308 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (6 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (9 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (11 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (12 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (13 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (14 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (16 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_308 __void_param) (17 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:93, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_309
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_309 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_309__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_309 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at power_grid_energy_stabilizer.adb:94, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_310
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_310 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_310__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_310 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (5 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (7 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (8 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (9 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (10 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (11 : int))) = (121 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (13 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (15 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (17 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (18 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (19 : int))) = (105 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (21 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (23 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (24 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (26 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (27 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (28 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (29 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (30 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (31 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (32 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (33 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (34 : int))) = (61 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_310 __void_param) (35 : int))) = (32 : int)) ) ) ) ) ) ))

end
(* Module for defining the value of constant "maximum_reserved_electricity_possible" defined at global_variables.ads:11, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Global_variables__maximum_reserved_electricity_possible___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__maximum_reserved_electricity_possible as Global_variables__maximum_reserved_electricity_possible

 axiom maximum_reserved_electricity_possible__def_axiom :
  ((Global_variables__maximum_reserved_electricity_possible.maximum_reserved_electricity_possible ) = (1000000 : int))

end

(* Module for defining the value of constant "critical_reserve_level" defined at global_variables.ads:12, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Global_variables__critical_reserve_level___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__critical_reserve_level as Global_variables__critical_reserve_level

 axiom critical_reserve_level__def_axiom :
  ((Global_variables__critical_reserve_level.critical_reserve_level ) = (5000 : int))

end

(* Module for defining the value of constant "maximum_electricity_possible" defined at global_variables.ads:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Global_variables__maximum_electricity_possible___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Global_variables__maximum_electricity_possible as Global_variables__maximum_electricity_possible

 axiom maximum_electricity_possible__def_axiom :
  ((Global_variables__maximum_electricity_possible.maximum_electricity_possible ) = (10000000 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at spark-text_io.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__is_open___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open

 val is_open 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard result file) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "mode__2" defined at spark-text_io.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__mode__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__file_mode as Spark__text_io__file_mode
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom

 val mode__2 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  ( [@GP_Pretty_Ada:24814] ((epsilon temp___result_196 : bool.
   ( (temp___result_196 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_196 file) )) = True) ) }
  ensures {  ( ( (result = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard result file) )/\(Spark__text_io__file_mode___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mode__2__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__mode__2.mode__2 file)].
   (let result = (Spark__text_io__mode__2.mode__2 file) in (
    (Spark__text_io__file_mode.dynamic_property Spark__text_io__file_mode.first Spark__text_io__file_mode.last result)))
  )

end

(* Module giving a program function and a defining axiom for the expression function "is_readable" defined at spark-text_io.ads:180, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_readable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_readable as Spark__text_io__is_readable

 val is_readable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_readable.is_readable file)) /\ (Spark__text_io__is_readable.is_readable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_197 : bool.
   ( (temp___result_197 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_197 file) )) = True) /\ ((epsilon temp___result_198 : int.
   ( (temp___result_198 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_198 file) )) = (0 : int)) ) ) ) }
 
 axiom is_readable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_readable.is_readable file)].
   ( (let result = (Spark__text_io__is_readable.is_readable file) in (
    (Spark__text_io__is_readable.is_readable__function_guard result file)))
    -> ( ((Spark__text_io__is_readable.is_readable file) = True) <-> ( ((epsilon temp___result_199 : bool.
    ( (temp___result_199 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_199 file) )) = True) /\ ((epsilon temp___result_200 : int.
    ( (temp___result_200 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_200 file) )) = (0 : int)) ) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "is_writable" defined at spark-text_io.ads:184, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spark__text_io__is_writable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__is_open as Spark__text_io__is_open
 use        Spark__text_io__mode__2 as Spark__text_io__mode__2
 use        Spark__text_io__is_writable as Spark__text_io__is_writable

 val is_writable 
   (file : Spark__text_io__file_type.file_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__is_writable.is_writable file)) /\ (Spark__text_io__is_writable.is_writable__function_guard result file) )/\( (result = True) <-> ( ((epsilon temp___result_201 : bool.
   ( (temp___result_201 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_201 file) )) = True) /\ ( ((epsilon temp___result_202 : int.
   ( (temp___result_202 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_202 file) )) = (1 : int)) \/ ((epsilon temp___result_203 : int.
   ( (temp___result_203 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_203 file) )) = (2 : int)) ) ) ) ) }
 
 axiom is_writable__def_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__is_writable.is_writable file)].
   ( (let result = (Spark__text_io__is_writable.is_writable file) in (
    (Spark__text_io__is_writable.is_writable__function_guard result file)))
    -> ( ((Spark__text_io__is_writable.is_writable file) = True) <-> ( ((epsilon temp___result_204 : bool.
    ( (temp___result_204 = (Spark__text_io__is_open.is_open file)) /\ (Spark__text_io__is_open.is_open__function_guard temp___result_204 file) )) = True) /\ ( ((epsilon temp___result_205 : int.
    ( (temp___result_205 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_205 file) )) = (1 : int)) \/ ((epsilon temp___result_206 : int.
    ( (temp___result_206 = (Spark__text_io__mode__2.mode__2 file)) /\ (Spark__text_io__mode__2.mode__2__function_guard temp___result_206 file) )) = (2 : int)) ) ) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "status" defined at spark-text_io.ads:133, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Spark__text_io__status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_status as Spark__text_io__file_status
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom

 val status 
   (file : Spark__text_io__file_type.file_type) : int
  requires {  true }
  ensures {  ( ( (result = (Spark__text_io__status.status file)) /\ (Spark__text_io__status.status__function_guard result file) )/\(Spark__text_io__file_status___axiom.dynamic_invariant result True False True True) ) }
 
 axiom status__post_axiom :
  (forall file   : Spark__text_io__file_type.file_type [(Spark__text_io__status.status file)].
   (let result = (Spark__text_io__status.status file) in (
    (Spark__text_io__file_status.dynamic_property Spark__text_io__file_status.first Spark__text_io__file_status.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "is_safe" defined at power_grid_energy_stabilizer.ads:28, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__is_safe___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__is_safe as Power_grid_energy_stabilizer__is_safe

 val is_safe 
   (status : Global_variables__status_system_type.status_system_type) : bool
  requires {  true }
  ensures {  ( ( (result = (Power_grid_energy_stabilizer__is_safe.is_safe status)) /\ (Power_grid_energy_stabilizer__is_safe.is_safe__function_guard result status) )/\true ) }
 
 axiom is_safe__post_axiom :
  (forall status   : Global_variables__status_system_type.status_system_type [(Power_grid_energy_stabilizer__is_safe.is_safe status)].
   ( (Global_variables__status_system_type___axiom.dynamic_invariant status True True True True) -> (let result = (Power_grid_energy_stabilizer__is_safe.is_safe status) in (
    (if ((Power_grid_energy_stabilizer__is_safe.is_safe__function_guard result status)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at power_grid_energy_stabilizer.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__is_safe as Power_grid_energy_stabilizer__is_safe
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val init 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:29498] ((epsilon temp___result_260 : bool.
   ( (temp___result_260 = (Power_grid_energy_stabilizer__is_safe.is_safe { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content })) /\ (Power_grid_energy_stabilizer__is_safe.is_safe__function_guard temp___result_260 { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }) )) = True) ) /\ ( ( (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) /\ (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) ) }
  writes {Spark__text_io__standard_output.standard_output, Power_grid_energy_stabilizer__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "status_electricity_system_to_string" defined at power_grid_energy_stabilizer.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Power_grid_energy_stabilizer__status_electricity_system_to_string as Power_grid_energy_stabilizer__status_electricity_system_to_string
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom

 val status_electricity_system_to_string 
   (status_reserved_electricity : int) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string status_reserved_electricity)) /\ (Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string__function_guard result status_reserved_electricity) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom status_electricity_system_to_string__post_axiom :
  (forall status_reserved_electricity   : int [(Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string status_reserved_electricity)].
   ( (Global_variables__status_reserved_electricity_type___axiom.dynamic_invariant status_reserved_electricity True True True True) -> (let result = (Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string status_reserved_electricity) in (
    (if ((Power_grid_energy_stabilizer__status_electricity_system_to_string.status_electricity_system_to_string__function_guard result status_reserved_electricity)) then (
     ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "read_consumption" defined at power_grid_energy_stabilizer.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__read_consumption___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val read_consumption 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) /\ (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output, Power_grid_energy_stabilizer__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_output.standard_output, Power_grid_energy_stabilizer__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "read_supply" defined at power_grid_energy_stabilizer.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__read_supply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val read_supply 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) /\ (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output, Power_grid_energy_stabilizer__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_output.standard_output, Power_grid_energy_stabilizer__status_system.status_system__split_fields, Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "energy_stabilizerg_system" defined at power_grid_energy_stabilizer.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__is_safe as Power_grid_energy_stabilizer__is_safe

 val energy_stabilizerg_system 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:29598] ((epsilon temp___result_263 : bool.
   ( (temp___result_263 = (Power_grid_energy_stabilizer__is_safe.is_safe { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content })) /\ (Power_grid_energy_stabilizer__is_safe.is_safe__function_guard temp___result_263 { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }) )) = True) ) /\ (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) ) }
  reads {Power_grid_energy_stabilizer__status_system.status_system__split_fields}
  writes {Power_grid_energy_stabilizer__status_system.status_system__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "print_status" defined at power_grid_energy_stabilizer.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__print_status___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val print_status 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output, Power_grid_energy_stabilizer__status_system.status_system__split_fields}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "refill_reserve" defined at power_grid_energy_stabilizer.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Power_grid_energy_stabilizer__refill_reserve___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 val refill_reserve 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True True True True) }
  reads {Power_grid_energy_stabilizer__status_system.status_system__split_fields}
  writes {Power_grid_energy_stabilizer__status_system.status_system__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "as_init_standard_input" defined at as_io_wrapper.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_init_standard_input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__is_readable as Spark__text_io__is_readable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_init_standard_input 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:18533] ((epsilon temp___result_264 : bool.
   ( (temp___result_264 = (Spark__text_io__is_readable.is_readable Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_readable.is_readable__function_guard temp___result_264 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:18539] ((epsilon temp___result_265 : int.
   ( (temp___result_265 = (Spark__text_io__status.status Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_265 Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_input.standard_input}

end

(* Module for declaring a program function (and possibly an axiom) for "as_init_standard_output" defined at as_io_wrapper.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_init_standard_output___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__is_writable as Spark__text_io__is_writable
 use        Spark__text_io__status as Spark__text_io__status
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_init_standard_output 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:18567] ((epsilon temp___result_266 : bool.
   ( (temp___result_266 = (Spark__text_io__is_writable.is_writable Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__is_writable.is_writable__function_guard temp___result_266 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = True) ) /\ ( [@GP_Pretty_Ada:18573] ((epsilon temp___result_267 : int.
   ( (temp___result_267 = (Spark__text_io__status.status Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)) /\ (Spark__text_io__status.status__function_guard temp___result_267 Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content) )) = (1 : int)) ) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) }
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put__2" defined at as_io_wrapper.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put_line" defined at as_io_wrapper.ads:83, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put_line 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for declaring a program function (and possibly an axiom) for "as_get__3" defined at as_io_wrapper.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_get__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_get__3 
   (item : int__ref) (prompt_try_again_when_not_integer : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( (Standard__integer___axiom.dynamic_invariant item.int__content True True True True) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) ) }
  reads {Spark__text_io__standard_output.standard_output, Spark__text_io__standard_input.standard_input}
  writes {Spark__text_io__standard_output.standard_output, Spark__text_io__standard_input.standard_input, item}

end

(* Module for declaring a program function (and possibly an axiom) for "as_put__3" defined at as_io_wrapper.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module As_io_wrapper__as_put__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom

 val as_put__3 
   (item : int) : unit
  requires {  true }
  ensures {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) }
  reads {Spark__text_io__standard_output.standard_output}
  writes {Spark__text_io__standard_output.standard_output}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "power_grid_energy_stabilizer" defined at power_grid_energy_stabilizer.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Power_grid_energy_stabilizer__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 let def [#"power_grid_energy_stabilizer.ads" 13 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:13] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 13 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"power_grid_energy_stabilizer.ads" 21 0 0] ( [#"power_grid_energy_stabilizer.ads" 21 0 0] begin ensures {true} let _ = (let _ = (let temp___271 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.ads" 21 0 0] (val _f : Global_variables__status_system_type.status_system_type
  ensures {[#"power_grid_energy_stabilizer.ads" 21 0 0] true} 
  in _f) in (
   ( () )))
   in (
   ()))
   in () end ;
  [#"power_grid_energy_stabilizer.ads" 21 0 0] assume { [#"power_grid_energy_stabilizer.ads" 21 0 0] (Global_variables__status_system_type___axiom.default_initial_assumption { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } False) };
  [#"power_grid_energy_stabilizer.ads" 21 0 0] assume { [#"power_grid_energy_stabilizer.ads" 21 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } False False True True) } ));
  ([#"power_grid_energy_stabilizer.ads" 23 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 26 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 25 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 24 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 28 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 30 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 32 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 34 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 33 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 38 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 40 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 39 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 44 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 47 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 46 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 45 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 50 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 53 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 51 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 55 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 57 0 0] ());
  ([#"power_grid_energy_stabilizer.ads" 56 0 0] ());
  ();
  ([#"power_grid_energy_stabilizer.adb" 8 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 19 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 30 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 44 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 58 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 66 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 75 0 0] ());
  ([#"power_grid_energy_stabilizer.adb" 98 0 0] ());
  ();
  ( [@GP_Sloc:power_grid_energy_stabilizer.adb:111:1] ([#"power_grid_energy_stabilizer.adb" 111 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_safe" defined at power_grid_energy_stabilizer.ads:28, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__is_safe__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__is_safe__status as Power_grid_energy_stabilizer__is_safe__status
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Power_grid_energy_stabilizer__is_safe__status___axiom as Power_grid_energy_stabilizer__is_safe__status___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 val power_grid_energy_stabilizer__is_safe__result [@model_trace:2833@result] [@model_projected] [@name:Is_Safe]  : bool__ref 
 
 let def [#"power_grid_energy_stabilizer.ads" 28 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:28] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 28 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:28 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 28 0 0] assume { [#"power_grid_energy_stabilizer.ads" 28 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant Power_grid_energy_stabilizer__is_safe__status.status True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:28 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:28 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 28 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:28 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 28 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:23:10] ([#"power_grid_energy_stabilizer.adb" 23 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 23 0 0] [#"power_grid_energy_stabilizer.adb" 23 0 0] (([@branch_id=2368] Main.spark__branch).bool__content <- ( (Boolean.andb(((Global_variables__electricity_range__rep.to_rep(Power_grid_energy_stabilizer__is_safe__status.status.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)) >= (Global_variables__electricity_range__rep.to_rep(Power_grid_energy_stabilizer__is_safe__status.status.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)))) (((Global_variables__reserve_electricity_range__rep.to_rep(Power_grid_energy_stabilizer__is_safe__status.status.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) > (5000 : int)))) )));
   ( [@branch_id=2368] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:25:17] ([#"power_grid_energy_stabilizer.adb" 25 0 0] ( [#"power_grid_energy_stabilizer.adb" 25 0 0] (power_grid_energy_stabilizer__is_safe__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"power_grid_energy_stabilizer.adb" 25 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:26:17] ([#"power_grid_energy_stabilizer.adb" 26 0 0] ( [#"power_grid_energy_stabilizer.adb" 26 0 0] (power_grid_energy_stabilizer__is_safe__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"power_grid_energy_stabilizer.adb" 26 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  power_grid_energy_stabilizer__is_safe__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at power_grid_energy_stabilizer.ads:23, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__init__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__is_safe as Power_grid_energy_stabilizer__is_safe
 use        Power_grid_energy_stabilizer__is_safe___axiom as Power_grid_energy_stabilizer__is_safe___axiom
 use        As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
 use        As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep
 use        Temp___String_Literal_273 as Temp___String_Literal_273
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Power_grid_energy_stabilizer__is_safe___axiom as Power_grid_energy_stabilizer__is_safe___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__file_status___axiom as Spark__text_io__file_status___axiom
 use        Spark__text_io__file_mode___axiom as Spark__text_io__file_mode___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Spark__text_io__status___axiom as Spark__text_io__status___axiom
 use        Spark__text_io__is_open___axiom as Spark__text_io__is_open___axiom
 use        Spark__text_io__mode__2___axiom as Spark__text_io__mode__2___axiom
 use        Spark__text_io__is_readable___axiom as Spark__text_io__is_readable___axiom
 use        Spark__text_io__is_writable___axiom as Spark__text_io__is_writable___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_init_standard_input___axiom as As_io_wrapper__as_init_standard_input___axiom
 use        As_io_wrapper__as_init_standard_output___axiom as As_io_wrapper__as_init_standard_output___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom

 let def [#"power_grid_energy_stabilizer.ads" 23 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:23] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 23 0 0] true }
  ensures { [#"power_grid_energy_stabilizer.ads" 23 0 0] ([#"power_grid_energy_stabilizer.ads" 26 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:power_grid_energy_stabilizer.ads:26:17] [@comment:     Post    => Is_Safe(Status_System);                 ^ power_grid_energy_stabilizer.ads:26:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__call_is_safe] [@GP_Id:0] ( [@GP_Sloc:power_grid_energy_stabilizer.ads:26:17] [@GP_Pretty_Ada:29498] ((epsilon temp___result_275 : bool.
   ( (temp___result_275 = (Power_grid_energy_stabilizer__is_safe.is_safe { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content })) /\ (Power_grid_energy_stabilizer__is_safe.is_safe__function_guard temp___result_275 { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }) )) = True) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:23 *)
  ;
   assume {  (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } False False True True) };
   assume {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content False False True True) };
   assume {  (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:23 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:23 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:23 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:10:7] ([#"power_grid_energy_stabilizer.adb" 10 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:10:7] ([#"power_grid_energy_stabilizer.adb" 10 0 0] ( (As_io_wrapper__as_init_standard_input___axiom.as_init_standard_input(())) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:11:7] ([#"power_grid_energy_stabilizer.adb" 11 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:11:7] ([#"power_grid_energy_stabilizer.adb" 11 0 0] ( (As_io_wrapper__as_init_standard_output___axiom.as_init_standard_output(())) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:12:7] ([#"power_grid_energy_stabilizer.adb" 12 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:12:7] ([#"power_grid_energy_stabilizer.adb" 12 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_273.temp___String_Literal_273(()))) ((1 : int)) ((23 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:13:7] ([#"power_grid_energy_stabilizer.adb" 13 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:13:21] ([#"power_grid_energy_stabilizer.adb" 13 0 0] (let temp___274 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = { Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured = ( 0 : Global_variables__electricity_range.electricity_range ); Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured = ( 0 : Global_variables__electricity_range.electricity_range ); Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = ( 1000000 : Global_variables__reserve_electricity_range.reserve_electricity_range ); Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity = (Global_variables__status_reserved_electricity_type__rep.of_rep((1 : int))) } } in (
    [#"power_grid_energy_stabilizer.adb" 13 0 0] (Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___274.Global_variables__status_system_type.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Power_grid_energy_stabilizer__is_safe___axiom.is_safe({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content })) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "status_electricity_system_to_string" defined at power_grid_energy_stabilizer.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__status_electricity_system_to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity as Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Temp___String_Literal_276 as Temp___String_Literal_276
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_277 as Temp___String_Literal_277
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity___axiom as Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom

 val power_grid_energy_stabilizer__status_electricity_system_to_string__result [@model_trace:2852@result] [@model_projected] [@name:Status_Electricity_System_To_String]  : Standard__string.string__ref 
 
 let def [#"power_grid_energy_stabilizer.ads" 30 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:30] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:30 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 30 0 0] assume { [#"power_grid_energy_stabilizer.ads" 30 0 0] (Global_variables__status_reserved_electricity_type___axiom.dynamic_invariant Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity.status_reserved_electricity True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:30 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:30 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 30 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:30 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:60:10] ([#"power_grid_energy_stabilizer.adb" 60 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 61 0 0] [#"power_grid_energy_stabilizer.adb" 61 0 0] (([@branch_id=2531] Main.spark__branch).bool__content <- ( ((Boolean.to_int((Power_grid_energy_stabilizer__status_electricity_system_to_string__status_reserved_electricity.status_reserved_electricity = (0 : int)))) = (1 : int)) )));
   ( [@branch_id=2531] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:61:26] ([#"power_grid_energy_stabilizer.adb" 61 0 0] ( [#"power_grid_energy_stabilizer.adb" 61 0 0] (power_grid_energy_stabilizer__status_electricity_system_to_string__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_276.temp___String_Literal_276(()))) ((1 : int)) ((9 : int))) ));
    [#"power_grid_energy_stabilizer.adb" 61 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:62:27] ([#"power_grid_energy_stabilizer.adb" 62 0 0] ( [#"power_grid_energy_stabilizer.adb" 62 0 0] (power_grid_energy_stabilizer__status_electricity_system_to_string__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_277.temp___String_Literal_277(()))) ((1 : int)) ((13 : int))) ));
    [#"power_grid_energy_stabilizer.adb" 62 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  power_grid_energy_stabilizer__status_electricity_system_to_string__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "read_consumption" defined at power_grid_energy_stabilizer.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__read_consumption__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        Power_grid_energy_stabilizer__read_consumption__electricity as Power_grid_energy_stabilizer__read_consumption__electricity
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Power_grid_energy_stabilizer__read_consumption__L_1 as Power_grid_energy_stabilizer__read_consumption__L_1
 use        Temp___String_Literal_279 as Temp___String_Literal_279
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_280 as Temp___String_Literal_280
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_281 as Temp___String_Literal_281
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_282 as Temp___String_Literal_282
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__read_consumption__electricity___axiom as Power_grid_energy_stabilizer__read_consumption__electricity___axiom
 use        Power_grid_energy_stabilizer__read_consumption__L_1___axiom as Power_grid_energy_stabilizer__read_consumption__L_1___axiom
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 32 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:32] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 32 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 32 0 0] assume { [#"power_grid_energy_stabilizer.ads" 32 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  [#"power_grid_energy_stabilizer.ads" 32 0 0] assume { [#"power_grid_energy_stabilizer.ads" 32 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 32 0 0] assume { [#"power_grid_energy_stabilizer.ads" 32 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 32 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:32 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 32 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 31 0 0] ( [#"power_grid_energy_stabilizer.adb" 31 0 0] assume { [#"power_grid_energy_stabilizer.adb" 31 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 31 0 0] assume { [#"power_grid_energy_stabilizer.adb" 31 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content False False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 34 0 0] ());
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:33:7] ([#"power_grid_energy_stabilizer.adb" 33 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:33:7] ([#"power_grid_energy_stabilizer.adb" 33 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_279.temp___String_Literal_279(()))) ((1 : int)) ((64 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:34:7] ([#"power_grid_energy_stabilizer.adb" 34 0 0] ( () (* Translation of an Ada loop from power_grid_energy_stabilizer.adb:34 *)
   ;
   (if (True) then (
    [#"power_grid_energy_stabilizer.adb" 34 0 0] try
     ( [#"power_grid_energy_stabilizer.adb" 34 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
      ()))
      in () end ;
     (let temp___285 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 34 0 0] (val _f : Spark__text_io__file_type.file_type
     ensures {[#"power_grid_energy_stabilizer.adb" 34 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
     in _f) in (
      ( [#"power_grid_energy_stabilizer.adb" 34 0 0] begin ensures {true} let _ = (let _ = Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content in (
       ()))
       in () end ;
      (let temp___284 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 34 0 0] (val _f : int
      ensures {[#"power_grid_energy_stabilizer.adb" 34 0 0] (result = Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content)} 
      in _f) in (
       ( [#"power_grid_energy_stabilizer.adb" 34 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
        ()))
        in () end ;
       (let temp___283 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 34 0 0] (val _f : Spark__text_io__file_type.file_type
       ensures {[#"power_grid_energy_stabilizer.adb" 34 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:34 *)
        ;
        () (* While loop translating the Ada loop from power_grid_energy_stabilizer.adb:34 *)
        ;
        [#"power_grid_energy_stabilizer.adb" 34 0 0] while True do
         ( () (* Assume implicit invariants from the loop power_grid_energy_stabilizer.adb:34 *)
         ;
         [#"power_grid_energy_stabilizer.adb" 34 0 0] assume { [#"power_grid_energy_stabilizer.adb" 34 0 0] ( ( ( ( ( ( true /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) )/\true ) };
         () (* Check for absence of RTE in the invariant of loop power_grid_energy_stabilizer.adb:34 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop power_grid_energy_stabilizer.adb:34 *)
         ;
         ();
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:35:17] ([#"power_grid_energy_stabilizer.adb" 35 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:35:10] ([#"power_grid_energy_stabilizer.adb" 35 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:35:10] ([#"power_grid_energy_stabilizer.adb" 35 0 0] ( (As_io_wrapper__as_get__3___axiom.as_get__3(Power_grid_energy_stabilizer__read_consumption__electricity.electricity) ((Standard__string.of_array((Temp___String_Literal_280.temp___String_Literal_280(()))) ((1 : int)) ((25 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:36:21] ([#"power_grid_energy_stabilizer.adb" 36 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:36:43] ([#"power_grid_energy_stabilizer.adb" 36 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:36:10] ([#"power_grid_energy_stabilizer.adb" 36 0 0] (if ((Boolean.andb((Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content >= (0 : int))) ((Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content <= (1000000 : int))))) then (
          [#"power_grid_energy_stabilizer.adb" 36 0 0] raise Power_grid_energy_stabilizer__read_consumption__L_1.L_1))) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:37:10] ([#"power_grid_energy_stabilizer.adb" 37 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:37:10] ([#"power_grid_energy_stabilizer.adb" 37 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_281.temp___String_Literal_281(()))) ((1 : int)) ((37 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:38:10] ([#"power_grid_energy_stabilizer.adb" 38 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:38:10] ([#"power_grid_energy_stabilizer.adb" 38 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((10000000 : int))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:39:10] ([#"power_grid_energy_stabilizer.adb" 39 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:39:10] ([#"power_grid_energy_stabilizer.adb" 39 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_282.temp___String_Literal_282(()))) ((1 : int)) ((0 : int))))) )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:34 *)
         ;
         (if (False) then (
           raise Power_grid_energy_stabilizer__read_consumption__L_1.L_1)) )
        done )))
        )))
       )))
      )
    with
     Power_grid_energy_stabilizer__read_consumption__L_1.L_1 -> ()
    end)) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:41:7] ([#"power_grid_energy_stabilizer.adb" 41 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:41:63] ([#"power_grid_energy_stabilizer.adb" 41 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:41:42] ([#"power_grid_energy_stabilizer.adb" 41 0 0] (let temp___287 [@mlw:proxy_symbol] [@introduced] = (let temp___286 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
    ( [#"power_grid_energy_stabilizer.adb" 41 0 0] begin ensures {true} let _ = (let _ = temp___286.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured in (
     ()))
     in () end ;
    { ( temp___286 ) with Global_variables__status_system_type.__split_fields = { ( temp___286.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured = (Global_variables__electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 41 0 0] ( [@GP_Shape:status_system_assign__typeconv] [@GP_Sloc:power_grid_energy_stabilizer.adb:41:63] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] [@comment:      Status_System.Consumption_Measured := Electricity_Range(Electricity);                                                               ^ power_grid_energy_stabilizer.adb:41:63:VC_RANGE_CHECK] (Global_variables__electricity_range.range_check_(Power_grid_energy_stabilizer__read_consumption__electricity.electricity.int__content)) )))) } } )))
    in (
     (Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___287.Global_variables__status_system_type.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "read_supply" defined at power_grid_energy_stabilizer.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__read_supply__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_input as Spark__text_io__standard_input
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Power_grid_energy_stabilizer__read_supply__electricity as Power_grid_energy_stabilizer__read_supply__electricity
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Power_grid_energy_stabilizer__read_supply__L_2 as Power_grid_energy_stabilizer__read_supply__L_2
 use        Temp___String_Literal_288 as Temp___String_Literal_288
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_289 as Temp___String_Literal_289
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_290 as Temp___String_Literal_290
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_291 as Temp___String_Literal_291
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__read_supply__electricity___axiom as Power_grid_energy_stabilizer__read_supply__electricity___axiom
 use        Power_grid_energy_stabilizer__read_supply__L_2___axiom as Power_grid_energy_stabilizer__read_supply__L_2___axiom
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_input___axiom as Spark__text_io__standard_input___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_get__3___axiom as As_io_wrapper__as_get__3___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 38 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:38] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 38 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:38 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 38 0 0] assume { [#"power_grid_energy_stabilizer.ads" 38 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  [#"power_grid_energy_stabilizer.ads" 38 0 0] assume { [#"power_grid_energy_stabilizer.ads" 38 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True False True True) };
  [#"power_grid_energy_stabilizer.ads" 38 0 0] assume { [#"power_grid_energy_stabilizer.ads" 38 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:38 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:38 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 38 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:38 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 38 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 45 0 0] ( [#"power_grid_energy_stabilizer.adb" 45 0 0] assume { [#"power_grid_energy_stabilizer.adb" 45 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 45 0 0] assume { [#"power_grid_energy_stabilizer.adb" 45 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content False False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 48 0 0] ());
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:47:7] ([#"power_grid_energy_stabilizer.adb" 47 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:47:7] ([#"power_grid_energy_stabilizer.adb" 47 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_288.temp___String_Literal_288(()))) ((1 : int)) ((62 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:48:7] ([#"power_grid_energy_stabilizer.adb" 48 0 0] ( () (* Translation of an Ada loop from power_grid_energy_stabilizer.adb:48 *)
   ;
   (if (True) then (
    [#"power_grid_energy_stabilizer.adb" 48 0 0] try
     ( [#"power_grid_energy_stabilizer.adb" 48 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content in (
      ()))
      in () end ;
     (let temp___294 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 48 0 0] (val _f : Spark__text_io__file_type.file_type
     ensures {[#"power_grid_energy_stabilizer.adb" 48 0 0] (result = Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content)} 
     in _f) in (
      ( [#"power_grid_energy_stabilizer.adb" 48 0 0] begin ensures {true} let _ = (let _ = Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content in (
       ()))
       in () end ;
      (let temp___293 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 48 0 0] (val _f : int
      ensures {[#"power_grid_energy_stabilizer.adb" 48 0 0] (result = Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content)} 
      in _f) in (
       ( [#"power_grid_energy_stabilizer.adb" 48 0 0] begin ensures {true} let _ = (let _ = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content in (
        ()))
        in () end ;
       (let temp___292 [@mlw:proxy_symbol] [@introduced] = [#"power_grid_energy_stabilizer.adb" 48 0 0] (val _f : Spark__text_io__file_type.file_type
       ensures {[#"power_grid_energy_stabilizer.adb" 48 0 0] (result = Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:48 *)
        ;
        () (* While loop translating the Ada loop from power_grid_energy_stabilizer.adb:48 *)
        ;
        [#"power_grid_energy_stabilizer.adb" 48 0 0] while True do
         ( () (* Assume implicit invariants from the loop power_grid_energy_stabilizer.adb:48 *)
         ;
         [#"power_grid_energy_stabilizer.adb" 48 0 0] assume { [#"power_grid_energy_stabilizer.adb" 48 0 0] ( ( ( ( ( ( true /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True True True True) )/\true ) /\ (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content False True True True) )/\true ) /\ (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_input.standard_input.Spark__text_io__file_type.file_type__content True True True True) )/\true ) };
         () (* Check for absence of RTE in the invariant of loop power_grid_energy_stabilizer.adb:48 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop power_grid_energy_stabilizer.adb:48 *)
         ;
         ();
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:49:17] ([#"power_grid_energy_stabilizer.adb" 49 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:49:10] ([#"power_grid_energy_stabilizer.adb" 49 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:49:10] ([#"power_grid_energy_stabilizer.adb" 49 0 0] ( (As_io_wrapper__as_get__3___axiom.as_get__3(Power_grid_energy_stabilizer__read_supply__electricity.electricity) ((Standard__string.of_array((Temp___String_Literal_289.temp___String_Literal_289(()))) ((1 : int)) ((27 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:50:21] ([#"power_grid_energy_stabilizer.adb" 50 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:50:43] ([#"power_grid_energy_stabilizer.adb" 50 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:50:10] ([#"power_grid_energy_stabilizer.adb" 50 0 0] (if ((Boolean.andb((Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content >= (0 : int))) ((Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content <= (1000000 : int))))) then (
          [#"power_grid_energy_stabilizer.adb" 50 0 0] raise Power_grid_energy_stabilizer__read_supply__L_2.L_2))) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:51:10] ([#"power_grid_energy_stabilizer.adb" 51 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:51:10] ([#"power_grid_energy_stabilizer.adb" 51 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_290.temp___String_Literal_290(()))) ((1 : int)) ((37 : int))))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:52:10] ([#"power_grid_energy_stabilizer.adb" 52 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:52:10] ([#"power_grid_energy_stabilizer.adb" 52 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((10000000 : int))) )) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:53:10] ([#"power_grid_energy_stabilizer.adb" 53 0 0] ()) );
         ( [@GP_Sloc:power_grid_energy_stabilizer.adb:53:10] ([#"power_grid_energy_stabilizer.adb" 53 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_291.temp___String_Literal_291(()))) ((1 : int)) ((0 : int))))) )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop power_grid_energy_stabilizer.adb:48 *)
         ;
         (if (False) then (
           raise Power_grid_energy_stabilizer__read_supply__L_2.L_2)) )
        done )))
        )))
       )))
      )
    with
     Power_grid_energy_stabilizer__read_supply__L_2.L_2 -> ()
    end)) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:55:7] ([#"power_grid_energy_stabilizer.adb" 55 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:55:60] ([#"power_grid_energy_stabilizer.adb" 55 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:55:39] ([#"power_grid_energy_stabilizer.adb" 55 0 0] (let temp___296 [@mlw:proxy_symbol] [@introduced] = (let temp___295 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
    ( [#"power_grid_energy_stabilizer.adb" 55 0 0] begin ensures {true} let _ = (let _ = temp___295.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured in (
     ()))
     in () end ;
    { ( temp___295 ) with Global_variables__status_system_type.__split_fields = { ( temp___295.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured = (Global_variables__electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 55 0 0] ( [@GP_Shape:status_system_assign__typeconv] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:2] [@GP_Sloc:power_grid_energy_stabilizer.adb:55:60] [@comment:      Status_System.Supplied_Measured := Electricity_Range(Electricity);                                                            ^ power_grid_energy_stabilizer.adb:55:60:VC_RANGE_CHECK] (Global_variables__electricity_range.range_check_(Power_grid_energy_stabilizer__read_supply__electricity.electricity.int__content)) )))) } } )))
    in (
     (Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___296.Global_variables__status_system_type.__split_fields ))))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "energy_stabilizerg_system" defined at power_grid_energy_stabilizer.ads:44, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__energy_stabilizerg_system__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__is_safe as Power_grid_energy_stabilizer__is_safe
 use        Power_grid_energy_stabilizer__is_safe___axiom as Power_grid_energy_stabilizer__is_safe___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Global_variables__status_reserved_electricity_type as Global_variables__status_reserved_electricity_type
 use        Global_variables__status_reserved_electricity_type__rep as Global_variables__status_reserved_electricity_type__rep
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Power_grid_energy_stabilizer__is_safe___axiom as Power_grid_energy_stabilizer__is_safe___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 let def [#"power_grid_energy_stabilizer.ads" 44 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:44] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 44 0 0] true }
  ensures { [#"power_grid_energy_stabilizer.ads" 44 0 0] ([#"power_grid_energy_stabilizer.ads" 47 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post    => Is_Safe(Status_System);                 ^ power_grid_energy_stabilizer.ads:47:17:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__call_is_safe] [@GP_Id:3] [@GP_Sloc:power_grid_energy_stabilizer.ads:47:17] ( [@GP_Pretty_Ada:29598] [@GP_Sloc:power_grid_energy_stabilizer.ads:47:17] ((epsilon temp___result_301 : bool.
   ( (temp___result_301 = (Power_grid_energy_stabilizer__is_safe.is_safe { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content })) /\ (Power_grid_energy_stabilizer__is_safe.is_safe__function_guard temp___result_301 { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }) )) = True) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
   assume {  (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:44 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:68:18] ([#"power_grid_energy_stabilizer.adb" 68 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:68:64] ([#"power_grid_energy_stabilizer.adb" 68 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:69:13] ([#"power_grid_energy_stabilizer.adb" 69 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:68:7] ([#"power_grid_energy_stabilizer.adb" 68 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 68 0 0] [#"power_grid_energy_stabilizer.adb" 68 0 0] (([@branch_id=2550] Main.spark__branch).bool__content <- ( (Boolean.andb(((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)) > (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)))) (((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) > (0 : int)))) )));
   ( [@branch_id=2550] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:70:12] ([#"power_grid_energy_stabilizer.adb" 70 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:70:54] ([#"power_grid_energy_stabilizer.adb" 70 0 0] (let temp___298 [@mlw:proxy_symbol] [@introduced] = (let temp___297 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
     ( [#"power_grid_energy_stabilizer.adb" 70 0 0] begin ensures {true} let _ = (let _ = temp___297.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity in (
      ()))
      in () end ;
     { ( temp___297 ) with Global_variables__status_system_type.__split_fields = { ( temp___297.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity = (Global_variables__status_reserved_electricity_type__rep.of_rep((0 : int))) } } )))
     in (
     [#"power_grid_energy_stabilizer.adb" 70 0 0] (Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___298.Global_variables__status_system_type.__split_fields ))))
    ) ) )) else (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:71:12] ([#"power_grid_energy_stabilizer.adb" 71 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:71:54] ([#"power_grid_energy_stabilizer.adb" 71 0 0] (let temp___300 [@mlw:proxy_symbol] [@introduced] = (let temp___299 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
     ( [#"power_grid_energy_stabilizer.adb" 71 0 0] begin ensures {true} let _ = (let _ = temp___299.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity in (
      ()))
      in () end ;
     { ( temp___299 ) with Global_variables__status_system_type.__split_fields = { ( temp___299.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__status_reserved_electricity = (Global_variables__status_reserved_electricity_type__rep.of_rep((1 : int))) } } )))
     in (
     [#"power_grid_energy_stabilizer.adb" 71 0 0] (Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___300.Global_variables__status_system_type.__split_fields ))))
    ) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Power_grid_energy_stabilizer__is_safe___axiom.is_safe({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content })) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "print_status" defined at power_grid_energy_stabilizer.ads:50, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__print_status__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Spark__text_io__file_type as Spark__text_io__file_type
 use        Spark__text_io__standard_output as Spark__text_io__standard_output
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Temp___String_Literal_302 as Temp___String_Literal_302
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_303 as Temp___String_Literal_303
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_304 as Temp___String_Literal_304
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_305 as Temp___String_Literal_305
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_306 as Temp___String_Literal_306
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_307 as Temp___String_Literal_307
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_308 as Temp___String_Literal_308
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_309 as Temp___String_Literal_309
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_310 as Temp___String_Literal_310
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Spark__text_io__file_type___axiom as Spark__text_io__file_type___axiom
 use        Spark__text_io__standard_output___axiom as Spark__text_io__standard_output___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        As_io_wrapper__as_put__2___axiom as As_io_wrapper__as_put__2___axiom
 use        As_io_wrapper__as_put_line___axiom as As_io_wrapper__as_put_line___axiom
 use        As_io_wrapper__as_put__3___axiom as As_io_wrapper__as_put__3___axiom

 let def [#"power_grid_energy_stabilizer.ads" 50 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:50] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 50 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 50 0 0] assume { [#"power_grid_energy_stabilizer.ads" 50 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  [#"power_grid_energy_stabilizer.ads" 50 0 0] assume { [#"power_grid_energy_stabilizer.ads" 50 0 0] (Spark__text_io__file_type___axiom.dynamic_invariant Spark__text_io__standard_output.standard_output.Spark__text_io__file_type.file_type__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 50 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:50 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 50 0 0] try
   ( ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:78:7] ([#"power_grid_energy_stabilizer.adb" 78 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:78:7] ([#"power_grid_energy_stabilizer.adb" 78 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_302.temp___String_Literal_302(()))) ((1 : int)) ((23 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:79:7] ([#"power_grid_energy_stabilizer.adb" 79 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:79:7] ([#"power_grid_energy_stabilizer.adb" 79 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:80:7] ([#"power_grid_energy_stabilizer.adb" 80 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:80:7] ([#"power_grid_energy_stabilizer.adb" 80 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_303.temp___String_Literal_303(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:81:7] ([#"power_grid_energy_stabilizer.adb" 81 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:81:7] ([#"power_grid_energy_stabilizer.adb" 81 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_304.temp___String_Literal_304(()))) ((1 : int)) ((18 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:82:7] ([#"power_grid_energy_stabilizer.adb" 82 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:82:7] ([#"power_grid_energy_stabilizer.adb" 82 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:83:7] ([#"power_grid_energy_stabilizer.adb" 83 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:83:7] ([#"power_grid_energy_stabilizer.adb" 83 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_305.temp___String_Literal_305(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:85:11] ([#"power_grid_energy_stabilizer.adb" 85 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:85:49] ([#"power_grid_energy_stabilizer.adb" 85 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:85:83] ([#"power_grid_energy_stabilizer.adb" 85 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:85:7] ([#"power_grid_energy_stabilizer.adb" 85 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 85 0 0] [#"power_grid_energy_stabilizer.adb" 85 0 0] (([@branch_id=2612] Main.spark__branch).bool__content <- ( ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured)) > ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)) + (Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)))) )));
   ( [@branch_id=2612] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:86:15] ([#"power_grid_energy_stabilizer.adb" 86 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:86:15] ([#"power_grid_energy_stabilizer.adb" 86 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_306.temp___String_Literal_306(()))) ((1 : int)) ((49 : int))))) )) ) )) else (
    ()))) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:88:19] ([#"power_grid_energy_stabilizer.adb" 88 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:88:7] ([#"power_grid_energy_stabilizer.adb" 88 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 88 0 0] [#"power_grid_energy_stabilizer.adb" 88 0 0] (([@branch_id=2627] Main.spark__branch).bool__content <- ( ((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)) < (5000 : int)) )));
   ( [@branch_id=2627] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:89:15] ([#"power_grid_energy_stabilizer.adb" 89 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:89:15] ([#"power_grid_energy_stabilizer.adb" 89 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_307.temp___String_Literal_307(()))) ((1 : int)) ((28 : int))))) )) ) )) else (
    ()))) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:91:7] ([#"power_grid_energy_stabilizer.adb" 91 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:91:7] ([#"power_grid_energy_stabilizer.adb" 91 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_308.temp___String_Literal_308(()))) ((1 : int)) ((17 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:92:7] ([#"power_grid_energy_stabilizer.adb" 92 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:92:7] ([#"power_grid_energy_stabilizer.adb" 92 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:93:7] ([#"power_grid_energy_stabilizer.adb" 93 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:93:7] ([#"power_grid_energy_stabilizer.adb" 93 0 0] ( (As_io_wrapper__as_put_line___axiom.as_put_line((Standard__string.of_array((Temp___String_Literal_309.temp___String_Literal_309(()))) ((1 : int)) ((0 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:94:7] ([#"power_grid_energy_stabilizer.adb" 94 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:94:7] ([#"power_grid_energy_stabilizer.adb" 94 0 0] ( (As_io_wrapper__as_put__2___axiom.as_put__2((Standard__string.of_array((Temp___String_Literal_310.temp___String_Literal_310(()))) ((1 : int)) ((35 : int))))) )) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:95:7] ([#"power_grid_energy_stabilizer.adb" 95 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:95:7] ([#"power_grid_energy_stabilizer.adb" 95 0 0] ( (As_io_wrapper__as_put__3___axiom.as_put__3((Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured)))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "refill_reserve" defined at power_grid_energy_stabilizer.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Power_grid_energy_stabilizer__refill_reserve__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__status_system as Power_grid_energy_stabilizer__status_system
 use        Global_variables__status_system_type as Global_variables__status_system_type
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__remaining_supply as Power_grid_energy_stabilizer__refill_reserve__remaining_supply
 use        Power_grid_energy_stabilizer__refill_reserve__reserve_total as Power_grid_energy_stabilizer__refill_reserve__reserve_total
 use        Global_variables__electricity_range as Global_variables__electricity_range
 use        Global_variables__electricity_range__rep as Global_variables__electricity_range__rep
 use        Global_variables__reserve_electricity_range as Global_variables__reserve_electricity_range
 use        Global_variables__reserve_electricity_range__rep as Global_variables__reserve_electricity_range__rep
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__remaining_supply___axiom as Power_grid_energy_stabilizer__refill_reserve__remaining_supply___axiom
 use        Power_grid_energy_stabilizer__refill_reserve__reserve_total___axiom as Power_grid_energy_stabilizer__refill_reserve__reserve_total___axiom
 use        Power_grid_energy_stabilizer__status_system___axiom as Power_grid_energy_stabilizer__status_system___axiom
 use        Global_variables__electricity_range___axiom as Global_variables__electricity_range___axiom
 use        Global_variables__reserve_electricity_range___axiom as Global_variables__reserve_electricity_range___axiom
 use        Global_variables__status_reserved_electricity_type___axiom as Global_variables__status_reserved_electricity_type___axiom
 use        Global_variables__status_system_type___axiom as Global_variables__status_system_type___axiom

 let def [#"power_grid_energy_stabilizer.ads" 55 0 0][@GP_Subp:power_grid_energy_stabilizer.ads:55] 
   (__void_param : unit)
  requires { [#"power_grid_energy_stabilizer.ads" 55 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram power_grid_energy_stabilizer.ads:55 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 55 0 0] assume { [#"power_grid_energy_stabilizer.ads" 55 0 0] (Global_variables__status_system_type___axiom.dynamic_invariant { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram power_grid_energy_stabilizer.ads:55 *)
  ;
  () (* Check for RTE in the Pre of the subprogram power_grid_energy_stabilizer.ads:55 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 55 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram power_grid_energy_stabilizer.ads:55 *)
  ;
  [#"power_grid_energy_stabilizer.ads" 55 0 0] try
   ( ();
   ([#"power_grid_energy_stabilizer.adb" 99 0 0] ( [#"power_grid_energy_stabilizer.adb" 99 0 0] assume { [#"power_grid_energy_stabilizer.adb" 99 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 99 0 0] assume { [#"power_grid_energy_stabilizer.adb" 99 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content False False True True) } ));
   ([#"power_grid_energy_stabilizer.adb" 100 0 0] ( [#"power_grid_energy_stabilizer.adb" 100 0 0] assume { [#"power_grid_energy_stabilizer.adb" 100 0 0] (Standard__integer___axiom.default_initial_assumption Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content False) };
   [#"power_grid_energy_stabilizer.adb" 100 0 0] assume { [#"power_grid_energy_stabilizer.adb" 100 0 0] (Standard__integer___axiom.dynamic_invariant Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content False False True True) } ));
   ();
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:102:18] ([#"power_grid_energy_stabilizer.adb" 102 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:102:61] ([#"power_grid_energy_stabilizer.adb" 102 0 0] ()) );
   ( [@GP_Sloc:power_grid_energy_stabilizer.adb:102:7] ([#"power_grid_energy_stabilizer.adb" 102 0 0] (if (( ([#"power_grid_energy_stabilizer.adb" 102 0 0] [#"power_grid_energy_stabilizer.adb" 102 0 0] (([@branch_id=2690] Main.spark__branch).bool__content <- ( ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)) > (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured))) )));
   ( [@branch_id=2690] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:104:13] ([#"power_grid_energy_stabilizer.adb" 104 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:104:41] ([#"power_grid_energy_stabilizer.adb" 104 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:104:84] ([#"power_grid_energy_stabilizer.adb" 104 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:104:30] ([#"power_grid_energy_stabilizer.adb" 104 0 0] [#"power_grid_energy_stabilizer.adb" 104 0 0] (Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content <- ( ((Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__supplied_measured)) - (Global_variables__electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__consumption_measured))) ))) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:105:13] ([#"power_grid_energy_stabilizer.adb" 105 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:105:30] ([#"power_grid_energy_stabilizer.adb" 105 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:105:57] ([#"power_grid_energy_stabilizer.adb" 105 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:105:27] ([#"power_grid_energy_stabilizer.adb" 105 0 0] [#"power_grid_energy_stabilizer.adb" 105 0 0] (Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content <- ( ([#"power_grid_energy_stabilizer.adb" 105 0 0] ( [@comment:            Reserve_Total := Remaining_Supply + Integer(Status_System.Reserved_Measured);                                               ^ power_grid_energy_stabilizer.adb:105:47:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:power_grid_energy_stabilizer.adb:105:47] [@GP_Shape:if__reserve_total_assign__add] [@GP_Id:4] (Standard__integer.range_check_((Power_grid_energy_stabilizer__refill_reserve__remaining_supply.remaining_supply.int__content + (Global_variables__reserve_electricity_range__rep.to_rep({ Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content }.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured))))) )) ))) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:13] ([#"power_grid_energy_stabilizer.adb" 106 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:74] ([#"power_grid_energy_stabilizer.adb" 106 0 0] ()) );
    ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:45] ([#"power_grid_energy_stabilizer.adb" 106 0 0] (let temp___312 [@mlw:proxy_symbol] [@introduced] = (let temp___311 [@mlw:proxy_symbol] [@introduced] = { Global_variables__status_system_type.__split_fields = Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content } in (
     ( [#"power_grid_energy_stabilizer.adb" 106 0 0] begin ensures {true} let _ = (let _ = temp___311.Global_variables__status_system_type.__split_fields.Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured in (
      ()))
      in () end ;
     { ( temp___311 ) with Global_variables__status_system_type.__split_fields = { ( temp___311.Global_variables__status_system_type.__split_fields ) with Global_variables__status_system_type.rec__global_variables__status_system_type__reserved_measured = (Global_variables__reserve_electricity_range__rep.of_rep(([#"power_grid_energy_stabilizer.adb" 106 0 0] ( [@GP_Sloc:power_grid_energy_stabilizer.adb:106:74] [@vc:annotation] [@comment:            Status_System.Reserved_Measured := Reserve_Electricity_Range(Reserve_Total);                                                                          ^ power_grid_energy_stabilizer.adb:106:74:VC_RANGE_CHECK] [@GP_Shape:if__status_system_assign__typeconv] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:5] (Global_variables__reserve_electricity_range.range_check_(Power_grid_energy_stabilizer__refill_reserve__reserve_total.reserve_total.int__content)) )))) } } )))
     in (
      (Power_grid_energy_stabilizer__status_system.status_system__split_fields.Global_variables__status_system_type.__split_fields__content <- ( temp___312.Global_variables__status_system_type.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
